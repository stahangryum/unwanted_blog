{
  
    
        "post0": {
            "title": "Taylor & Maclaurin Series",
            "content": "Taylor Series . $ f(x) = sum_{n=0}^ infty cfrac{f^{(n)}(a)}{n!}(x-a)^n qquad quad= f(a) + cfrac{f&#39;(a)}{1!}(x-a) + cfrac{f&#39;&#39;(a)}{2!}(x-a) + cfrac{f&#39;&#39;&#39;(a)}{3!}(x-a)+ cdots $ . Maclaurin Series . $ f(x) = sum_{n=0}^ infty cfrac{f^{(n)}(0)}{n!}(x-0)^n qquad quad = f(a) + cfrac{f^{ prime}(0)}{1!}(x-0) + cfrac{f^{ prime prime}(0)}{2!}(x-0) + cfrac{f^{ prime prime prime}(0)}{3!}(x-0)+ cdots $ . Examples . $ cfrac{1}{1-x} = sum_{n=0}^ infty{x^n} = 1+x+x^2+x^3+ cdots qquad R = 1 , e^x = sum_{n=0}^ infty cfrac{x^n}{n!} = 1 + cfrac{x}{1!} + cfrac{x^2}{2!} + cfrac{x^3}{3!}+ cdots qquad R = infty , sin ,x = sum_{n=0}^ infty(-1)^n cfrac{x^{2n+1}}{(2n+1)!} = x - cfrac{x^3}{3!} + cfrac{x^5}{5!} - cfrac{x^7}{7!}+ cdots qquad R = infty , cos ,x = sum_{n=0}^ infty(-1)^n cfrac{x^{2n}}{(2n)!} = 1 - cfrac{x^2}{2!} + cfrac{x^4}{4!} - cfrac{x^6}{6!}+ cdots qquad R = infty , tan^{-1} ,x = sum_{n=0}^ infty(-1)^n cfrac{x^{2n+1}}{(2n+1)} = x - cfrac{x^3}{3} + cfrac{x^5}{5} - cfrac{x^7}{7}+ cdots qquad R = 1 , ln(1+x) = sum_{n=1}^ infty(-1)^{n-1} cfrac{x^{n}}{n} = x - cfrac{x^2}{2} + cfrac{x^3}{3} - cfrac{x^4}{4}+ cdots qquad R = 1 $ .",
            "url": "https://stahangryum.github.io/stahangryum/calculus/2021/10/02/%ED%85%8C%EC%9D%BC%EB%9F%AC-%EA%B8%89%EC%88%98.html",
            "relUrl": "/calculus/2021/10/02/%ED%85%8C%EC%9D%BC%EB%9F%AC-%EA%B8%89%EC%88%98.html",
            "date": " • Oct 2, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "?seq . Warning message in seq_len(head.end.idx): &#34;first element used of &#39;length.out&#39; argument&#34; ERROR while rich displaying an object: Error in seq_len(head.end.idx): 인자는 반드시 음이 아닌 정수로 강제형변환할 수 있어야 합니다 Traceback: 1. FUN(X[[i]], ...) 2. tryCatch(withCallingHandlers({ . if (!mime %in% names(repr::mime2repr)) . stop(&#34;No repr_* for mimetype &#34;, mime, &#34; in repr::mime2repr&#34;) . rpr &lt;- repr::mime2repr[[mime]](obj) . if (is.null(rpr)) . return(NULL) . prepare_content(is.raw(rpr), rpr) . }, error = error_handler), error = outer_handler) 3. tryCatchList(expr, classes, parentenv, handlers) 4. tryCatchOne(expr, names, parentenv, handlers[[1L]]) 5. doTryCatch(return(expr), name, parentenv, handler) 6. withCallingHandlers({ . if (!mime %in% names(repr::mime2repr)) . stop(&#34;No repr_* for mimetype &#34;, mime, &#34; in repr::mime2repr&#34;) . rpr &lt;- repr::mime2repr[[mime]](obj) . if (is.null(rpr)) . return(NULL) . prepare_content(is.raw(rpr), rpr) . }, error = error_handler) 7. repr::mime2repr[[mime]](obj) 8. repr_html.help_files_with_topic(obj) 9. repr_help_files_with_topic_generic(obj, Rd2HTML) . inputencoding{utf8} HeaderA{seq}{Sequence Generation}{seq} methaliasA{seq.default}{seq}{seq.default} methaliasA{seq.int}{seq}{seq.int} aliasA{seq _along}{seq}{seq.Rul.along} aliasA{seq _len}{seq}{seq.Rul.len} keyword{manip}{seq} % begin{Description} relax Generate regular sequences. code{seq} is a standard generic with a default method. code{seq.int} is a primitive which can be much faster but has a few restrictions. code{seq _along} and code{seq _len} are very fast primitives for two common cases. end{Description} % begin{Usage} begin{verbatim} seq(...) ## Default S3 method: seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...) seq.int(from, to, by, length.out, along.with, ...) seq_along(along.with) seq_len(length.out) end{verbatim} end{Usage} % begin{Arguments} begin{ldescription} item[ code{...}] arguments passed to or from methods. item[ code{from, to}] the starting and (maximal) end values of the sequence. Of length code{1} unless just code{from} is supplied as an unnamed argument. item[ code{by}] number: increment of the sequence. item[ code{length.out}] desired length of the sequence. A non-negative number, which for code{seq} and code{seq.int} will be rounded up if fractional. item[ code{along.with}] take the length from the length of this argument. end{ldescription} end{Arguments} % begin{Details} relax Numerical inputs should all be LinkA{finite}{finite} (that is, not infinite, code{ LinkA{NaN}{NaN}} or code{NA}). The interpretation of the unnamed arguments of code{seq} and code{seq.int} is emph{not} standard, and it is recommended always to name the arguments when programming. code{seq} is generic, and only the default method is described here. Note that it dispatches on the class of the strong{first} argument irrespective of argument names. This can have unintended consequences if it is called with just one argument intending this to be taken as code{along.with}: it is much better to use code{seq _along} in that case. code{seq.int} is an LinkA{internal generic}{internal generic} which dispatches on methods for code{&quot;seq&quot;} based on the class of the first supplied argument (before argument matching). Typical usages are begin{alltt}seq(from, to) seq(from, to, by= ) seq(from, to, length.out= ) seq(along.with= ) seq(from) seq(length.out= ) end{alltt} The first form generates the sequence code{from, from+/-1, ..., to} (identical to code{from:to}). The second form generates code{from, from+by}, ldots, up to the sequence value less than or equal to code{to}. Specifying code{to - from} and code{by} of opposite signs is an error. Note that the computed final value can go just beyond code{to} to allow for rounding error, but is truncated to code{to}. (`Just beyond&#39; is by up to eqn{10^{-10}}{} times code{abs(from - to)}.) The third generates a sequence of code{length.out} equally spaced values from code{from} to code{to}. ( code{length.out} is usually abbreviated to code{length} or code{len}, and code{seq _len} is much faster.) The fourth form generates the integer sequence code{1, 2, ..., length(along.with)}. ( code{along.with} is usually abbreviated to code{along}, and code{seq _along} is much faster.) The fifth form generates the sequence code{1, 2, ..., length(from)} (as if argument code{along.with} had been specified), emph{unless} the argument is numeric of length 1 when it is interpreted as code{1:from} (even for code{seq(0)} for compatibility with S). Using either code{seq _along} or code{seq _len} is much preferred (unless strict S compatibility is essential). The final form generates the integer sequence code{1, 2, ..., length.out} unless code{length.out = 0}, when it generates code{integer(0)}. Very small sequences (with code{from - to} of the order of eqn{10^{-14}}{} times the larger of the ends) will return code{from}. For code{seq} (only), up to two of code{from}, code{to} and code{by} can be supplied as complex values provided code{length.out} or code{along.with} is specified. More generally, the default method of code{seq} will handle classed objects with methods for the code{Math}, code{Ops} and code{Summary} group generics. code{seq.int}, code{seq _along} and code{seq _len} are LinkA{primitive}{primitive}. end{Details} % begin{Value} code{seq.int} and the default method of code{seq} for numeric arguments return a vector of type code{&quot;integer&quot;} or code{&quot;double&quot;}: programmers should not rely on which. code{seq _along} and code{seq _len} return an integer vector, unless it is a emph{ LinkA{long vector}{long vector}} when it will be double. end{Value} % begin{References} relax Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) emph{The New S Language}. Wadsworth &amp; Brooks/Cole. end{References} % begin{SeeAlso} relax The methods code{ LinkA{seq.Date}{seq.Date}} and code{ LinkA{seq.POSIXt}{seq.POSIXt}}. code{ LinkA{:}{:}}, code{ LinkA{rep}{rep}}, code{ LinkA{sequence}{sequence}}, code{ LinkA{row}{row}}, code{ LinkA{col}{col}}. end{SeeAlso} % begin{Examples} begin{ExampleCode} seq(0, 1, length.out = 11) seq(stats::rnorm(20)) # effectively &#39;along&#39; seq(1, 9, by = 2) # matches &#39;end&#39; seq(1, 9, by = pi) # stays below &#39;end&#39; seq(1, 6, by = 3) seq(1.575, 5.125, by = 0.05) seq(17) # same as 1:17, or even better seq_len(17) end{ExampleCode} end{Examples}",
            "url": "https://stahangryum.github.io/stahangryum/2021/10/02/Untitled.html",
            "relUrl": "/2021/10/02/Untitled.html",
            "date": " • Oct 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "R : for()",
            "content": "Problem 1 . . Solution I . $f(a) = cfrac{2^a+2^{-a}}{2^{a}-2^{-a}}$에서 $f(a) =-2$를 만족하는 a를 구해보자. . f &lt;-function(a){ (2**a + 2**(-a))/(2**a - 2**(-a)) } . $f(a)$의 그래프를 그리고 $f(a) = -2$에 해당하는 수평선을 그려서 a의 대략적인 범위를 구해보자. . a = seq(from = -5, to = 5, by = 0.1) plot(a, f(a)) abline(h= -2, col = &quot;red&quot;) . $-2&lt;a&lt;0$임을 알았다. . 범위를 좁히고, by 옵션을 사용하여 더 촘촘히 다시 그려보자. . a = seq(from = -1, to = -0.5, by = 0.0001) plot(a, f(a), type = &quot;l&quot;, lwd = 4) abline(h = -2, col = &quot;red&quot;, lwd = 4) . $-0.9 &lt; a &lt; -0.8$임을 알았다. . - 이제 해를 찾아보자. $f(a) = -2$를 찾아야 하므로 f(a) == -2를 조건식으로 걸자 . a = seq(from = -0.9, to = -0.7, by = 0.0001) f(areached getOption(&#34;max.print&#34;) -- omitted 1001 entries ] . . 이중에 적당한 값(TRUE)가 있을까? | . TRUE가 있는지 체크할 수 있는 방법은 없을까? | . True and False . 컴퓨터는 TRUE, FALSE를 각각 1, 0으로 인식한다. . print(TRUE + FALSE) . [1] 1 . print(TRUE * 2) . [1] 2 . print(2 * c(TRUE, FALSE, TRUE)) . [1] 2 0 2 . sum(c(TRUE, FALSE, TRUE)) . [1] 2 . Application . sum(f(a) == 2) . [1] 0 . 어? 없네 . 사실 컴퓨터는 근사계산을 하였으므로 $f(a) = -2$인 경우를 정확하게 찾기는 힘들다. . 따라서 적당한 근사값인 $f(a) approx -2$인 경우를 찾는게 더 합리적이다. . $|f(a) + 2|$이 최솟값을 갖게하는 $a$를 구해도 무방하다. . min(abs(f(a) + 2)) # f(a) + 2d의 절댓값 중 가장 작은 값 . [1] 3.898777e-05 . min 함수를 사용하면 최솟값을 구할 수 있다. . abs 함수를 사용하면 절댓값을 구할 수 있다. . plot(abs(f(a) + 2)) . TFarray &lt;- abs(f(a) + 2) == min(abs(f(a) + 2)) a[TFarray] . [1] -0.7925 . $a approx -0.7925$ . $ therefore 4^{a} + 4^{-a} approx 4^{-0.7925} + 4^{0.7925} $ . print(4**0.7925 + 4**(-0.7925)) . [1] 3.333403 . print(c(5/2, 10/3,17/4,26/5,37/6)) . [1] 2.500000 3.333333 4.250000 5.200000 6.166667 . 고로 답은 2번이다. . Problem 2 . . Solution I - &#47924;&#51648;&#49457; &#45824;&#51077; . $a_{n+1} + a_n = (-1)^{n+1} times n$ . $a_{n+1} = -a_n + (-1)^{n+1} times n$ . a1=12 n=1 a2= -a1+(-1)^(n+1)* n n=2 a3= -a2+(-1)^(n+1)* n n=3 a4= -a3+(-1)^(n+1)* n n=4 a5= -a4+(-1)^(n+1)* n n=5 a6= -a5+(-1)^(n+1)* n n=6 a7= -a6+(-1)^(n+1)* n n=7 a8= -a7+(-1)^(n+1)* n n=8 a9= -a8+(-1)^(n+1)* n n=9 a10= -a9+(-1)^(n+1)* n a=c(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 . $k$의 최솟값은 $8$ | . Solution II - for&#47928; . $a_{n+1} + a_n = (-1)^{n+1} times n$ . $a_{n+1} = -a_n + (-1)^{n+1} times n$ . - 예비학습 . a_ &lt;- c() print(a_) . NULL . a_[1] &lt;- 12 print(a_) . [1] 12 . a_[2] &lt;- -12 print(a_) . [1] 12 -12 . a_[4] &lt;- 3 print(a_) . [1] 12 -12 NA 3 . a &lt;- c() a[1] &lt;- 12 . for(n in 1:10){ a[n+1] &lt;- -a[n] + (-1)**(n+1) * n } print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 -43 . . print((1:20)[a&gt;12]) . [1] 8 10 19 . 조건을 만족하는 $k$의 최솟값은 $8$ | . Problem 3 . . Solution . sal &lt;- c() sal[1] &lt;- 1 # 첫해의 연봉은 1로 하자. . for(i in 2:19){ sal[i] &lt;- sal[i-1] * 1.08 #조건 (가) } sal[20:28] = 2/3 * sal[19] #조건 (나) print(sal) . sum(sal) . [1] 65.42238 . $65.42238a approx cfrac{131}{2}a$이므로 . 28년 동안 근무하여 받는 연봉의 총합은 $ cfrac{131}{2}a$ . Problem 4 . . Solution . x = c() x[1] = 5 x[2] = 5 for (n in 3:100){ temp_ = mean(x[1:(n-1)]) + 1 # temp_ = x_1부터 x_n까지의 평균 sum_ = temp_ * n # sum_ = x_1부터 x_n까지의 합 x[n] = sum_ - sum(x[1:n-1]) # x[n] = x_1부터 x_n까지의 합 - x_1부터 x_{n-1}까지의 합 } x[100] . [1] 202 . $x_{100} = 202$ . Problem 5 . . Solution . a &lt;- c() a[1] = 0 # 첫째항은 0이라고 하자. a[2] = 1 . $S_n$은 $n$이 짝수인지, 홀수인지에 따라서 정의가 달라진다. . $S_3 = S_1 - 3$ . $S_5 = S_3 - 3$ . ... . $S_4 = S_2 + 2$ . $S_6 = S_4 + 2$ . ... . S &lt;- c() S[1] = a[1] S[2] = a[1] + a[2] . &#45208;&#47672;&#51648;&#47484; &#44396;&#54616;&#45716; &#50672;&#49328;&#51088; %% . 짝수, 홀수를 구분할 때 사용하면 좋다. | . (1:10) . [1] 1 2 3 4 5 6 7 8 9 10 . (1:10) %% 2 # 2로 나누었을 때의 나머지, 홀수는 1, 짝수는 0 . [1] 1 0 1 0 1 0 1 0 1 0 . for(n in 3:50){ if (n %% 2 == 1){ #n이 홀수인 경우 S[n] = S[n-2] - 3 } else if(n %% 2 == 0){ # n이 짝수인 경우 S[n] = S[n-2] + 2 } else{print(&quot;Error&quot;)} } S . [1] 0 1 -3 3 -6 5 -9 7 -12 9 -15 11 -18 13 -21 15 -24 17 -27 [20] 19 -30 21 -33 23 -36 25 -39 27 -42 29 -45 31 -48 33 -51 35 -54 37 [39] -57 39 -60 41 -63 43 -66 45 -69 47 -72 49 . $a_n = S_n - S_{n-1}$ 이므로 . for(n in 3:50){ a[n] = S[n] - S[n-1] } a . [1] 0 1 -4 6 -9 11 -14 16 -19 21 -24 26 -29 31 -34 [16] 36 -39 41 -44 46 -49 51 -54 56 -59 61 -64 66 -69 71 [31] -74 76 -79 81 -84 86 -89 91 -94 96 -99 101 -104 106 -109 [46] 111 -114 116 -119 121 . a[8] . [1] 16 . $ therefore a_8 = 16$ . &#44284;&#51228; . $a_1$이 달라지면 어떻게 되는지 확인하라. | . a &lt;- c() a[1] = 5 # 첫째항은 5이라고 하자. a[2] = 1 S &lt;- c() S[1] = a[1] S[2] = a[1] + a[2] for(n in 3:100){ if (n %% 2 == 1){ #n이 홀수인 경우 S[n] = S[n-2] - 3 } else if(n %% 2 == 0){ # n이 짝수인 경우 S[n] = S[n-2] + 2 } else{print(&quot;Error&quot;)} } for(n in 3:100){ a[n] = S[n] - S[n-1] } a[8] . [1] 16 . $a_1$이 달라지면 $s_n$은 달라지지만 $a_n (n geq 2)$은 달라지지 않는다. | . 1. 2005년 대학수학능력시험 6월 모의평가 수리영역(나형) 4번↩ . 2. 2021년 대학수학능력시험 9월 모의평가 수학영역(가형) 10번↩ . 3. 2007년 대학수학능력시험 6월 모의평가 수리영역(나형) 14번↩ . 4. 2007년 대학수학능력시험 수리영역(인문계) 19번↩ . 5. 2010년 대학수학능력시험 수리영역(나형) 30번↩ .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/17/R%EC%9E%85%EB%AC%B8-3%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/17/R%EC%9E%85%EB%AC%B8-3%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 17, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stahangryum.github.io/stahangryum/jupyter/2020/02/20/t12est.html",
            "relUrl": "/jupyter/2020/02/20/t12est.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stahangryum.github.io/stahangryum/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Contact . Email : stahangryum@gmail.com | .",
          "url": "https://stahangryum.github.io/stahangryum/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stahangryum.github.io/stahangryum/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}