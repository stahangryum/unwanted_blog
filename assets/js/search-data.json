{
  
    
        "post0": {
            "title": "R 변수",
            "content": "&#48320;&#49688;&#50640; &#50612;&#46496;&#54620; &#44050;&#51012; &#45347;&#45716; &#48169;&#48277; . &#48169;&#48277;1 . a = 1 . a . 1 &#48169;&#48277;2 . b &lt;- 3 . b . 3 &#48320;&#49688; &#51060;&#47492;&#51012; &#49444;&#51221;&#54624; &#46412; &#51452;&#51032;&#54624; &#51216; . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196;&#47564; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . 444 &lt;- 5 . Error in 444 &lt;- 5: 대입에 유효하지 않은 (do_set) 좌변입니다 Traceback: . - &#48320;&#49688; &#51060;&#47492;&#51008; &#53945;&#49688;&#47928;&#51088;&#47196; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . ^^@ &lt; - 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예기치 않은 &#39;^&#39;입니다 1: ^ ^ Traceback: . - &#48320;&#49688; &#51060;&#47492;&#50640; &#46916;&#50612;&#50416;&#44592;&#47484; &#49324;&#50857;&#54624; &#49688; &#50630;&#45796;. . Kim Jeewoo &lt;- 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:5: 예상하지 못한 기호(symbol)입니다. 1: Kim Jeewoo ^ Traceback: . - &#46916;&#50612;&#50416;&#44592; &#45824;&#49888; &#50616;&#45908;&#48148;(_)&#47484; &#49324;&#50857;&#54616;&#45716; &#44163;&#51008; &#44032;&#45733;&#54616;&#45796;. . - &#45800;, &#48320;&#49688; &#51060;&#47492;&#51012; &#50616;&#45908;&#48148;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . Kim_Jeewoo &lt;- 4 Kim.Jeewoo &lt;- 5 . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . 1a &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 1a ^ Traceback: . - &#51060;&#44148; &#44032;&#45733;&#54616;&#45796; . a1 &lt;- 3 . &#44032;&#45733;&#51008; &#54616;&#45208; &#44428;&#51109;&#54616;&#51648; &#50506;&#45716; &#48320;&#49688; &#51060;&#47492; . pi . 3.14159265358979 pi&lt;-333 . pi . 333 원래 내장된 $ pi$가 날아가버렸다... . &#48320;&#49688; &#49373;&#49457;&#49884; &#54017; . - &#48320;&#49688;&#47484; &#52629;&#50557;&#54624; &#46412; &#47784;&#51020;&#51012; &#51228;&#50808;&#54616;&#47732; &#51339;&#45796;. . result -&gt; rslt | residual -&gt; rsdl | . - &#51076;&#49884;&#47196; &#48320;&#49688;&#47749;&#51012; &#49324;&#50857;&#54644;&#50556; &#54624; &#44221;&#50864; &#48320;&#49688; &#51060;&#47492; &#45149;&#50640; &#50616;&#45908;&#48148;&#47484; &#48537;&#51064;&#45796;. . x, y, rslt_, rsdl | . &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . &#48169;&#48277;1 : &#51649;&#51217; &#51077;&#47141; . v1 &lt;- c(1, 2, 3, 3, 4, 5, 2) . v1 . &lt;ol class=list-inline&gt;1 | 2 | 3 | 3 | 4 | 5 | 2 | &lt;/ol&gt; print(v1) . [1] 1 2 3 3 4 5 2 . &#48169;&#48277;2 : seq&#47484; &#51060;&#50857; . v2 &lt;- seq(from=0, to=10, by=0.1) #0부터 10까지 0.1 단위로 벡터 생성! . print(v2) . [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 [16] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 [31] 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 [46] 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 [61] 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 [76] 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 [91] 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . ?seq . Warning message in seq_len(head.end.idx): &#34;first element used of &#39;length.out&#39; argument&#34; ERROR while rich displaying an object: Error in seq_len(head.end.idx): 인자는 반드시 음이 아닌 정수로 강제형변환할 수 있어야 합니다 Traceback: 1. FUN(X[[i]], ...) 2. tryCatch(withCallingHandlers({ . if (!mime %in% names(repr::mime2repr)) . stop(&#34;No repr_* for mimetype &#34;, mime, &#34; in repr::mime2repr&#34;) . rpr &lt;- repr::mime2repr[[mime]](obj) . if (is.null(rpr)) . return(NULL) . prepare_content(is.raw(rpr), rpr) . }, error = error_handler), error = outer_handler) 3. tryCatchList(expr, classes, parentenv, handlers) 4. tryCatchOne(expr, names, parentenv, handlers[[1L]]) 5. doTryCatch(return(expr), name, parentenv, handler) 6. withCallingHandlers({ . if (!mime %in% names(repr::mime2repr)) . stop(&#34;No repr_* for mimetype &#34;, mime, &#34; in repr::mime2repr&#34;) . rpr &lt;- repr::mime2repr[[mime]](obj) . if (is.null(rpr)) . return(NULL) . prepare_content(is.raw(rpr), rpr) . }, error = error_handler) 7. repr::mime2repr[[mime]](obj) 8. repr_html.help_files_with_topic(obj) 9. repr_help_files_with_topic_generic(obj, Rd2HTML) . inputencoding{utf8} HeaderA{seq}{Sequence Generation}{seq} methaliasA{seq.default}{seq}{seq.default} methaliasA{seq.int}{seq}{seq.int} aliasA{seq _along}{seq}{seq.Rul.along} aliasA{seq _len}{seq}{seq.Rul.len} keyword{manip}{seq} % begin{Description} relax Generate regular sequences. code{seq} is a standard generic with a default method. code{seq.int} is a primitive which can be much faster but has a few restrictions. code{seq _along} and code{seq _len} are very fast primitives for two common cases. end{Description} % begin{Usage} begin{verbatim} seq(...) ## Default S3 method: seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...) seq.int(from, to, by, length.out, along.with, ...) seq_along(along.with) seq_len(length.out) end{verbatim} end{Usage} % begin{Arguments} begin{ldescription} item[ code{...}] arguments passed to or from methods. item[ code{from, to}] the starting and (maximal) end values of the sequence. Of length code{1} unless just code{from} is supplied as an unnamed argument. item[ code{by}] number: increment of the sequence. item[ code{length.out}] desired length of the sequence. A non-negative number, which for code{seq} and code{seq.int} will be rounded up if fractional. item[ code{along.with}] take the length from the length of this argument. end{ldescription} end{Arguments} % begin{Details} relax Numerical inputs should all be LinkA{finite}{finite} (that is, not infinite, code{ LinkA{NaN}{NaN}} or code{NA}). The interpretation of the unnamed arguments of code{seq} and code{seq.int} is emph{not} standard, and it is recommended always to name the arguments when programming. code{seq} is generic, and only the default method is described here. Note that it dispatches on the class of the strong{first} argument irrespective of argument names. This can have unintended consequences if it is called with just one argument intending this to be taken as code{along.with}: it is much better to use code{seq _along} in that case. code{seq.int} is an LinkA{internal generic}{internal generic} which dispatches on methods for code{&quot;seq&quot;} based on the class of the first supplied argument (before argument matching). Typical usages are begin{alltt}seq(from, to) seq(from, to, by= ) seq(from, to, length.out= ) seq(along.with= ) seq(from) seq(length.out= ) end{alltt} The first form generates the sequence code{from, from+/-1, ..., to} (identical to code{from:to}). The second form generates code{from, from+by}, ldots, up to the sequence value less than or equal to code{to}. Specifying code{to - from} and code{by} of opposite signs is an error. Note that the computed final value can go just beyond code{to} to allow for rounding error, but is truncated to code{to}. (`Just beyond&#39; is by up to eqn{10^{-10}}{} times code{abs(from - to)}.) The third generates a sequence of code{length.out} equally spaced values from code{from} to code{to}. ( code{length.out} is usually abbreviated to code{length} or code{len}, and code{seq _len} is much faster.) The fourth form generates the integer sequence code{1, 2, ..., length(along.with)}. ( code{along.with} is usually abbreviated to code{along}, and code{seq _along} is much faster.) The fifth form generates the sequence code{1, 2, ..., length(from)} (as if argument code{along.with} had been specified), emph{unless} the argument is numeric of length 1 when it is interpreted as code{1:from} (even for code{seq(0)} for compatibility with S). Using either code{seq _along} or code{seq _len} is much preferred (unless strict S compatibility is essential). The final form generates the integer sequence code{1, 2, ..., length.out} unless code{length.out = 0}, when it generates code{integer(0)}. Very small sequences (with code{from - to} of the order of eqn{10^{-14}}{} times the larger of the ends) will return code{from}. For code{seq} (only), up to two of code{from}, code{to} and code{by} can be supplied as complex values provided code{length.out} or code{along.with} is specified. More generally, the default method of code{seq} will handle classed objects with methods for the code{Math}, code{Ops} and code{Summary} group generics. code{seq.int}, code{seq _along} and code{seq _len} are LinkA{primitive}{primitive}. end{Details} % begin{Value} code{seq.int} and the default method of code{seq} for numeric arguments return a vector of type code{&quot;integer&quot;} or code{&quot;double&quot;}: programmers should not rely on which. code{seq _along} and code{seq _len} return an integer vector, unless it is a emph{ LinkA{long vector}{long vector}} when it will be double. end{Value} % begin{References} relax Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) emph{The New S Language}. Wadsworth &amp; Brooks/Cole. end{References} % begin{SeeAlso} relax The methods code{ LinkA{seq.Date}{seq.Date}} and code{ LinkA{seq.POSIXt}{seq.POSIXt}}. code{ LinkA{:}{:}}, code{ LinkA{rep}{rep}}, code{ LinkA{sequence}{sequence}}, code{ LinkA{row}{row}}, code{ LinkA{col}{col}}. end{SeeAlso} % begin{Examples} begin{ExampleCode} seq(0, 1, length.out = 11) seq(stats::rnorm(20)) # effectively &#39;along&#39; seq(1, 9, by = 2) # matches &#39;end&#39; seq(1, 9, by = pi) # stays below &#39;end&#39; seq(1, 6, by = 3) seq(1.575, 5.125, by = 0.05) seq(17) # same as 1:17, or even better seq_len(17) end{ExampleCode} end{Examples}",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "R 소개",
            "content": "&quot;R&#51008; &#51339;&#51008; &#44228;&#49328;&#44592;&#51060;&#45796;.&quot; . 2005&#45380; &#50696;&#48708;&#54217;&#44032;(&#45208;) 12&#50900;/&#54217;&#44032;&#50896;26&#48264;(&#44256;3) . 어떤 호수에서 수면에서의 빛의 세기가 $I_0$일 때, 수면이 $d$m인 곳에서의 빛의 세기 $I_d$는 다음과 같이 나타낸다. . $$I_d = I_0 2^{-0.25d}$$ . 이 호수에서 빛의 세기가 수면에서의 빛의 세기의 25%인 곳의 수심은? (3점) . (1) 16m . (2) 12m . (3) 10m . (4) 8m . (5) 4m . (&#54400;&#51060;1) . $I_d = I_0 2^{-0.25d}$ . $ frac{I_d}{I_0} = 0.25 = 2^{-2} = 2^{-0.25d}$ 이므로 . $-2 = -0.25d$ . $d = 8m$ . . 갑 : 음.. 근데 8m 말고 11m일 때랑 7m일 때의 비율도 계산해줘 . 갑 : 아 아니다 그냥 1m부터 40m까지 다 구해줘!! . 을 : ?? (일일이 대입하면 너무 힘든데... 어쩌지?) . . (&#54400;&#51060;2) . $d$를 입력하면 $ frac{I_d}{I_0}$가 계산되는 아래와 같은 함수를 만들고 싶다. | . $ frac{I_d}{I_0}=y=f(d)=2^{-0.25d}$ . f &lt;- function(d){ y=2^(-0.25*d) y } . print(f(8)) . [1] 0.25 . print(f(11)) . [1] 0.1486509 . print(f(7)) . [1] 0.2973018 . for(d in 1:40){ print(f(d)) } . [1] 0.8408964 [1] 0.7071068 [1] 0.5946036 [1] 0.5 [1] 0.4204482 [1] 0.3535534 [1] 0.2973018 [1] 0.25 [1] 0.2102241 [1] 0.1767767 [1] 0.1486509 [1] 0.125 [1] 0.1051121 [1] 0.08838835 [1] 0.07432544 [1] 0.0625 [1] 0.05255603 [1] 0.04419417 [1] 0.03716272 [1] 0.03125 [1] 0.02627801 [1] 0.02209709 [1] 0.01858136 [1] 0.015625 [1] 0.01313901 [1] 0.01104854 [1] 0.009290681 [1] 0.0078125 [1] 0.006569503 [1] 0.005524272 [1] 0.00464534 [1] 0.00390625 [1] 0.003284752 [1] 0.002762136 [1] 0.00232267 [1] 0.001953125 [1] 0.001642376 [1] 0.001381068 [1] 0.001161335 [1] 0.0009765625 . 엄청 편하다.. . (&#54400;&#51060;3) . $y=f(d)$를 그래프로 그려볼까? | . d &lt;- seq(from=0, to=10, by=0.01) y=2^(-0.25*d) plot(d,y) abline(v = 8, h = 0.25, col=2, lwd=5, lty = 1) #col = 색, lwd = 굵기, lty = 점선 #h = 수평선, v = 수직선 . (&#54400;&#51060;4) . 작성중 . x_ &lt;- c(1,2,3,4,5) x_ == 3 . &lt;ol class=list-inline&gt;FALSE | FALSE | TRUE | FALSE | FALSE | &lt;/ol&gt; x_ == 1 . &lt;ol class=list-inline&gt;TRUE | FALSE | FALSE | FALSE | FALSE | &lt;/ol&gt; d[y==1] . 40",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stahangryum.github.io/stahangryum/jupyter/2020/02/20/t12est.html",
            "relUrl": "/jupyter/2020/02/20/t12est.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stahangryum.github.io/stahangryum/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stahangryum.github.io/stahangryum/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stahangryum.github.io/stahangryum/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}