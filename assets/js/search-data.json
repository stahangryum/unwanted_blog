{
  
    
        "post0": {
            "title": "R - for문",
            "content": "Problem 1 . . Solution I . $f(a) = cfrac{2^a+2^{-a}}{2^{a}-2^{-a}}$에서 $f(a) =-2$를 만족하는 a를 구해보자. . f &lt;-function(a){ (2**a + 2**(-a))/(2**a - 2**(-a)) } . $f(a)$의 그래프를 그리고 $f(a) = -2$에 해당하는 수평선을 그려서 a의 대략적인 범위를 구해보자. . a = seq(from = -5, to = 5, by = 0.1) plot(a, f(a)) abline(h= -2, col = &quot;red&quot;) . $-2&lt;a&lt;0$임을 알았다. . 범위를 좁히고, by 옵션을 사용하여 더 촘촘히 다시 그려보자. . a = seq(from = -1, to = -0.5, by = 0.0001) plot(a, f(a), type = &quot;l&quot;, lwd = 4) abline(h = -2, col = &quot;red&quot;, lwd = 4) . $-0.9 &lt; a &lt; -0.8$임을 알았다. . - 이제 해를 찾아보자. $f(a) = -2$를 찾아야 하므로 f(a) == -2를 조건식으로 걸자 . a = seq(from = -0.9, to = -0.7, by = 0.0001) f(a) == -2 . &lt;ol class=list-inline&gt;FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | ⋯ | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | &lt;/ol&gt; . 이중에 적당한 값(TRUE)가 있을까? | . TRUE가 있는지 체크할 수 있는 방법은 없을까? | . True and False . 컴퓨터는 TRUE, FALSE를 각각 1, 0으로 인식한다. . print(TRUE + FALSE) . [1] 1 . print(TRUE * 2) . [1] 2 . print(2 * c(TRUE, FALSE, TRUE)) . [1] 2 0 2 . sum(c(TRUE, FALSE, TRUE)) . 2 Application . sum(f(a) == 2) . 0 어? 없네 . 사실 컴퓨터는 근사계산을 하였으므로 $f(a) = -2$인 경우를 정확하게 찾기는 힘들다. . 따라서 적당한 근사값인 $f(a) approx -2$인 경우를 찾는게 더 합리적이다. . $|f(a) + 2|$이 최솟값을 갖게하는 $a$를 구해도 무방하다. . min(abs(f(a) + 2)) # f(a) + 2d의 절댓값 중 가장 작은 값 . 3.89877657125393e-05 min 함수를 사용하면 최솟값을 구할 수 있다. . abs 함수를 사용하면 절댓값을 구할 수 있다. . plot(abs(f(a) + 2)) . TFarray &lt;- abs(f(a) + 2) == min(abs(f(a) + 2)) a[TFarray] . -0.7925 $a approx -0.7925$ . $ therefore 4^{a} + 4^{-a} approx 4^{-0.7925} + 4^{0.7925} $ . print(4**0.7925 + 4**(-0.7925)) . [1] 3.333403 . print(c(5/2, 10/3,17/4,26/5,37/6)) . [1] 2.500000 3.333333 4.250000 5.200000 6.166667 . 고로 답은 2번이다. . Problem 2 . . Solution I . 무지성 대입 . $a_{n+1} + a_n = (-1)^{n+1} times n$ . $a_{n+1} = -a_n + (-1)^{n+1} times n$ . a1=12 n=1 a2= -a1+(-1)^(n+1)* n n=2 a3= -a2+(-1)^(n+1)* n n=3 a4= -a3+(-1)^(n+1)* n n=4 a5= -a4+(-1)^(n+1)* n n=5 a6= -a5+(-1)^(n+1)* n n=6 a7= -a6+(-1)^(n+1)* n n=7 a8= -a7+(-1)^(n+1)* n n=8 a9= -a8+(-1)^(n+1)* n n=9 a10= -a9+(-1)^(n+1)* n a=c(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 . $k$의 최솟값은 $8$ | . Solution II . for문 활용 . $a_{n+1} + a_n = (-1)^{n+1} times n$ . $a_{n+1} = -a_n + (-1)^{n+1} times n$ . - &#50696;&#48708;&#54617;&#49845; . a_ &lt;- c() print(a_) . NULL . a_[1] &lt;- 12 print(a_) . [1] 12 . a_[2] &lt;- -12 print(a_) . [1] 12 -12 . a_[4] &lt;- 3 print(a_) . [1] 12 -12 NA 3 . a &lt;- c() a[1] &lt;- 12 . for(n in 1:10){ a[n+1] &lt;- -a[n] + (-1)**(n+1) * n } print(a) . [1] -0.9000 1.9000 -3.9000 6.9000 -10.9000 15.9000 -21.9000 28.9000 [9] -36.9000 45.9000 -55.9000 -0.8989 -0.8988 -0.8987 -0.8986 -0.8985 [17] -0.8984 -0.8983 -0.8982 -0.8981 -0.8980 -0.8979 -0.8978 -0.8977 [25] -0.8976 -0.8975 -0.8974 -0.8973 -0.8972 -0.8971 -0.8970 -0.8969 [33] -0.8968 -0.8967 -0.8966 -0.8965 -0.8964 -0.8963 -0.8962 -0.8961 [41] -0.8960 -0.8959 -0.8958 -0.8957 -0.8956 -0.8955 -0.8954 -0.8953 [49] -0.8952 -0.8951 -0.8950 -0.8949 -0.8948 -0.8947 -0.8946 -0.8945 [57] -0.8944 -0.8943 -0.8942 -0.8941 -0.8940 -0.8939 -0.8938 -0.8937 [65] -0.8936 -0.8935 -0.8934 -0.8933 -0.8932 -0.8931 -0.8930 -0.8929 [73] -0.8928 -0.8927 -0.8926 -0.8925 -0.8924 -0.8923 -0.8922 -0.8921 [81] -0.8920 -0.8919 -0.8918 -0.8917 -0.8916 -0.8915 -0.8914 -0.8913 [89] -0.8912 -0.8911 -0.8910 -0.8909 -0.8908 -0.8907 -0.8906 -0.8905 [97] -0.8904 -0.8903 -0.8902 -0.8901 -0.8900 -0.8899 -0.8898 -0.8897 [105] -0.8896 -0.8895 -0.8894 -0.8893 -0.8892 -0.8891 -0.8890 -0.8889 [113] -0.8888 -0.8887 -0.8886 -0.8885 -0.8884 -0.8883 -0.8882 -0.8881 [121] -0.8880 -0.8879 -0.8878 -0.8877 -0.8876 -0.8875 -0.8874 -0.8873 [129] -0.8872 -0.8871 -0.8870 -0.8869 -0.8868 -0.8867 -0.8866 -0.8865 [137] -0.8864 -0.8863 -0.8862 -0.8861 -0.8860 -0.8859 -0.8858 -0.8857 [145] -0.8856 -0.8855 -0.8854 -0.8853 -0.8852 -0.8851 -0.8850 -0.8849 [153] -0.8848 -0.8847 -0.8846 -0.8845 -0.8844 -0.8843 -0.8842 -0.8841 [161] -0.8840 -0.8839 -0.8838 -0.8837 -0.8836 -0.8835 -0.8834 -0.8833 [169] -0.8832 -0.8831 -0.8830 -0.8829 -0.8828 -0.8827 -0.8826 -0.8825 [177] -0.8824 -0.8823 -0.8822 -0.8821 -0.8820 -0.8819 -0.8818 -0.8817 [185] -0.8816 -0.8815 -0.8814 -0.8813 -0.8812 -0.8811 -0.8810 -0.8809 [193] -0.8808 -0.8807 -0.8806 -0.8805 -0.8804 -0.8803 -0.8802 -0.8801 [201] -0.8800 -0.8799 -0.8798 -0.8797 -0.8796 -0.8795 -0.8794 -0.8793 [209] -0.8792 -0.8791 -0.8790 -0.8789 -0.8788 -0.8787 -0.8786 -0.8785 [217] -0.8784 -0.8783 -0.8782 -0.8781 -0.8780 -0.8779 -0.8778 -0.8777 [225] -0.8776 -0.8775 -0.8774 -0.8773 -0.8772 -0.8771 -0.8770 -0.8769 [233] -0.8768 -0.8767 -0.8766 -0.8765 -0.8764 -0.8763 -0.8762 -0.8761 [241] -0.8760 -0.8759 -0.8758 -0.8757 -0.8756 -0.8755 -0.8754 -0.8753 [249] -0.8752 -0.8751 -0.8750 -0.8749 -0.8748 -0.8747 -0.8746 -0.8745 [257] -0.8744 -0.8743 -0.8742 -0.8741 -0.8740 -0.8739 -0.8738 -0.8737 [265] -0.8736 -0.8735 -0.8734 -0.8733 -0.8732 -0.8731 -0.8730 -0.8729 [273] -0.8728 -0.8727 -0.8726 -0.8725 -0.8724 -0.8723 -0.8722 -0.8721 [281] -0.8720 -0.8719 -0.8718 -0.8717 -0.8716 -0.8715 -0.8714 -0.8713 [289] -0.8712 -0.8711 -0.8710 -0.8709 -0.8708 -0.8707 -0.8706 -0.8705 [297] -0.8704 -0.8703 -0.8702 -0.8701 -0.8700 -0.8699 -0.8698 -0.8697 [305] -0.8696 -0.8695 -0.8694 -0.8693 -0.8692 -0.8691 -0.8690 -0.8689 [313] -0.8688 -0.8687 -0.8686 -0.8685 -0.8684 -0.8683 -0.8682 -0.8681 [321] -0.8680 -0.8679 -0.8678 -0.8677 -0.8676 -0.8675 -0.8674 -0.8673 [329] -0.8672 -0.8671 -0.8670 -0.8669 -0.8668 -0.8667 -0.8666 -0.8665 [337] -0.8664 -0.8663 -0.8662 -0.8661 -0.8660 -0.8659 -0.8658 -0.8657 [345] -0.8656 -0.8655 -0.8654 -0.8653 -0.8652 -0.8651 -0.8650 -0.8649 [353] -0.8648 -0.8647 -0.8646 -0.8645 -0.8644 -0.8643 -0.8642 -0.8641 [361] -0.8640 -0.8639 -0.8638 -0.8637 -0.8636 -0.8635 -0.8634 -0.8633 [369] -0.8632 -0.8631 -0.8630 -0.8629 -0.8628 -0.8627 -0.8626 -0.8625 [377] -0.8624 -0.8623 -0.8622 -0.8621 -0.8620 -0.8619 -0.8618 -0.8617 [385] -0.8616 -0.8615 -0.8614 -0.8613 -0.8612 -0.8611 -0.8610 -0.8609 [393] -0.8608 -0.8607 -0.8606 -0.8605 -0.8604 -0.8603 -0.8602 -0.8601 [401] -0.8600 -0.8599 -0.8598 -0.8597 -0.8596 -0.8595 -0.8594 -0.8593 [409] -0.8592 -0.8591 -0.8590 -0.8589 -0.8588 -0.8587 -0.8586 -0.8585 [417] -0.8584 -0.8583 -0.8582 -0.8581 -0.8580 -0.8579 -0.8578 -0.8577 [425] -0.8576 -0.8575 -0.8574 -0.8573 -0.8572 -0.8571 -0.8570 -0.8569 [433] -0.8568 -0.8567 -0.8566 -0.8565 -0.8564 -0.8563 -0.8562 -0.8561 [441] -0.8560 -0.8559 -0.8558 -0.8557 -0.8556 -0.8555 -0.8554 -0.8553 [449] -0.8552 -0.8551 -0.8550 -0.8549 -0.8548 -0.8547 -0.8546 -0.8545 [457] -0.8544 -0.8543 -0.8542 -0.8541 -0.8540 -0.8539 -0.8538 -0.8537 [465] -0.8536 -0.8535 -0.8534 -0.8533 -0.8532 -0.8531 -0.8530 -0.8529 [473] -0.8528 -0.8527 -0.8526 -0.8525 -0.8524 -0.8523 -0.8522 -0.8521 [481] -0.8520 -0.8519 -0.8518 -0.8517 -0.8516 -0.8515 -0.8514 -0.8513 [489] -0.8512 -0.8511 -0.8510 -0.8509 -0.8508 -0.8507 -0.8506 -0.8505 [497] -0.8504 -0.8503 -0.8502 -0.8501 -0.8500 -0.8499 -0.8498 -0.8497 [505] -0.8496 -0.8495 -0.8494 -0.8493 -0.8492 -0.8491 -0.8490 -0.8489 [513] -0.8488 -0.8487 -0.8486 -0.8485 -0.8484 -0.8483 -0.8482 -0.8481 [521] -0.8480 -0.8479 -0.8478 -0.8477 -0.8476 -0.8475 -0.8474 -0.8473 [529] -0.8472 -0.8471 -0.8470 -0.8469 -0.8468 -0.8467 -0.8466 -0.8465 [537] -0.8464 -0.8463 -0.8462 -0.8461 -0.8460 -0.8459 -0.8458 -0.8457 [545] -0.8456 -0.8455 -0.8454 -0.8453 -0.8452 -0.8451 -0.8450 -0.8449 [553] -0.8448 -0.8447 -0.8446 -0.8445 -0.8444 -0.8443 -0.8442 -0.8441 [561] -0.8440 -0.8439 -0.8438 -0.8437 -0.8436 -0.8435 -0.8434 -0.8433 [569] -0.8432 -0.8431 -0.8430 -0.8429 -0.8428 -0.8427 -0.8426 -0.8425 [577] -0.8424 -0.8423 -0.8422 -0.8421 -0.8420 -0.8419 -0.8418 -0.8417 [585] -0.8416 -0.8415 -0.8414 -0.8413 -0.8412 -0.8411 -0.8410 -0.8409 [593] -0.8408 -0.8407 -0.8406 -0.8405 -0.8404 -0.8403 -0.8402 -0.8401 [601] -0.8400 -0.8399 -0.8398 -0.8397 -0.8396 -0.8395 -0.8394 -0.8393 [609] -0.8392 -0.8391 -0.8390 -0.8389 -0.8388 -0.8387 -0.8386 -0.8385 [617] -0.8384 -0.8383 -0.8382 -0.8381 -0.8380 -0.8379 -0.8378 -0.8377 [625] -0.8376 -0.8375 -0.8374 -0.8373 -0.8372 -0.8371 -0.8370 -0.8369 [633] -0.8368 -0.8367 -0.8366 -0.8365 -0.8364 -0.8363 -0.8362 -0.8361 [641] -0.8360 -0.8359 -0.8358 -0.8357 -0.8356 -0.8355 -0.8354 -0.8353 [649] -0.8352 -0.8351 -0.8350 -0.8349 -0.8348 -0.8347 -0.8346 -0.8345 [657] -0.8344 -0.8343 -0.8342 -0.8341 -0.8340 -0.8339 -0.8338 -0.8337 [665] -0.8336 -0.8335 -0.8334 -0.8333 -0.8332 -0.8331 -0.8330 -0.8329 [673] -0.8328 -0.8327 -0.8326 -0.8325 -0.8324 -0.8323 -0.8322 -0.8321 [681] -0.8320 -0.8319 -0.8318 -0.8317 -0.8316 -0.8315 -0.8314 -0.8313 [689] -0.8312 -0.8311 -0.8310 -0.8309 -0.8308 -0.8307 -0.8306 -0.8305 [697] -0.8304 -0.8303 -0.8302 -0.8301 -0.8300 -0.8299 -0.8298 -0.8297 [705] -0.8296 -0.8295 -0.8294 -0.8293 -0.8292 -0.8291 -0.8290 -0.8289 [713] -0.8288 -0.8287 -0.8286 -0.8285 -0.8284 -0.8283 -0.8282 -0.8281 [721] -0.8280 -0.8279 -0.8278 -0.8277 -0.8276 -0.8275 -0.8274 -0.8273 [729] -0.8272 -0.8271 -0.8270 -0.8269 -0.8268 -0.8267 -0.8266 -0.8265 [737] -0.8264 -0.8263 -0.8262 -0.8261 -0.8260 -0.8259 -0.8258 -0.8257 [745] -0.8256 -0.8255 -0.8254 -0.8253 -0.8252 -0.8251 -0.8250 -0.8249 [753] -0.8248 -0.8247 -0.8246 -0.8245 -0.8244 -0.8243 -0.8242 -0.8241 [761] -0.8240 -0.8239 -0.8238 -0.8237 -0.8236 -0.8235 -0.8234 -0.8233 [769] -0.8232 -0.8231 -0.8230 -0.8229 -0.8228 -0.8227 -0.8226 -0.8225 [777] -0.8224 -0.8223 -0.8222 -0.8221 -0.8220 -0.8219 -0.8218 -0.8217 [785] -0.8216 -0.8215 -0.8214 -0.8213 -0.8212 -0.8211 -0.8210 -0.8209 [793] -0.8208 -0.8207 -0.8206 -0.8205 -0.8204 -0.8203 -0.8202 -0.8201 [801] -0.8200 -0.8199 -0.8198 -0.8197 -0.8196 -0.8195 -0.8194 -0.8193 [809] -0.8192 -0.8191 -0.8190 -0.8189 -0.8188 -0.8187 -0.8186 -0.8185 [817] -0.8184 -0.8183 -0.8182 -0.8181 -0.8180 -0.8179 -0.8178 -0.8177 [825] -0.8176 -0.8175 -0.8174 -0.8173 -0.8172 -0.8171 -0.8170 -0.8169 [833] -0.8168 -0.8167 -0.8166 -0.8165 -0.8164 -0.8163 -0.8162 -0.8161 [841] -0.8160 -0.8159 -0.8158 -0.8157 -0.8156 -0.8155 -0.8154 -0.8153 [849] -0.8152 -0.8151 -0.8150 -0.8149 -0.8148 -0.8147 -0.8146 -0.8145 [857] -0.8144 -0.8143 -0.8142 -0.8141 -0.8140 -0.8139 -0.8138 -0.8137 [865] -0.8136 -0.8135 -0.8134 -0.8133 -0.8132 -0.8131 -0.8130 -0.8129 [873] -0.8128 -0.8127 -0.8126 -0.8125 -0.8124 -0.8123 -0.8122 -0.8121 [881] -0.8120 -0.8119 -0.8118 -0.8117 -0.8116 -0.8115 -0.8114 -0.8113 [889] -0.8112 -0.8111 -0.8110 -0.8109 -0.8108 -0.8107 -0.8106 -0.8105 [897] -0.8104 -0.8103 -0.8102 -0.8101 -0.8100 -0.8099 -0.8098 -0.8097 [905] -0.8096 -0.8095 -0.8094 -0.8093 -0.8092 -0.8091 -0.8090 -0.8089 [913] -0.8088 -0.8087 -0.8086 -0.8085 -0.8084 -0.8083 -0.8082 -0.8081 [921] -0.8080 -0.8079 -0.8078 -0.8077 -0.8076 -0.8075 -0.8074 -0.8073 [929] -0.8072 -0.8071 -0.8070 -0.8069 -0.8068 -0.8067 -0.8066 -0.8065 [937] -0.8064 -0.8063 -0.8062 -0.8061 -0.8060 -0.8059 -0.8058 -0.8057 [945] -0.8056 -0.8055 -0.8054 -0.8053 -0.8052 -0.8051 -0.8050 -0.8049 [953] -0.8048 -0.8047 -0.8046 -0.8045 -0.8044 -0.8043 -0.8042 -0.8041 [961] -0.8040 -0.8039 -0.8038 -0.8037 -0.8036 -0.8035 -0.8034 -0.8033 [969] -0.8032 -0.8031 -0.8030 -0.8029 -0.8028 -0.8027 -0.8026 -0.8025 [977] -0.8024 -0.8023 -0.8022 -0.8021 -0.8020 -0.8019 -0.8018 -0.8017 [985] -0.8016 -0.8015 -0.8014 -0.8013 -0.8012 -0.8011 -0.8010 -0.8009 [993] -0.8008 -0.8007 -0.8006 -0.8005 -0.8004 -0.8003 -0.8002 -0.8001 [1001] -0.8000 -0.7999 -0.7998 -0.7997 -0.7996 -0.7995 -0.7994 -0.7993 [1009] -0.7992 -0.7991 -0.7990 -0.7989 -0.7988 -0.7987 -0.7986 -0.7985 [1017] -0.7984 -0.7983 -0.7982 -0.7981 -0.7980 -0.7979 -0.7978 -0.7977 [1025] -0.7976 -0.7975 -0.7974 -0.7973 -0.7972 -0.7971 -0.7970 -0.7969 [1033] -0.7968 -0.7967 -0.7966 -0.7965 -0.7964 -0.7963 -0.7962 -0.7961 [1041] -0.7960 -0.7959 -0.7958 -0.7957 -0.7956 -0.7955 -0.7954 -0.7953 [1049] -0.7952 -0.7951 -0.7950 -0.7949 -0.7948 -0.7947 -0.7946 -0.7945 [1057] -0.7944 -0.7943 -0.7942 -0.7941 -0.7940 -0.7939 -0.7938 -0.7937 [1065] -0.7936 -0.7935 -0.7934 -0.7933 -0.7932 -0.7931 -0.7930 -0.7929 [1073] -0.7928 -0.7927 -0.7926 -0.7925 -0.7924 -0.7923 -0.7922 -0.7921 [1081] -0.7920 -0.7919 -0.7918 -0.7917 -0.7916 -0.7915 -0.7914 -0.7913 [1089] -0.7912 -0.7911 -0.7910 -0.7909 -0.7908 -0.7907 -0.7906 -0.7905 [1097] -0.7904 -0.7903 -0.7902 -0.7901 -0.7900 -0.7899 -0.7898 -0.7897 [1105] -0.7896 -0.7895 -0.7894 -0.7893 -0.7892 -0.7891 -0.7890 -0.7889 [1113] -0.7888 -0.7887 -0.7886 -0.7885 -0.7884 -0.7883 -0.7882 -0.7881 [1121] -0.7880 -0.7879 -0.7878 -0.7877 -0.7876 -0.7875 -0.7874 -0.7873 [1129] -0.7872 -0.7871 -0.7870 -0.7869 -0.7868 -0.7867 -0.7866 -0.7865 [1137] -0.7864 -0.7863 -0.7862 -0.7861 -0.7860 -0.7859 -0.7858 -0.7857 [1145] -0.7856 -0.7855 -0.7854 -0.7853 -0.7852 -0.7851 -0.7850 -0.7849 [1153] -0.7848 -0.7847 -0.7846 -0.7845 -0.7844 -0.7843 -0.7842 -0.7841 [1161] -0.7840 -0.7839 -0.7838 -0.7837 -0.7836 -0.7835 -0.7834 -0.7833 [1169] -0.7832 -0.7831 -0.7830 -0.7829 -0.7828 -0.7827 -0.7826 -0.7825 [1177] -0.7824 -0.7823 -0.7822 -0.7821 -0.7820 -0.7819 -0.7818 -0.7817 [1185] -0.7816 -0.7815 -0.7814 -0.7813 -0.7812 -0.7811 -0.7810 -0.7809 [1193] -0.7808 -0.7807 -0.7806 -0.7805 -0.7804 -0.7803 -0.7802 -0.7801 [1201] -0.7800 -0.7799 -0.7798 -0.7797 -0.7796 -0.7795 -0.7794 -0.7793 [1209] -0.7792 -0.7791 -0.7790 -0.7789 -0.7788 -0.7787 -0.7786 -0.7785 [1217] -0.7784 -0.7783 -0.7782 -0.7781 -0.7780 -0.7779 -0.7778 -0.7777 [1225] -0.7776 -0.7775 -0.7774 -0.7773 -0.7772 -0.7771 -0.7770 -0.7769 [1233] -0.7768 -0.7767 -0.7766 -0.7765 -0.7764 -0.7763 -0.7762 -0.7761 [1241] -0.7760 -0.7759 -0.7758 -0.7757 -0.7756 -0.7755 -0.7754 -0.7753 [1249] -0.7752 -0.7751 -0.7750 -0.7749 -0.7748 -0.7747 -0.7746 -0.7745 [1257] -0.7744 -0.7743 -0.7742 -0.7741 -0.7740 -0.7739 -0.7738 -0.7737 [1265] -0.7736 -0.7735 -0.7734 -0.7733 -0.7732 -0.7731 -0.7730 -0.7729 [1273] -0.7728 -0.7727 -0.7726 -0.7725 -0.7724 -0.7723 -0.7722 -0.7721 [1281] -0.7720 -0.7719 -0.7718 -0.7717 -0.7716 -0.7715 -0.7714 -0.7713 [1289] -0.7712 -0.7711 -0.7710 -0.7709 -0.7708 -0.7707 -0.7706 -0.7705 [1297] -0.7704 -0.7703 -0.7702 -0.7701 -0.7700 -0.7699 -0.7698 -0.7697 [1305] -0.7696 -0.7695 -0.7694 -0.7693 -0.7692 -0.7691 -0.7690 -0.7689 [1313] -0.7688 -0.7687 -0.7686 -0.7685 -0.7684 -0.7683 -0.7682 -0.7681 [1321] -0.7680 -0.7679 -0.7678 -0.7677 -0.7676 -0.7675 -0.7674 -0.7673 [1329] -0.7672 -0.7671 -0.7670 -0.7669 -0.7668 -0.7667 -0.7666 -0.7665 [1337] -0.7664 -0.7663 -0.7662 -0.7661 -0.7660 -0.7659 -0.7658 -0.7657 [1345] -0.7656 -0.7655 -0.7654 -0.7653 -0.7652 -0.7651 -0.7650 -0.7649 [1353] -0.7648 -0.7647 -0.7646 -0.7645 -0.7644 -0.7643 -0.7642 -0.7641 [1361] -0.7640 -0.7639 -0.7638 -0.7637 -0.7636 -0.7635 -0.7634 -0.7633 [1369] -0.7632 -0.7631 -0.7630 -0.7629 -0.7628 -0.7627 -0.7626 -0.7625 [1377] -0.7624 -0.7623 -0.7622 -0.7621 -0.7620 -0.7619 -0.7618 -0.7617 [1385] -0.7616 -0.7615 -0.7614 -0.7613 -0.7612 -0.7611 -0.7610 -0.7609 [1393] -0.7608 -0.7607 -0.7606 -0.7605 -0.7604 -0.7603 -0.7602 -0.7601 [1401] -0.7600 -0.7599 -0.7598 -0.7597 -0.7596 -0.7595 -0.7594 -0.7593 [1409] -0.7592 -0.7591 -0.7590 -0.7589 -0.7588 -0.7587 -0.7586 -0.7585 [1417] -0.7584 -0.7583 -0.7582 -0.7581 -0.7580 -0.7579 -0.7578 -0.7577 [1425] -0.7576 -0.7575 -0.7574 -0.7573 -0.7572 -0.7571 -0.7570 -0.7569 [1433] -0.7568 -0.7567 -0.7566 -0.7565 -0.7564 -0.7563 -0.7562 -0.7561 [1441] -0.7560 -0.7559 -0.7558 -0.7557 -0.7556 -0.7555 -0.7554 -0.7553 [1449] -0.7552 -0.7551 -0.7550 -0.7549 -0.7548 -0.7547 -0.7546 -0.7545 [1457] -0.7544 -0.7543 -0.7542 -0.7541 -0.7540 -0.7539 -0.7538 -0.7537 [1465] -0.7536 -0.7535 -0.7534 -0.7533 -0.7532 -0.7531 -0.7530 -0.7529 [1473] -0.7528 -0.7527 -0.7526 -0.7525 -0.7524 -0.7523 -0.7522 -0.7521 [1481] -0.7520 -0.7519 -0.7518 -0.7517 -0.7516 -0.7515 -0.7514 -0.7513 [1489] -0.7512 -0.7511 -0.7510 -0.7509 -0.7508 -0.7507 -0.7506 -0.7505 [1497] -0.7504 -0.7503 -0.7502 -0.7501 -0.7500 -0.7499 -0.7498 -0.7497 [1505] -0.7496 -0.7495 -0.7494 -0.7493 -0.7492 -0.7491 -0.7490 -0.7489 [1513] -0.7488 -0.7487 -0.7486 -0.7485 -0.7484 -0.7483 -0.7482 -0.7481 [1521] -0.7480 -0.7479 -0.7478 -0.7477 -0.7476 -0.7475 -0.7474 -0.7473 [1529] -0.7472 -0.7471 -0.7470 -0.7469 -0.7468 -0.7467 -0.7466 -0.7465 [1537] -0.7464 -0.7463 -0.7462 -0.7461 -0.7460 -0.7459 -0.7458 -0.7457 [1545] -0.7456 -0.7455 -0.7454 -0.7453 -0.7452 -0.7451 -0.7450 -0.7449 [1553] -0.7448 -0.7447 -0.7446 -0.7445 -0.7444 -0.7443 -0.7442 -0.7441 [1561] -0.7440 -0.7439 -0.7438 -0.7437 -0.7436 -0.7435 -0.7434 -0.7433 [1569] -0.7432 -0.7431 -0.7430 -0.7429 -0.7428 -0.7427 -0.7426 -0.7425 [1577] -0.7424 -0.7423 -0.7422 -0.7421 -0.7420 -0.7419 -0.7418 -0.7417 [1585] -0.7416 -0.7415 -0.7414 -0.7413 -0.7412 -0.7411 -0.7410 -0.7409 [1593] -0.7408 -0.7407 -0.7406 -0.7405 -0.7404 -0.7403 -0.7402 -0.7401 [1601] -0.7400 -0.7399 -0.7398 -0.7397 -0.7396 -0.7395 -0.7394 -0.7393 [1609] -0.7392 -0.7391 -0.7390 -0.7389 -0.7388 -0.7387 -0.7386 -0.7385 [1617] -0.7384 -0.7383 -0.7382 -0.7381 -0.7380 -0.7379 -0.7378 -0.7377 [1625] -0.7376 -0.7375 -0.7374 -0.7373 -0.7372 -0.7371 -0.7370 -0.7369 [1633] -0.7368 -0.7367 -0.7366 -0.7365 -0.7364 -0.7363 -0.7362 -0.7361 [1641] -0.7360 -0.7359 -0.7358 -0.7357 -0.7356 -0.7355 -0.7354 -0.7353 [1649] -0.7352 -0.7351 -0.7350 -0.7349 -0.7348 -0.7347 -0.7346 -0.7345 [1657] -0.7344 -0.7343 -0.7342 -0.7341 -0.7340 -0.7339 -0.7338 -0.7337 [1665] -0.7336 -0.7335 -0.7334 -0.7333 -0.7332 -0.7331 -0.7330 -0.7329 [1673] -0.7328 -0.7327 -0.7326 -0.7325 -0.7324 -0.7323 -0.7322 -0.7321 [1681] -0.7320 -0.7319 -0.7318 -0.7317 -0.7316 -0.7315 -0.7314 -0.7313 [1689] -0.7312 -0.7311 -0.7310 -0.7309 -0.7308 -0.7307 -0.7306 -0.7305 [1697] -0.7304 -0.7303 -0.7302 -0.7301 -0.7300 -0.7299 -0.7298 -0.7297 [1705] -0.7296 -0.7295 -0.7294 -0.7293 -0.7292 -0.7291 -0.7290 -0.7289 [1713] -0.7288 -0.7287 -0.7286 -0.7285 -0.7284 -0.7283 -0.7282 -0.7281 [1721] -0.7280 -0.7279 -0.7278 -0.7277 -0.7276 -0.7275 -0.7274 -0.7273 [1729] -0.7272 -0.7271 -0.7270 -0.7269 -0.7268 -0.7267 -0.7266 -0.7265 [1737] -0.7264 -0.7263 -0.7262 -0.7261 -0.7260 -0.7259 -0.7258 -0.7257 [1745] -0.7256 -0.7255 -0.7254 -0.7253 -0.7252 -0.7251 -0.7250 -0.7249 [1753] -0.7248 -0.7247 -0.7246 -0.7245 -0.7244 -0.7243 -0.7242 -0.7241 [1761] -0.7240 -0.7239 -0.7238 -0.7237 -0.7236 -0.7235 -0.7234 -0.7233 [1769] -0.7232 -0.7231 -0.7230 -0.7229 -0.7228 -0.7227 -0.7226 -0.7225 [1777] -0.7224 -0.7223 -0.7222 -0.7221 -0.7220 -0.7219 -0.7218 -0.7217 [1785] -0.7216 -0.7215 -0.7214 -0.7213 -0.7212 -0.7211 -0.7210 -0.7209 [1793] -0.7208 -0.7207 -0.7206 -0.7205 -0.7204 -0.7203 -0.7202 -0.7201 [1801] -0.7200 -0.7199 -0.7198 -0.7197 -0.7196 -0.7195 -0.7194 -0.7193 [1809] -0.7192 -0.7191 -0.7190 -0.7189 -0.7188 -0.7187 -0.7186 -0.7185 [1817] -0.7184 -0.7183 -0.7182 -0.7181 -0.7180 -0.7179 -0.7178 -0.7177 [1825] -0.7176 -0.7175 -0.7174 -0.7173 -0.7172 -0.7171 -0.7170 -0.7169 [1833] -0.7168 -0.7167 -0.7166 -0.7165 -0.7164 -0.7163 -0.7162 -0.7161 [1841] -0.7160 -0.7159 -0.7158 -0.7157 -0.7156 -0.7155 -0.7154 -0.7153 [1849] -0.7152 -0.7151 -0.7150 -0.7149 -0.7148 -0.7147 -0.7146 -0.7145 [1857] -0.7144 -0.7143 -0.7142 -0.7141 -0.7140 -0.7139 -0.7138 -0.7137 [1865] -0.7136 -0.7135 -0.7134 -0.7133 -0.7132 -0.7131 -0.7130 -0.7129 [1873] -0.7128 -0.7127 -0.7126 -0.7125 -0.7124 -0.7123 -0.7122 -0.7121 [1881] -0.7120 -0.7119 -0.7118 -0.7117 -0.7116 -0.7115 -0.7114 -0.7113 [1889] -0.7112 -0.7111 -0.7110 -0.7109 -0.7108 -0.7107 -0.7106 -0.7105 [1897] -0.7104 -0.7103 -0.7102 -0.7101 -0.7100 -0.7099 -0.7098 -0.7097 [1905] -0.7096 -0.7095 -0.7094 -0.7093 -0.7092 -0.7091 -0.7090 -0.7089 [1913] -0.7088 -0.7087 -0.7086 -0.7085 -0.7084 -0.7083 -0.7082 -0.7081 [1921] -0.7080 -0.7079 -0.7078 -0.7077 -0.7076 -0.7075 -0.7074 -0.7073 [1929] -0.7072 -0.7071 -0.7070 -0.7069 -0.7068 -0.7067 -0.7066 -0.7065 [1937] -0.7064 -0.7063 -0.7062 -0.7061 -0.7060 -0.7059 -0.7058 -0.7057 [1945] -0.7056 -0.7055 -0.7054 -0.7053 -0.7052 -0.7051 -0.7050 -0.7049 [1953] -0.7048 -0.7047 -0.7046 -0.7045 -0.7044 -0.7043 -0.7042 -0.7041 [1961] -0.7040 -0.7039 -0.7038 -0.7037 -0.7036 -0.7035 -0.7034 -0.7033 [1969] -0.7032 -0.7031 -0.7030 -0.7029 -0.7028 -0.7027 -0.7026 -0.7025 [1977] -0.7024 -0.7023 -0.7022 -0.7021 -0.7020 -0.7019 -0.7018 -0.7017 [1985] -0.7016 -0.7015 -0.7014 -0.7013 -0.7012 -0.7011 -0.7010 -0.7009 [1993] -0.7008 -0.7007 -0.7006 -0.7005 -0.7004 -0.7003 -0.7002 -0.7001 [2001] -0.7000 . print((1:20)[a&gt;12]) . [1] 8 10 19 . 조건을 만족하는 $k$의 최솟값은 $8$ | . 1. 2005년 대학수학능력시험 6월 모의평가 수리영역(나형) 4번↩ . 2. 2021년 대학수학능력시험 9월 모의평가 수학영역(가형) 10번↩ .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/17/R%EC%9E%85%EB%AC%B8-3%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/17/R%EC%9E%85%EB%AC%B8-3%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 17, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "시계열그래프를 그리는 방법",
            "content": "&#45936;&#51060;&#53552;&#51032; &#51333;&#47448; . 데이터를 시계열자료, 횡단면자료, 패널자료로 구분한다. . &#49884;&#44228;&#50676;&#51088;&#47308; . 시간의 변화에 따라 얻는 자료를 시계열자료(time-series data) 라고 한다. . 예를 들어 연도별 이자율, 월별 평균 온도, 매 4년마다 우리나라 올림픽 메달 수는 시계열자료이다. . &#54945;&#45800;&#47732;&#51088;&#47308; . 동시간 대에 얻는 자료를 횡단면자료(cross-sectional data) 라고 한다. . 예를 들어 은행별 이자율, 도시별 온도, 역대 올림픽에서 금메달을 획득한 종목은 횡단면자료이다. . &#54056;&#45328;&#51088;&#47308; . 횡단면자료가 시간에 따라 나열되어 있는 것이 패널자료(panel data) 이다. . 예를 들어 아파트 가격이 지역별, 연도별로 되어 있으면 패널자료이다. . R&#50640;&#49436; &#49884;&#44228;&#50676; &#44536;&#47000;&#54532; &#44536;&#47532;&#44592; . R 함수와 그래프 그리는 방법 소개 . stocks &lt;- scan(&quot;istat_data SamsungElectronicsStocks.txt&quot;) times &lt;- c(1:length(stocks)) . print(head(times)) . [1] 1 2 3 4 5 6 . head 함수는 처음 6개의 데이터를 출력하는 함수이다. . print(seq(1, 10, 3)) . [1] 1 4 7 10 . print(seq(from = 1, to = 10, by = 3)) . [1] 1 4 7 10 . seq(a, b, c) 또는 seq(from = a, to = b, by = c) 를 사용하면 숫자 a 부터 b 까지 간격이 c인 수열을 생성한다. . ts.plot &#54632;&#49688;&#47484; &#51060;&#50857;&#54620;&#45796;. . ts.plot(stocks, main = &quot;삼성전자 주가&quot;) . &#51068;&#48152; plot &#54632;&#49688;&#50640; &#50741;&#49496; type = &quot;l&quot; &#51012; &#52628;&#44032;&#54620;&#45796;. . plot(times, stocks, main = &quot;삼성전자 주가&quot;) . par(mfcol = c(2,1)) plot(times, stocks) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20statistics/2021/09/13/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8-1%EC%9E%A5.html",
            "relUrl": "/introduction%20to%20statistics/2021/09/13/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8-1%EC%9E%A5.html",
            "date": " • Sep 13, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "R - 변수, 벡터, 함수",
            "content": "&#48320;&#49688;&#50640; &#50612;&#46496;&#54620; &#44050;&#51012; &#45347;&#45716; &#48169;&#48277; . &#48169;&#48277;1 : = &#51060;&#50857; . a = 1 . print(a) . [1] 1 . &#48169;&#48277;2 : &lt;-&#51060;&#50857; . b &lt;- 3 . print(b) . [1] 3 . &#48320;&#49688; &#51060;&#47492;&#51012; &#49444;&#51221;&#54624; &#46412; &#51452;&#51032;&#54624; &#51216; . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196;&#47564; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . 444 &lt;- 5 . Error in 444 &lt;- 5: 대입에 유효하지 않은 (do_set) 좌변입니다 Traceback: . - &#48320;&#49688; &#51060;&#47492;&#51008; &#53945;&#49688;&#47928;&#51088;&#47196; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . ^^@ &lt; - 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예기치 않은 &#39;^&#39;입니다 1: ^ ^ Traceback: . - &#48320;&#49688; &#51060;&#47492;&#50640; &#46916;&#50612;&#50416;&#44592;&#47484; &#49324;&#50857;&#54624; &#49688; &#50630;&#45796;. . Kim Jeewoo &lt;- 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:5: 예상하지 못한 기호(symbol)입니다. 1: Kim Jeewoo ^ Traceback: . - &#46916;&#50612;&#50416;&#44592; &#45824;&#49888; &#50616;&#45908;&#48148;(_)&#47484; &#49324;&#50857;&#54616;&#45716; &#44163;&#51008; &#44032;&#45733;&#54616;&#45796;. . - &#45800;, &#48320;&#49688; &#51060;&#47492;&#51012; &#50616;&#45908;&#48148;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . Kim_Jeewoo &lt;- 4 Kim.Jeewoo &lt;- 5 . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . 1a &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 1a ^ Traceback: . - &#51060;&#44148; &#44032;&#45733;&#54616;&#45796; . a1 &lt;- 3 . &#44032;&#45733;&#51008; &#54616;&#45208; &#44428;&#51109;&#54616;&#51648; &#50506;&#45716; &#48320;&#49688; &#51060;&#47492; . print(pi) . [1] 3.141593 . pi&lt;-333 . print(pi) . [1] 333 . 원래 내장된 $ pi$가 날아가버렸다... . &#48320;&#49688; &#49373;&#49457;&#49884; &#54017; . - &#48320;&#49688;&#47484; &#52629;&#50557;&#54624; &#46412; &#47784;&#51020;&#51012; &#51228;&#50808;&#54616;&#47732; &#51339;&#45796;. . result -&gt; rslt | residual -&gt; rsdl | . - &#51076;&#49884;&#47196; &#48320;&#49688;&#47749;&#51012; &#49324;&#50857;&#54644;&#50556; &#54624; &#44221;&#50864; &#48320;&#49688; &#51060;&#47492; &#45149;&#50640; &#50616;&#45908;&#48148;&#47484; &#48537;&#51064;&#45796;. . x, y, rslt_, rsdl | . &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . &#48169;&#48277;1 - &#51649;&#51217; &#51077;&#47141; . v1 &lt;- c(1, 2, 3, 3, 4, 5, 2) . print(v1) . [1] 1 2 3 3 4 5 2 . &#48169;&#48277;2 - seq&#47484; &#51060;&#50857; . ?sqe #실행하면 sqe의 사용법에 대해 알려준다. . v2 &lt;- seq(from=0, to=10, by=0.1) #0부터 10까지 0.1 단위로 벡터 생성! . print(v2) . [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 [16] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 [31] 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 [46] 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 [61] 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 [76] 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 [91] 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . print(seq(from=0, to=1, length.out = 57)) #0부터 1까지 10등분 . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . &#48169;&#48277;3 - : &#51060;&#50857; . print(0:56) . [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 [51] 50 51 52 53 54 55 56 . print(0:56 / 56) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . &#48169;&#48277;4 - rep &#51060;&#50857; . print(rep(0,22)) #0을 22번 반복 . [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . print(rep(4,12)) #4를 12번 반복 . [1] 4 4 4 4 4 4 4 4 4 4 4 4 . print(rep(5, 77)) . [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 [39] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 [77] 5 . &#54632;&#49688;&#47484; &#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . - &#44592;&#48376; &#44396;&#51312; . 함수 이름 &lt;- function(입력){ 함수의 기능 return 출력 } . - &#50696;&#49884; . f &lt;- function(d){ y=2^(-0.25*d) return(y) } . f(8) . 0.25 - return&#51012; &#49373;&#47029;&#54644;&#46020; &#44316;&#52270;&#45796;. . g &lt;- function(d){ y=2^(-0.25*d) y } . g(8) . 0.25 &#48289;&#53552;&#51032; &#50896;&#49548;&#47484; &#48977;&#45716; &#48169;&#48277; . x &lt;- c(1,2,-2,4,5,-5,6) print(x) . [1] 1 2 -2 4 5 -5 6 . &#50896;&#49548;&#51032; &#48264;&#54840;&#47484; &#48520;&#47084;&#49436; &#48977;&#45716; &#48169;&#48277; . - &#52395;&#48264;&#51704; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . 파이썬과 다르게 인덱싱은 1부터 시작한다. . print(x[1]) . [1] 1 . - &#46160;&#48264;&#51704; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[3]) . [1] -2 . - &#52395;&#48264;&#51704;&#48512;&#53552; &#49464;&#48264;&#51704;&#44620;&#51648;&#51032; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[1:3]) . [1] 1 2 -2 . print(x[c(1,2,3)]) . [1] 1 2 -2 . - 2, 5, 6 &#48264;&#51704;&#51032; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[c(2, 5, 6)]) . [1] 2 5 -5 . - 3&#48264;&#51704; &#50896;&#49548;&#47484; &#51228;&#50808;&#54616;&#44256; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . print(x[-3]) . [1] 1 2 4 5 -5 6 . - 3, 4&#48264;&#51704;&#51032; &#50896;&#49548;&#47484; &#51228;&#50808;&#54616;&#44256; &#48977;&#44256;&#49910;&#45796;. . print(x[-c(3,4)]) . [1] 1 2 5 -5 6 . print(x[-(3:4)]) . [1] 1 2 5 -5 6 . &#50612;&#46496;&#54620; &#51312;&#44148;&#51012; &#51452;&#44256;, &#44536; &#51312;&#44148;&#50640; &#47564;&#51313;&#54616;&#45716; &#50896;&#49548; (&#54841;&#51008; &#47564;&#51313;&#54616;&#51648; &#50506;&#45716; &#50896;&#49548;)&#47484; &#48977;&#45716; &#48169;&#48277; . - &#50577;&#49688;&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . (1) 양수인지 스스로 판단 . (2) 양수라면 나간다. . print(x&gt;0) . [1] TRUE TRUE FALSE TRUE TRUE FALSE TRUE . x&gt;0의 결과는 TRUE, FALSE가 포함된 벡터 . print(x[x&gt;0]) . [1] 1 2 4 5 6 . - 3&#51060;&#49345;&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x&gt;3) . [1] FALSE FALSE FALSE TRUE TRUE FALSE TRUE . print(x[x&gt;3]) . [1] 4 5 6 . - TRUE &#46308;&#50668;&#45796;&#48372;&#44592; . print(x) . [1] 1 2 -2 4 5 -5 6 . array_ = c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE) . print(array_) . [1] TRUE FALSE TRUE FALSE FALSE FALSE FALSE . print(x[array_]) . [1] 1 -2 . - &#44050;&#51060; -2&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . print(x[x == -2]) . [1] -2 . - &#51025;&#50857;&#50696;&#51228; 1 . x &lt;- c(1,2,3,4,5) y &lt;- x^2 . print(x) . [1] 1 2 3 4 5 . print(y) . [1] 1 4 9 16 25 . $y=9$가 되도록 하는 $x$를 구하고싶다. | . print(x[y == 9]) . [1] 3 . - &#51025;&#50857;&#50696;&#51228; 2 - &#54980;&#49696; . 후술 | . &#44536;&#47548;&#51012; &#44536;&#47532;&#45716; &#48277; . x &lt;- 1:60/10 print(x) . [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [20] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 [39] 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 [58] 5.8 5.9 6.0 . y &lt;- sin(x) y . &lt;ol class=list-inline&gt;0.0998334166468282 | 0.198669330795061 | 0.29552020666134 | 0.389418342308651 | 0.479425538604203 | 0.564642473395035 | 0.644217687237691 | 0.717356090899523 | 0.783326909627483 | 0.841470984807897 | 0.891207360061435 | 0.932039085967226 | 0.963558185417193 | 0.98544972998846 | 0.997494986604054 | 0.999573603041505 | 0.991664810452469 | 0.973847630878195 | 0.946300087687414 | 0.909297426825682 | 0.863209366648874 | 0.80849640381959 | 0.74570521217672 | 0.675463180551151 | 0.598472144103957 | 0.515501371821464 | 0.42737988023383 | 0.334988150155905 | 0.239249329213982 | 0.141120008059867 | 0.0415806624332905 | -0.0583741434275801 | -0.157745694143248 | -0.255541102026831 | -0.35078322768962 | -0.442520443294852 | -0.529836140908493 | -0.611857890942719 | -0.687766159183974 | -0.756802495307928 | -0.81827711106441 | -0.871575772413588 | -0.916165936749455 | -0.951602073889516 | -0.977530117665097 | -0.993691003633464 | -0.999923257564101 | -0.996164608835841 | -0.982452612624332 | -0.958924274663138 | -0.925814682327732 | -0.883454655720153 | -0.832267442223901 | -0.772764487555987 | -0.705540325570392 | -0.631266637872322 | -0.550685542597638 | -0.464602179413757 | -0.373876664830236 | -0.279415498198926 | &lt;/ol&gt; plot(x, y) . plot(x, y^2) . plot(x,y) lines(x, y^2) . plot(x, y) points(x, y^2) . plot(x, y, type=&#39;l&#39;) lines(x, y^2) . plot(x, y, type =&#39;l&#39;, col=&#39;blue&#39;) lines(x, y^2, type = &#39;p&#39;, col = &#39;#ADD826&#39;) lines(x, y^6 - y^3, col = &#39;lightblue&#39;) . &#51452;&#51032;&#54624; &#51216; . - 그림 자체를 생성 해주는 plot과 같은 명령이 있고, 생성된 그림에 덧붙여서만 그릴 수 있는 lines, points, abline과 같은 기생함수가 있다. . - 기생함수는 단독으로 쓸 수 없다. . lines(x,y) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y) 2. lines.default(x, y) 3. plot.xy(xy.coords(x, y), type = type, ...) . lines(x,y) ploat(x,y) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y) 2. lines.default(x, y) 3. plot.xy(xy.coords(x, y), type = type, ...) . &#51452;&#49437; &#51060;&#50857; &#48169;&#48277; . - &#51452;&#49437;&#51008; &#49892;&#54665;&#54616;&#51648; &#50506;&#45716; &#47928;&#51109;&#51060;&#45796;. . a &lt;- 1 a &lt;- a+1 a &lt;- a+1 print(a) . [1] 3 . a &lt;- 1 #a &lt;- a+1 a &lt;- a+1 print(a) . [1] 2 . - &#50780; &#50416;&#45716;&#44032;? . (1) 코드를 나눠서 테스트 할 때 . (2) 코드에 대한 설명이나 메모를 쓰고 싶을 때 . - &#44284;&#51228; . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 . plot(x, y) #할당된 점만 표시 . plot(x, y, type = &#39;l&#39;) #할당된 점을 선으로 이어서 표시 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "R - 소개",
            "content": "What is R? . R is a language and environment for statistical computing and graphics. | . R은 좋은 계산기이다. | . Problem 1 . Solution I . $I_d = I_0 2^{-0.25d}$ . $ cfrac{I_d}{I_0} = 0.25 = 2^{-2} = 2^{-0.25d}$ . $-2 = -0.25d$ . $d = 8m$ . . 갑 : 음.. 근데 8m 말고 11m일 때랑 7m일 때의 비율도 계산해줘 . 갑 : 아 아니다 그냥 1m부터 40m까지 다 구해줘!! . 을 : ?? (일일이 대입하면 너무 힘든데... 어쩌지?) . . Solution II . $d$를 입력하면 $ cfrac{I_d}{I_0}$가 계산되는 아래와 같은 함수를 만들고 싶다. . $ cfrac{I_d}{I_0}=y=f(d)=2^{-0.25d}$ . f &lt;- function(d){ y=2^(-0.25*d) y } . print(f(8)) . [1] 0.25 . print(f(11)) . [1] 0.1486509 . print(f(7)) . [1] 0.2973018 . for(d in 1:40){ print(f(d)) } . [1] 0.8408964 [1] 0.7071068 [1] 0.5946036 [1] 0.5 [1] 0.4204482 [1] 0.3535534 [1] 0.2973018 [1] 0.25 [1] 0.2102241 [1] 0.1767767 [1] 0.1486509 [1] 0.125 [1] 0.1051121 [1] 0.08838835 [1] 0.07432544 [1] 0.0625 [1] 0.05255603 [1] 0.04419417 [1] 0.03716272 [1] 0.03125 [1] 0.02627801 [1] 0.02209709 [1] 0.01858136 [1] 0.015625 [1] 0.01313901 [1] 0.01104854 [1] 0.009290681 [1] 0.0078125 [1] 0.006569503 [1] 0.005524272 [1] 0.00464534 [1] 0.00390625 [1] 0.003284752 [1] 0.002762136 [1] 0.00232267 [1] 0.001953125 [1] 0.001642376 [1] 0.001381068 [1] 0.001161335 [1] 0.0009765625 . 엄청 편하다.. . Solution III . $y=f(d)$의 그래프를 구하고 싶다. . d &lt;- seq(from = 0, to = 10, by = 0.01) y &lt;- 2^(-0.25*d) plot(d, y, type = &quot;l&quot;, lwd = 5) abline(h = 0.25, col=2, lwd=5, lty = 1) #col = 색, lwd = 굵기, lty = 점선 #h = 수평선, v = 수직선 . 1. 2005 예비평가(나) 12월/평가원26(고3)↩ .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stahangryum.github.io/stahangryum/jupyter/2020/02/20/t12est.html",
            "relUrl": "/jupyter/2020/02/20/t12est.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stahangryum.github.io/stahangryum/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Department of Statistcis, Jeonbuk National University, South Korea(2021.03 ~) . Contact . Email : stahangryum@gmail.com | .",
          "url": "https://stahangryum.github.io/stahangryum/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stahangryum.github.io/stahangryum/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}