{
  
    
        "post0": {
            "title": "Title",
            "content": "options(repr.plot.res=200) options(tibble.width = Inf) # displays all columns. options(tibble.print_max = 500) # to show all the rows. . library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . options(repr.tibble.max.cols=Inf, repr.matrix.max.rows=100) . R | . simulate_starforce &lt;- function(L, N){ # l은 장비의 레벨 제한, N은 목표 레벨 cost = rep(NA,25) sccss_prob = rep(NA, 25) dstry_prob = rep(NA, 25) for (i in 1:25){ # i : 목표 레벨 S = i - 1 # S : 현재 레벨 # 강화 비용 지정 if (S &lt;=9) cost[i] = 1000 + L**3 *(S+1)/25 else if (S &lt;=14) cost[i] = 1000 + L**3 *(S+1)**2.7 /400 else if (S &lt;=24) cost[i] = 1000 + L**3 *(S+1)**2.7 /200 # 성공 확률 지정 if (S &lt;= 2) sccss_prob[i] = (95-5*S)/100 else if (S &lt;= 14) sccss_prob[i] = (100 - 5*S)/100 else if (S &lt;= 21) sccss_prob[i] = (30)/100 else if (S == 22) sccss_prob[i] = (3)/100 else if (S == 23) sccss_prob[i] = (2)/100 else if (S == 24) sccss_prob[i] = (1)/100 } cost = round(cost, -2) # 파괴 확률 지정 dstry_prob = c(rep(0, 12), 0.6, 1.3, 1.4, 2.1, 2.1, 2.1, 2.8, 2.8, 7.0, 7.0, 19.4, 29.4, 39.6)/100 # 실패 확률 지정 (파괴X) fail_prob = 1-(sccss_prob + dstry_prob) S = 0 # 현재 레벨 ss_cost = 0 # 비용 합계 while (S != N){ ss_cost = ss_cost + cost[S+1] stt = sample(c(&#39;T&#39;, &#39;F&#39;, &#39;D&#39;), 1, prob = c(sccss_prob[S+1], fail_prob[S+1], dstry_prob[S+1])) if (stt == &quot;T&quot;){ S = S + 1 } else if (stt == &quot;F&quot;){ if ((!(S%%5 == 0))&amp;S&gt;=6) S = S-1 } else if (stt == &quot;D&quot;){ return(list(L, N, ss_cost, &quot;dst&quot;)) break } } return(list(L, N, ss_cost, &quot;scc&quot;)) } . rslt = matrix(rep(NA, 500*4), ncol = 4) rslt = as_tibble(rslt) colnames(rslt) = c(&quot;limit&quot;, &quot;target&quot;, &quot;meso&quot;, &quot;result&quot;) for (i in 1:500){ rslt[i,] = simulate_starforce(200, 22) } . Warning message: &#34;The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. Using compatibility `.name_repair`. This warning is displayed once every 8 hours. Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.&#34; . ##options(tibble.print_max = Inf) # to show all the rows. print(tbl_df(rslt), n=500) . # A tibble: 500 x 4 limit target meso result &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 200 22 819548100 dst 2 200 22 6406910200 dst 3 200 22 3054291100 dst 4 200 22 734846100 dst 5 200 22 5641519700 dst 6 200 22 3706503800 dst 7 200 22 3160902900 dst 8 200 22 258692700 dst 9 200 22 2761502800 dst 10 200 22 3021910500 dst 11 200 22 7195895500 dst 12 200 22 1061266900 dst 13 200 22 3842152200 scc 14 200 22 1045733100 dst 15 200 22 4224061600 dst 16 200 22 513520800 dst 17 200 22 426041500 dst 18 200 22 2744729900 dst 19 200 22 2167050200 dst 20 200 22 1365574600 dst 21 200 22 2233829500 scc 22 200 22 620733900 dst 23 200 22 25754849100 dst 24 200 22 2431156300 dst 25 200 22 4729183000 dst 26 200 22 2390134900 dst 27 200 22 4303052800 dst 28 200 22 5758746300 dst 29 200 22 1462468300 dst 30 200 22 665641900 dst 31 200 22 1087304500 dst 32 200 22 1648525700 dst 33 200 22 8952069300 scc 34 200 22 6048505500 dst 35 200 22 1573047500 dst 36 200 22 1533145800 dst 37 200 22 3804210000 dst 38 200 22 2779186200 scc 39 200 22 29313769200 dst 40 200 22 809814200 dst 41 200 22 2281703900 dst 42 200 22 5238280600 dst 43 200 22 4551458000 dst 44 200 22 3857108700 dst 45 200 22 299707700 dst 46 200 22 6964772700 dst 47 200 22 778283200 dst 48 200 22 1669524400 dst 49 200 22 1536135800 dst 50 200 22 3158702200 dst 51 200 22 6643098000 dst 52 200 22 1608567100 dst 53 200 22 2655682200 dst 54 200 22 3219077700 dst 55 200 22 835912100 dst 56 200 22 7422233800 dst 57 200 22 5304730800 dst 58 200 22 8953281700 dst 59 200 22 2686027900 dst 60 200 22 397104100 dst 61 200 22 1018789300 dst 62 200 22 5236325800 dst 63 200 22 609296200 dst 64 200 22 4263362400 dst 65 200 22 7818906900 dst 66 200 22 5100562000 dst 67 200 22 3690412100 dst 68 200 22 1318150600 dst 69 200 22 2578862600 dst 70 200 22 5564331100 dst 71 200 22 4242583500 dst 72 200 22 2819740100 dst 73 200 22 3069862900 dst 74 200 22 7758127700 dst 75 200 22 6994787100 dst 76 200 22 2799902000 dst 77 200 22 166550800 dst 78 200 22 266046200 dst 79 200 22 1248395000 dst 80 200 22 5054242900 dst 81 200 22 1606736700 dst 82 200 22 3347633500 dst 83 200 22 3606016000 dst 84 200 22 1557550500 dst 85 200 22 9017925800 scc 86 200 22 468134400 dst 87 200 22 2236839000 dst 88 200 22 1447614100 dst 89 200 22 3905091400 dst 90 200 22 3597029200 dst 91 200 22 746372200 dst 92 200 22 279201400 dst 93 200 22 772799500 dst 94 200 22 3503513500 dst 95 200 22 2496544200 dst 96 200 22 5205986200 dst 97 200 22 4616250500 dst 98 200 22 4846481500 dst 99 200 22 6771971100 dst 100 200 22 3976667100 dst 101 200 22 5946504500 dst 102 200 22 3676979100 dst 103 200 22 3781926000 dst 104 200 22 4844329700 dst 105 200 22 4035176200 dst 106 200 22 1113768000 dst 107 200 22 9646203700 dst 108 200 22 2070318900 dst 109 200 22 15267186400 dst 110 200 22 3650660500 dst 111 200 22 1106293600 dst 112 200 22 7228455900 dst 113 200 22 4252227600 scc 114 200 22 3072880400 dst 115 200 22 8757868100 scc 116 200 22 7153875300 dst 117 200 22 6159759600 dst 118 200 22 25583290600 dst 119 200 22 1844157900 dst 120 200 22 5595450400 dst 121 200 22 3131925900 dst 122 200 22 2760842500 dst 123 200 22 5340687200 dst 124 200 22 2261168700 dst 125 200 22 683223500 dst 126 200 22 6993102800 dst 127 200 22 8431497700 scc 128 200 22 6426847600 dst 129 200 22 3123189400 dst 130 200 22 9802497700 dst 131 200 22 201652400 dst 132 200 22 4756863300 dst 133 200 22 1256170200 dst 134 200 22 1269120000 dst 135 200 22 866365200 dst 136 200 22 2136854500 dst 137 200 22 5118482400 dst 138 200 22 8790408500 dst 139 200 22 5992929000 dst 140 200 22 2971053700 dst 141 200 22 1881535100 dst 142 200 22 4129587200 dst 143 200 22 1703829400 dst 144 200 22 2635311900 dst 145 200 22 1721384300 dst 146 200 22 598199200 dst 147 200 22 1433899800 dst 148 200 22 6276617200 dst 149 200 22 3800454400 dst 150 200 22 1606686100 dst 151 200 22 1132963200 dst 152 200 22 543542500 dst 153 200 22 11898226200 dst 154 200 22 2672716000 dst 155 200 22 3400378500 dst 156 200 22 3938617300 dst 157 200 22 3967041900 dst 158 200 22 3590233200 dst 159 200 22 10530496300 dst 160 200 22 5069166700 dst 161 200 22 1125072700 dst 162 200 22 11942296800 dst 163 200 22 2961922900 dst 164 200 22 4426798500 dst 165 200 22 2776554400 dst 166 200 22 790448300 dst 167 200 22 2886973500 dst 168 200 22 7875458800 dst 169 200 22 3480288800 dst 170 200 22 1026852400 dst 171 200 22 4044380800 dst 172 200 22 1788315700 dst 173 200 22 4350158000 dst 174 200 22 520168900 dst 175 200 22 1857285100 dst 176 200 22 2240228600 dst 177 200 22 10686829900 dst 178 200 22 5183647900 dst 179 200 22 4243990800 dst 180 200 22 7031611300 dst 181 200 22 4020665500 dst 182 200 22 3911128900 dst 183 200 22 270702000 dst 184 200 22 2790656700 dst 185 200 22 341687800 dst 186 200 22 3357351500 dst 187 200 22 1488538500 dst 188 200 22 7506700100 dst 189 200 22 365393100 dst 190 200 22 391970300 dst 191 200 22 2477930400 dst 192 200 22 324794800 dst 193 200 22 3269665100 dst 194 200 22 5069939900 scc 195 200 22 117356500 dst 196 200 22 8579476200 dst 197 200 22 4012959600 dst 198 200 22 4164090800 dst 199 200 22 2219991300 dst 200 200 22 263974200 dst 201 200 22 7447958700 dst 202 200 22 3445627900 dst 203 200 22 1875246700 dst 204 200 22 1754861100 dst 205 200 22 12997805600 dst 206 200 22 1716452900 dst 207 200 22 308563600 dst 208 200 22 525391100 dst 209 200 22 289277400 dst 210 200 22 1296228100 dst 211 200 22 1650243900 dst 212 200 22 938474200 dst 213 200 22 4917062400 dst 214 200 22 3908708600 dst 215 200 22 677970500 dst 216 200 22 6109035900 dst 217 200 22 6312694800 dst 218 200 22 5322234200 dst 219 200 22 3350017000 dst 220 200 22 2004579100 dst 221 200 22 3007308200 dst 222 200 22 1399981100 dst 223 200 22 3724745200 dst 224 200 22 5120648200 dst 225 200 22 2071115600 dst 226 200 22 6155858800 dst 227 200 22 7556332100 dst 228 200 22 2946493100 dst 229 200 22 374314000 dst 230 200 22 3643056200 dst 231 200 22 2171999600 dst 232 200 22 5504483100 dst 233 200 22 395639300 dst 234 200 22 972486100 dst 235 200 22 2021617700 dst 236 200 22 2205660700 dst 237 200 22 1782924200 dst 238 200 22 2590515400 dst 239 200 22 276545600 dst 240 200 22 2532367100 dst 241 200 22 1045503500 dst 242 200 22 6138454000 dst 243 200 22 2285855500 dst 244 200 22 10616449700 dst 245 200 22 4043599000 dst 246 200 22 1910588300 dst 247 200 22 2855387600 dst 248 200 22 1703002400 dst 249 200 22 2131995200 dst 250 200 22 4336860800 dst 251 200 22 3518771100 dst 252 200 22 2895021400 dst 253 200 22 3218438800 dst 254 200 22 7349470300 dst 255 200 22 2943607500 dst 256 200 22 1898004500 dst 257 200 22 1017343500 dst 258 200 22 3064479500 dst 259 200 22 1764567900 dst 260 200 22 4821479000 dst 261 200 22 3347320600 dst 262 200 22 605926900 dst 263 200 22 2517702200 dst 264 200 22 978161800 dst 265 200 22 2289585100 dst 266 200 22 1784983000 dst 267 200 22 8923834600 dst 268 200 22 3129330600 dst 269 200 22 1162079700 dst 270 200 22 8490034600 dst 271 200 22 3544955100 dst 272 200 22 1585223600 dst 273 200 22 898670700 dst 274 200 22 3212591400 dst 275 200 22 8883129700 dst 276 200 22 2027710000 dst 277 200 22 551279400 dst 278 200 22 1186129100 dst 279 200 22 1889295600 dst 280 200 22 4469035700 dst 281 200 22 223196800 dst 282 200 22 2956568400 dst 283 200 22 1064259700 dst 284 200 22 13126624400 dst 285 200 22 2184286400 dst 286 200 22 3473220800 dst 287 200 22 8639987300 dst 288 200 22 2806123400 dst 289 200 22 2461498200 dst 290 200 22 1392177000 dst 291 200 22 3945603200 dst 292 200 22 854105900 dst 293 200 22 3241935200 dst 294 200 22 2797401100 dst 295 200 22 774790900 dst 296 200 22 4250495600 dst 297 200 22 2807943900 scc 298 200 22 221708400 dst 299 200 22 10199969200 dst 300 200 22 7418092300 dst 301 200 22 4043946800 dst 302 200 22 11600855000 dst 303 200 22 990022800 dst 304 200 22 1058703400 dst 305 200 22 6337193200 dst 306 200 22 6957453000 dst 307 200 22 9528790800 scc 308 200 22 6000685200 dst 309 200 22 5808604300 dst 310 200 22 3006447900 dst 311 200 22 1927694100 dst 312 200 22 2215925900 dst 313 200 22 4184792000 dst 314 200 22 4848654000 dst 315 200 22 359615900 dst 316 200 22 322894200 dst 317 200 22 5259962600 dst 318 200 22 2165630400 dst 319 200 22 1408085000 dst 320 200 22 11500350400 dst 321 200 22 4452554300 dst 322 200 22 867415000 dst 323 200 22 2320130500 dst 324 200 22 184980600 dst 325 200 22 5037003600 dst 326 200 22 283027500 dst 327 200 22 2748475500 dst 328 200 22 8166118700 dst 329 200 22 2392254500 scc 330 200 22 182394800 dst 331 200 22 250919000 dst 332 200 22 4971836500 dst 333 200 22 2777624200 dst 334 200 22 2455546000 dst 335 200 22 4876464900 dst 336 200 22 4880924200 dst 337 200 22 3659835500 dst 338 200 22 2245242600 dst 339 200 22 9083295000 scc 340 200 22 7377116800 dst 341 200 22 4511448900 dst 342 200 22 295263800 dst 343 200 22 1371214800 dst 344 200 22 2125019500 dst 345 200 22 3296176000 dst 346 200 22 6950642900 dst 347 200 22 745776800 dst 348 200 22 7629612500 dst 349 200 22 958366200 dst 350 200 22 2960509900 dst 351 200 22 527980500 dst 352 200 22 1911869600 dst 353 200 22 1589835800 dst 354 200 22 7690073000 dst 355 200 22 4879889700 dst 356 200 22 1184085900 dst 357 200 22 2300431200 dst 358 200 22 2817336900 dst 359 200 22 4346802500 dst 360 200 22 560064400 dst 361 200 22 3655129900 dst 362 200 22 542030400 dst 363 200 22 820396100 dst 364 200 22 3482526600 dst 365 200 22 2889986200 dst 366 200 22 10047455000 dst 367 200 22 870412000 dst 368 200 22 9683025900 dst 369 200 22 1835273000 dst 370 200 22 1993944200 dst 371 200 22 5225919000 dst 372 200 22 4236166300 dst 373 200 22 1406093000 dst 374 200 22 3317979500 dst 375 200 22 2988846600 dst 376 200 22 328748800 dst 377 200 22 1318335300 dst 378 200 22 4711726000 dst 379 200 22 3267661500 dst 380 200 22 8742871100 dst 381 200 22 2721370800 dst 382 200 22 4416728500 dst 383 200 22 5160307000 dst 384 200 22 1970549000 dst 385 200 22 3171946400 dst 386 200 22 6285008200 dst 387 200 22 3359532200 dst 388 200 22 6487834800 dst 389 200 22 3664810000 dst 390 200 22 983184600 dst 391 200 22 518877900 dst 392 200 22 3092489400 dst 393 200 22 4717447800 dst 394 200 22 6762904900 scc 395 200 22 8574842600 dst 396 200 22 2669704200 dst 397 200 22 2355912500 dst 398 200 22 5935351400 dst 399 200 22 6794199000 dst 400 200 22 558189900 dst 401 200 22 5230873400 dst 402 200 22 693194400 dst 403 200 22 2475707800 dst 404 200 22 1811203600 dst 405 200 22 3595016100 dst 406 200 22 1486212700 dst 407 200 22 2178825500 dst 408 200 22 1110079100 dst 409 200 22 9514784700 dst 410 200 22 3650192400 dst 411 200 22 2940143000 dst 412 200 22 1360499100 dst 413 200 22 618115200 dst 414 200 22 3257671700 dst 415 200 22 3283099800 dst 416 200 22 4054878700 scc 417 200 22 1268814000 dst 418 200 22 3316356500 dst 419 200 22 4933178600 dst 420 200 22 3944577900 dst 421 200 22 1207733200 dst 422 200 22 1672967300 dst 423 200 22 2273387200 dst 424 200 22 803885200 dst 425 200 22 1151169100 dst 426 200 22 6103629400 dst 427 200 22 2035691000 dst 428 200 22 4100043100 dst 429 200 22 1021170800 dst 430 200 22 9765102700 dst 431 200 22 4755261700 dst 432 200 22 4712589600 dst 433 200 22 2407505300 dst 434 200 22 5716809800 dst 435 200 22 8786727300 dst 436 200 22 7386636800 dst 437 200 22 1006529300 dst 438 200 22 1875789700 dst 439 200 22 4708239900 dst 440 200 22 9476743800 dst 441 200 22 4992648300 dst 442 200 22 4447842000 dst 443 200 22 1666902500 dst 444 200 22 4770988200 dst 445 200 22 6081445600 dst 446 200 22 2437066400 dst 447 200 22 1612331000 dst 448 200 22 8580203100 dst 449 200 22 2210973900 dst 450 200 22 1375699100 dst 451 200 22 5349119100 dst 452 200 22 6068561200 dst 453 200 22 5504091700 dst 454 200 22 578639600 dst 455 200 22 1657392700 dst 456 200 22 3995919000 dst 457 200 22 6600998400 dst 458 200 22 155818800 dst 459 200 22 3008834900 dst 460 200 22 8890122100 dst 461 200 22 7177728100 scc 462 200 22 1032990700 dst 463 200 22 6617044700 dst 464 200 22 3359972700 dst 465 200 22 7114273900 dst 466 200 22 5079760100 dst 467 200 22 706430500 dst 468 200 22 1571930200 dst 469 200 22 788582900 dst 470 200 22 143502800 dst 471 200 22 587230000 dst 472 200 22 4109608700 dst 473 200 22 1694125600 dst 474 200 22 4775917900 scc 475 200 22 3415941500 dst 476 200 22 1756552200 dst 477 200 22 5020774500 dst 478 200 22 166543300 dst 479 200 22 841046700 dst 480 200 22 6671101600 dst 481 200 22 2624124000 dst 482 200 22 2274944300 dst 483 200 22 992953900 dst 484 200 22 2809588500 dst 485 200 22 5634891900 dst 486 200 22 2883260300 dst 487 200 22 403358100 dst 488 200 22 2859222400 dst 489 200 22 2847257500 dst 490 200 22 5250306600 dst 491 200 22 1287039600 dst 492 200 22 2249014500 dst 493 200 22 4805108900 dst 494 200 22 2941865100 dst 495 200 22 1605428700 dst 496 200 22 6065005600 scc 497 200 22 8781514900 dst 498 200 22 6747623700 dst 499 200 22 6417008200 scc 500 200 22 12974013000 dst . head(data.frame(rslt), 200) . A data.frame: 200 × 4 limittargetmesoresult . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;chr&gt; . 1200 | 22 | 819548100 | dst | . 2200 | 22 | 6406910200 | dst | . 3200 | 22 | 3054291100 | dst | . 4200 | 22 | 734846100 | dst | . 5200 | 22 | 5641519700 | dst | . 6200 | 22 | 3706503800 | dst | . 7200 | 22 | 3160902900 | dst | . 8200 | 22 | 258692700 | dst | . 9200 | 22 | 2761502800 | dst | . 10200 | 22 | 3021910500 | dst | . 11200 | 22 | 7195895500 | dst | . 12200 | 22 | 1061266900 | dst | . 13200 | 22 | 3842152200 | scc | . 14200 | 22 | 1045733100 | dst | . 15200 | 22 | 4224061600 | dst | . 16200 | 22 | 513520800 | dst | . 17200 | 22 | 426041500 | dst | . 18200 | 22 | 2744729900 | dst | . 19200 | 22 | 2167050200 | dst | . 20200 | 22 | 1365574600 | dst | . 21200 | 22 | 2233829500 | scc | . 22200 | 22 | 620733900 | dst | . 23200 | 22 | 25754849100 | dst | . 24200 | 22 | 2431156300 | dst | . 25200 | 22 | 4729183000 | dst | . 26200 | 22 | 2390134900 | dst | . 27200 | 22 | 4303052800 | dst | . 28200 | 22 | 5758746300 | dst | . 29200 | 22 | 1462468300 | dst | . 30200 | 22 | 665641900 | dst | . 31200 | 22 | 1087304500 | dst | . 32200 | 22 | 1648525700 | dst | . 33200 | 22 | 8952069300 | scc | . 34200 | 22 | 6048505500 | dst | . 35200 | 22 | 1573047500 | dst | . 36200 | 22 | 1533145800 | dst | . 37200 | 22 | 3804210000 | dst | . 38200 | 22 | 2779186200 | scc | . 39200 | 22 | 29313769200 | dst | . 40200 | 22 | 809814200 | dst | . 41200 | 22 | 2281703900 | dst | . 42200 | 22 | 5238280600 | dst | . 43200 | 22 | 4551458000 | dst | . 44200 | 22 | 3857108700 | dst | . 45200 | 22 | 299707700 | dst | . 46200 | 22 | 6964772700 | dst | . 47200 | 22 | 778283200 | dst | . 48200 | 22 | 1669524400 | dst | . 49200 | 22 | 1536135800 | dst | . 50200 | 22 | 3158702200 | dst | . ⋮⋮ | ⋮ | ⋮ | ⋮ | . 151200 | 22 | 1132963200 | dst | . 152200 | 22 | 543542500 | dst | . 153200 | 22 | 11898226200 | dst | . 154200 | 22 | 2672716000 | dst | . 155200 | 22 | 3400378500 | dst | . 156200 | 22 | 3938617300 | dst | . 157200 | 22 | 3967041900 | dst | . 158200 | 22 | 3590233200 | dst | . 159200 | 22 | 10530496300 | dst | . 160200 | 22 | 5069166700 | dst | . 161200 | 22 | 1125072700 | dst | . 162200 | 22 | 11942296800 | dst | . 163200 | 22 | 2961922900 | dst | . 164200 | 22 | 4426798500 | dst | . 165200 | 22 | 2776554400 | dst | . 166200 | 22 | 790448300 | dst | . 167200 | 22 | 2886973500 | dst | . 168200 | 22 | 7875458800 | dst | . 169200 | 22 | 3480288800 | dst | . 170200 | 22 | 1026852400 | dst | . 171200 | 22 | 4044380800 | dst | . 172200 | 22 | 1788315700 | dst | . 173200 | 22 | 4350158000 | dst | . 174200 | 22 | 520168900 | dst | . 175200 | 22 | 1857285100 | dst | . 176200 | 22 | 2240228600 | dst | . 177200 | 22 | 10686829900 | dst | . 178200 | 22 | 5183647900 | dst | . 179200 | 22 | 4243990800 | dst | . 180200 | 22 | 7031611300 | dst | . 181200 | 22 | 4020665500 | dst | . 182200 | 22 | 3911128900 | dst | . 183200 | 22 | 270702000 | dst | . 184200 | 22 | 2790656700 | dst | . 185200 | 22 | 341687800 | dst | . 186200 | 22 | 3357351500 | dst | . 187200 | 22 | 1488538500 | dst | . 188200 | 22 | 7506700100 | dst | . 189200 | 22 | 365393100 | dst | . 190200 | 22 | 391970300 | dst | . 191200 | 22 | 2477930400 | dst | . 192200 | 22 | 324794800 | dst | . 193200 | 22 | 3269665100 | dst | . 194200 | 22 | 5069939900 | scc | . 195200 | 22 | 117356500 | dst | . 196200 | 22 | 8579476200 | dst | . 197200 | 22 | 4012959600 | dst | . 198200 | 22 | 4164090800 | dst | . 199200 | 22 | 2219991300 | dst | . 200200 | 22 | 263974200 | dst | . AA = rslt %&gt;% filter(결과 == &quot;성공&quot;) %&gt;% select(3) %&gt;% t AA = AA / 1000 AA %&gt;% as.numeric %&gt;% hist(xlab = &quot;메소 (단위 : 1000)&quot;, ylab = &quot;빈도&quot;) mean(AA) . 40401.596 rslt = matrix(rep(NA, 500*4), ncol = 4) rslt = as_tibble(rslt) colnames(rslt) = c(&quot;장비 레벨 제한&quot;, &quot;목표 강화 단계&quot;, &quot;사용 메소&quot;, &quot;결과&quot;) mean_mean = c() for (j in 1:1000){ # 표본 평균의 평균 for (i in 1:500){ # 표본 평균 rslt[i,] = simulate_starforce(200, 10) } AA = rslt %&gt;% filter(결과 == &quot;성공&quot;) %&gt;% select(3) %&gt;% t AA = AA / 1000 mean_mean[j] = AA %&gt;% as.numeric %&gt;% mean } . mean_mean %&gt;% hist . mean_meso &lt;- function(L){ matt = matrix(rep(NA, 12*3), ncol = 3) matt = as_tibble(matt) colnames(matt) = c(&quot;장비 레벨 제한&quot;, &quot;목표 강화 단계&quot;, &quot;평균적으로 필요한 메소&quot;) for (k in 1:12){ meso = c() for (i in 1:500){ meso[i] = simulate_starforce(200, k)[[3]] } matt[k, 3] = meso %&gt;% mean matt[, 1] = L matt[k, 2] = k } return(matt) } mean_meso(150) . Warning message: &#34;The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. Using compatibility `.name_repair`. This warning is displayed once every 8 hours. Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.&#34; . A tibble: 12 × 3 장비 레벨 제한목표 강화 단계평균적으로 필요한 메소 . &lt;dbl&gt;&lt;int&gt;&lt;dbl&gt; . 150 | 1 | 334482 | . 150 | 2 | 1035738 | . 150 | 3 | 2164602 | . 150 | 4 | 3715268 | . 150 | 5 | 5655664 | . 150 | 6 | 8141416 | . 150 | 7 | 12476270 | . 150 | 8 | 18363474 | . 150 | 9 | 28175988 | . 150 | 10 | 39295196 | . 150 | 11 | 65106582 | . 150 | 12 | 135072400 | . rslt = matrix(rep(NA, 500*4), ncol = 4) rslt = as_tibble(rslt) colnames(rslt) = c(&quot;장비 레벨 제한&quot;, &quot;목표 강화 단계&quot;, &quot;메소&quot;, &quot;결과&quot;) ssf = c() for (k in 1:1000){ for (i in 1:500){ rslt[i,] = simulate_starforce(200, 23) if (rslt[i, 4] == &quot;성공&quot;){ break } } ssf[k] =rslt %&gt;% select(3) %&gt;% t %&gt;% as.numeric(na.rm=TRUE) %&gt;% mean(na.rm=TRUE) } . mean(ssf) . 3976914947.207 sd(ssf) . 283225936.65854 tty= c() rslt = matrix(rep(NA, 500*4), ncol = 4) rslt = as_tibble(rslt) colnames(rslt) = c(&quot;장비 레벨 제한&quot;, &quot;목표 강화 단계&quot;, &quot;메소&quot;, &quot;결과&quot;) for (k in 1:100){ for (i in 1:500){ rslt[i,] = simulate_starforce(200, 22) } tty[k] = rslt %&gt;% filter(결과 == &quot;성공&quot;) %&gt;% select(3) %&gt;% count %&gt;% as.numeric } tty . &lt;ol class=list-inline&gt;34 | 32 | 25 | 33 | 29 | 39 | 28 | 27 | 32 | 26 | 28 | 30 | 34 | 24 | 19 | 35 | 32 | 26 | 21 | 27 | 23 | 30 | 26 | 34 | 25 | 31 | 28 | 33 | 21 | 26 | 19 | 31 | 29 | 20 | 17 | 20 | 31 | 15 | 25 | 24 | 29 | 21 | 32 | 23 | 33 | 30 | 20 | 23 | 22 | 23 | 26 | 25 | 29 | 30 | 30 | 26 | 25 | 22 | 20 | 22 | 23 | 26 | 30 | 22 | 30 | 26 | 22 | 35 | 31 | 24 | 26 | 19 | 24 | 28 | 37 | 25 | 25 | 23 | 26 | 27 | 18 | 26 | 25 | 29 | 29 | 29 | 31 | 33 | 22 | 23 | 22 | 25 | 24 | 34 | 26 | 24 | 19 | 22 | 23 | 28 | &lt;/ol&gt; mean(tty) . 27.1 print(matrix(rep(NA, 12*3), ncol = 3)) . [,1] [,2] [,3] [1,] NA NA NA [2,] NA NA NA [3,] NA NA NA [4,] NA NA NA [5,] NA NA NA [6,] NA NA NA [7,] NA NA NA [8,] NA NA NA [9,] NA NA NA [10,] NA NA NA [11,] NA NA NA [12,] NA NA NA . ?option . options {base} | R Documentation | . Options Settings . Description . Allow the user to set and examine a variety of global options which affect the way in which R computes and displays its results. . Usage . options(...) getOption(x, default = NULL) .Options . Arguments . ... | any options can be defined, using name = value. However, only the ones below are used in base R. . Options can also be passed by giving a single unnamed argument which is a named list. . | . x | a character string holding an option name. . | . default | if the specified option is not set in the options list, this value is returned. This facilitates retrieving an option and checking whether it is set and setting it separately if not. . | . Details . Invoking options() with no arguments returns a list with the current values of the options. Note that not all options listed below are set initially. To access the value of a single option, one should use, e.g., getOption(&quot;width&quot;) rather than options(&quot;width&quot;) which is a list of length one. . Value . For getOption, the current value set for option x, or default (which defaults to NULL) if the option is unset. . For options(), a list of all set options sorted by name. For options(name), a list of length one containing the set value, or NULL if it is unset. For uses setting one or more options, a list with the previous values of the options changed (returned invisibly). . Options used in base R . add.smooth:typically logical, defaulting to TRUE. Could also be set to an integer for specifying how many (simulated) smooths should be added. This is currently only used by plot.lm. . askYesNo:a function (typically set by a front-end) to ask the user binary response functions in a consistent way, or a vector of strings used by askYesNo to use as default responses for such questions. . browserNLdisabled:logical: whether newline is disabled as a synonym for &quot;n&quot; in the browser. . checkPackageLicense:logical, not set by default. If true, loadNamespace asks a user to accept any non-standard license at first load of the package. . check.bounds:logical, defaulting to FALSE. If true, a warning is produced whenever a vector (atomic or list) is extended, by something like x &lt;- 1:3; x[5] &lt;- 6. . CBoundsCheck:logical, controlling whether .C and .Fortran make copies to check for array over-runs on the atomic vector arguments. . Initially set from value of the environment variable R_C_BOUNDS_CHECK (set to yes to enable). . conflicts.policy:character string or list controlling handling of conflicts found in calls to library or require. See library for details. . continue:a non-empty string setting the prompt used for lines which continue over one line. . defaultPackages:the packages that are attached by default when R starts up. Initially set from value of the environment variable R_DEFAULT_PACKAGES, or if that is unset to c(&quot;datasets&quot;, &quot;utils&quot;, &quot;grDevices&quot;, &quot;graphics&quot;, &quot;stats&quot;, &quot;methods&quot;). (Set R_DEFAULT_PACKAGES to NULL or a comma-separated list of package names.) It will not work to set this in a &lsquo;.Rprofile&rsquo; file, as its value is consulted before that file is read. . deparse.cutoff:integer value controlling the printing of language constructs which are deparsed. Default 60. . deparse.max.lines:controls the number of lines used when deparsing in browser, upon entry to a function whose debugging flag is set, and if option traceback.max.lines is unset, of traceback(). Initially unset, and only used if set to a positive integer. . traceback.max.lines:controls the number of lines used when deparsing in traceback, if set. Initially unset, and only used if set to a positive integer. . digits:controls the number of significant (see signif) digits to print when printing numeric values. It is a suggestion only. Valid values are 1...22 with default 7. See the note in print.default about values greater than 15. . digits.secs:controls the maximum number of digits to print when formatting time values in seconds. Valid values are 0...6 with default 0. See strftime. . download.file.extra:Extra command-line argument(s) for non-default methods: see download.file. . download.file.method:Method to be used for download.file. Currently download methods &quot;internal&quot;, &quot;wininet&quot; (Windows only), &quot;libcurl&quot;, &quot;wget&quot; and &quot;curl&quot; are available. If not set, method = &quot;auto&quot; is chosen: see download.file. . echo:logical. Only used in non-interactive mode, when it controls whether input is echoed. Command-line option --no-echo sets this to FALSE, but otherwise it starts the session as TRUE. . encoding:The name of an encoding, default &quot;native.enc&quot;. See connections. . error:either a function or an expression governing the handling of non-catastrophic errors such as those generated by stop as well as by signals and internally detected errors. If the option is a function, a call to that function, with no arguments, is generated as the expression. By default the option is not set: see stop for the behaviour in that case. The functions dump.frames and recover provide alternatives that allow post-mortem debugging. Note that these need to specified as e.g. options(error = utils::recover) in startup files such as &lsquo;.Rprofile&rsquo;. . expressions:sets a limit on the number of nested expressions that will be evaluated. Valid values are 25...500000 with default 5000. If you increase it, you may also want to start R with a larger protection stack; see --max-ppsize in Memory. Note too that you may cause a segfault from overflow of the C stack, and on OSes where it is possible you may want to increase that. Once the limit is reached an error is thrown. The current number under evaluation can be found by calling Cstack_info. . interrupt:a function taking no arguments to be called on a user interrupt if the interrupt condition is not otherwise handled. . keep.parse.data:When internally storing source code (keep.source is TRUE), also store parse data. Parse data can then be retrieved with getParseData() and used e.g. for spell checking of string constants or syntax highlighting. The value has effect only when internally storing source code (see keep.source). The default is TRUE. . keep.parse.data.pkgs:As for keep.parse.data, used only when packages are installed. Defaults to FALSE unless the environment variable R_KEEP_PKG_PARSE_DATA is set to yes. The space overhead of parse data can be substantial even after compression and it causes performance overhead when loading packages. . keep.source:When TRUE, the source code for functions (newly defined or loaded) is stored internally allowing comments to be kept in the right places. Retrieve the source by printing or using deparse(fn, control = &quot;useSource&quot;). . The default is interactive(), i.e., TRUE for interactive use. . keep.source.pkgs:As for keep.source, used only when packages are installed. Defaults to FALSE unless the environment variable R_KEEP_PKG_SOURCE is set to yes. . matprod:a string selecting the implementation of the matrix products %*%, crossprod, and tcrossprod for double and complex vectors: . &quot;internal&quot;uses an unoptimized 3-loop algorithm which correctly propagates NaN and Inf values and is consistent in precision with other summation algorithms inside R like sum or colSums (which now means that it uses a long double accumulator for summation if available and enabled, see capabilities). . &quot;default&quot;uses BLAS to speed up computation, but to ensure correct propagation of NaN and Inf values it uses an unoptimized 3-loop algorithm for inputs that may contain NaN or Inf values. When deemed beneficial for performance, &quot;default&quot; may call the 3-loop algorithm unconditionally, i.e., without checking the input for NaN/Inf values. The 3-loop algorithm uses (only) a double accumulator for summation, which is consistent with the reference BLAS implementation. . &quot;blas&quot;uses BLAS unconditionally without any checks and should be used with extreme caution. BLAS libraries do not propagate NaN or Inf values correctly and for inputs with NaN/Inf values the results may be undefined. . &quot;default.simd&quot;is experimental and will likely be removed in future versions of R. It provides the same behavior as &quot;default&quot;, but the check whether the input contains NaN/Inf values is faster on some SIMD hardware. On older systems it will run correctly, but may be much slower than &quot;default&quot;. . max.print:integer, defaulting to 99999. print or show methods can make use of this option, to limit the amount of information that is printed, to something in the order of (and typically slightly less than) max.print entries. . OutDec:character string containing a single character. The preferred character to be used as the decimal point in output conversions, that is in printing, plotting, format and as.character but not when deparsing nor by sprintf nor formatC (which are sometimes used prior to printing.) . pager:the command used for displaying text files by file.show, details depending on the platform: . On a unix-alikedefaults to &lsquo;R_HOME/bin/pager&rsquo;, which is a shell script running the command-line specified by the environment variable PAGER whose default is set at configuration, usually to less. . On Windowsdefaults to &quot;internal&quot;, which uses a pager similar to the GUI console. Another possibility is &quot;console&quot; to use the console itself. . Can be a character string or an R function, in which case it needs to accept the arguments (files, header, title, delete.file) corresponding to the first four arguments of file.show. . papersize:the default paper format used by postscript; set by environment variable R_PAPERSIZE when R is started: if that is unset or invalid it defaults platform dependently . on a unix-aliketo a value derived from the locale category LC_PAPER, or if that is unavailable to a default set when R was built. . on Windowsto &quot;a4&quot;, or &quot;letter&quot; in US and Canadian locales. . PCRE_limit_recursion:Logical: should grep(perl = TRUE) and similar limit the maximal recursion allowed when matching? Only relevant for PCRE1 and PCRE2 &lt;= 10.23. . PCRE can be built not to use a recursion stack (see pcre_config), but it uses recursion by default with a recursion limit of 10000000 which potentially needs a very large C stack: see the discussion at https://www.pcre.org/original/doc/html/pcrestack.html. If true, the limit is reduced using R&#39;s estimate of the C stack size available (if known), otherwise 10000. If NA, the limit is imposed only if any input string has 1000 or more bytes. The limit has no effect when PCRE&#39;s Just-in-Time compiler is used. . PCRE_study:Logical or integer: should grep(perl = TRUE) and similar &lsquo;study&rsquo; the patterns? Either logical or a numerical threshold for the minimum number of strings to be matched for the pattern to be studied (the default is 10)). Missing values and negative numbers are treated as false. This option is ignored with PCRE2 (PCRE version &gt;= 10.00) which does not have a separate study phase and patterns are automatically optimized when possible. . PCRE_use_JIT:Logical: should grep(perl = TRUE), strsplit(perl = TRUE) and similar make use of PCRE&#39;s Just-In-Time compiler if available? (This applies only to studied patterns with PCRE1.) Default: true. Missing values are treated as false. . pdfviewer:default PDF viewer. The default is set from the environment variable R_PDFVIEWER, the default value of which . on a unix-alikeis set when R is configured, and . on Windowsis the full path to open.exe, a utility supplied with R. . printcmd:the command used by postscript for printing; set by environment variable R_PRINTCMD when R is started. This should be a command that expects either input to be piped to &lsquo;stdin&rsquo; or to be given a single filename argument. Usually set to &quot;lpr&quot; on a Unix-alike. . prompt:a non-empty string to be used for R&#39;s prompt; should usually end in a blank (&quot; &quot;). . rl_word_breaks:(Unix only:) Used for the readline-based terminal interface. Default value &quot; t n &quot; &#39;`&gt;&lt;=%;,|&amp;{()}&quot;. . This is the set of characters use to break the input line into tokens for object- and file-name completion. Those who do not use spaces around operators may prefer &quot; t n &quot; &#39;`&gt;&lt;=+-*%;,|&amp;{()}&quot; . save.defaults, save.image.defaults: see save. . scipen:integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation. Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than scipen digits wider. . setWidthOnResize:a logical. If set and TRUE, R run in a terminal using a recent readline library will set the width option when the terminal is resized. . showWarnCalls, showErrorCalls:a logical. Should warning and error messages show a summary of the call stack? By default error calls are shown in non-interactive sessions. . showNCalls:integer. Controls how long the sequence of calls must be (in bytes) before ellipses are used. Defaults to 40 and should be at least 30 and no more than 500. . show.error.locations:Should source locations of errors be printed? If set to TRUE or &quot;top&quot;, the source location that is highest on the stack (the most recent call) will be printed. &quot;bottom&quot; will print the location of the earliest call found on the stack. . Integer values can select other entries. The value 0 corresponds to &quot;top&quot; and positive values count down the stack from there. The value -1 corresponds to &quot;bottom&quot; and negative values count up from there. . show.error.messages:a logical. Should error messages be printed? Intended for use with try or a user-installed error handler. . stringsAsFactors:The default setting for arguments of data.frame and read.table. . texi2dvi:used by functions texi2dvi and texi2pdf in package tools. . unix-alike only: Set at startup from the environment variable R_TEXI2DVICMD, which defaults first to the value of environment variable TEXI2DVI, and then to a value set when R was installed (the full path to a texi2dvi script if one was found). If necessary, that environment variable can be set to &quot;emulation&quot;. . timeout:positive integer. The timeout for some Internet operations, in seconds. Default 60 (seconds) but can be set from environment variable R_DEFAULT_INTERNET_TIMEOUT. (Invalid values of the option or the variable are silently ignored: non-integer numeric values will be truncated.) See download.file and connections. . topLevelEnvironment:see topenv and sys.source. . url.method:character string: the default method for url. Normally unset, which is equivalent to &quot;default&quot;, which is &quot;internal&quot; except on Windows. . useFancyQuotes:controls the use of directional quotes in sQuote, dQuote and in rendering text help (see Rd2txt in package tools). Can be TRUE, FALSE, &quot;TeX&quot; or &quot;UTF-8&quot;. . verbose:logical. Should R report extra information on progress? Set to TRUE by the command-line option --verbose. . warn:integer value to set the handling of warning messages. If warn is negative all warnings are ignored. If warn is zero (the default) warnings are stored until the top&ndash;level function returns. If 10 or fewer warnings were signalled they will be printed otherwise a message saying how many were signalled. An object called last.warning is created and can be printed through the function warnings. If warn is one, warnings are printed as they occur. If warn is two (or larger, coercible to integer), all warnings are turned into errors. . warnPartialMatchArgs:logical. If true, warns if partial matching is used in argument matching. . warnPartialMatchAttr:logical. If true, warns if partial matching is used in extracting attributes via attr. . warnPartialMatchDollar:logical. If true, warns if partial matching is used for extraction by $. . warning.expression:an R code expression to be called if a warning is generated, replacing the standard message. If non-null it is called irrespective of the value of option warn. . warning.length:sets the truncation limit for error and warning messages. A non-negative integer, with allowed values 100...8170, default 1000. . nwarnings:the limit for the number of warnings kept when warn = 0, default 50. This will discard messages if called whilst they are being collected. If you increase this limit, be aware that the current implementation pre-allocates the equivalent of a named list for them, i.e., do not increase it to more than say a million. . width:controls the maximum number of columns on a line used in printing vectors, matrices and arrays, and when filling by cat. . Columns are normally the same as characters except in East Asian languages. . You may want to change this if you re-size the window that R is running in. Valid values are 10...10000 with default normally 80. (The limits on valid values are in file &lsquo;Print.h&rsquo; and can be changed by re-compiling R.) Some R consoles automatically change the value when they are resized. . See the examples on Startup for one way to set this automatically from the terminal width when R is started. . The &lsquo;factory-fresh&rsquo; default settings of some of these options are . add.smooth | TRUE | . check.bounds | FALSE | . continue | &quot;+ &quot; | . digits | 7 | . echo | TRUE | . encoding | &quot;native.enc&quot; | . error | NULL | . expressions | 5000 | . keep.source | interactive() | . keep.source.pkgs | FALSE | . max.print | 99999 | . OutDec | &quot;.&quot; | . prompt | &quot;&gt; &quot; | . scipen | 0 | . show.error.messages | TRUE | . timeout | 60 | . verbose | FALSE | . warn | 0 | . warning.length | 1000 | . width | 80 | . | . Others are set from environment variables or are platform-dependent. . Options set in package grDevices . These will be set when package grDevices (or its namespace) is loaded if not already set. . bitmapType:(Unix only, incl. macOS) character. The default type for the bitmap devices such as png. Defaults to &quot;cairo&quot; on systems where that is available, or to &quot;quartz&quot; on macOS where that is available. . device:a character string giving the name of a function, or the function object itself, which when called creates a new graphics device of the default type for that session. The value of this option defaults to the normal screen device (e.g., X11, windows or quartz) for an interactive session, and pdf in batch use or if a screen is not available. If set to the name of a device, the device is looked for first from the global environment (that is down the usual search path) and then in the grDevices namespace. . The default values in interactive and non-interactive sessions are configurable via environment variables R_INTERACTIVE_DEVICE and R_DEFAULT_DEVICE respectively. . The search logic for &lsquo;the normal screen device&rsquo; is that this is windows on Windows, and quartz if available on macOS (running at the console, and compiled into the build). Otherwise X11 is used if environment variable DISPLAY is set. . device.ask.default:logical. The default for devAskNewPage(&quot;ask&quot;) when a device is opened. . locatorBell:logical. Should selection in locator and identify be confirmed by a bell? Default TRUE. Honoured at least on X11 and windows devices. . windowsTimeout:(Windows-only) integer vector of length 2 representing two times in milliseconds. These control the double-buffering of windows devices when that is enabled: the first is the delay after plotting finishes (default 100) and the second is the update interval during continuous plotting (default 500). The values at the time the device is opened are used. . Other options used by package graphics . max.contour.segments:positive integer, defaulting to 25000 if not set. A limit on the number of segments in a single contour line in contour or contourLines. . Options set in package stats . These will be set when package stats (or its namespace) is loaded if not already set. . contrasts:the default contrasts used in model fitting such as with aov or lm. A character vector of length two, the first giving the function to be used with unordered factors and the second the function to be used with ordered factors. By default the elements are named c(&quot;unordered&quot;, &quot;ordered&quot;), but the names are unused. . na.action:the name of a function for treating missing values (NA&#39;s) for certain situations, see na.action and na.pass. . show.coef.Pvalues:logical, affecting whether P values are printed in summary tables of coefficients. See printCoefmat. . show.nls.convergence:logical, should nls convergence messages be printed for successful fits? . show.signif.stars:logical, should stars be printed on summary tables of coefficients? See printCoefmat. . ts.eps:the relative tolerance for certain time series (ts) computations. Default 1e-05. . ts.S.compat:logical. Used to select S compatibility for plotting time-series spectra. See the description of argument log in plot.spec. . Options set (or used) in package utils . These will be set (apart from Ncpus) when package utils (or its namespace) is loaded if not already set. . BioC_mirror:The URL of a Bioconductor mirror for use by setRepositories, e.g. the default &quot;https://bioconductor.org&quot; or the European mirror &quot;https://bioconductor.statistik.tu-dortmund.de&quot;. Can be set by chooseBioCmirror. . browser:The HTML browser to be used by browseURL. This sets the default browser on UNIX or a non-default browser on Windows. Alternatively, an R function that is called with a URL as its argument. See browseURL for further details. . ccaddress:default Cc: address used by create.post (and hencebug.report and help.request). Can be FALSE or &quot;&quot;. . citation.bibtex.max:default 1; the maximal number of bibentries (bibentry) in a citation for which the bibtex version is printed in addition to the text one. . de.cellwidth:integer: the cell widths (number of characters) to be used in the data editor dataentry. If this is unset (the default), 0, negative or NA, variable cell widths are used. . demo.ask:default for the ask argument of demo. . editor:a non-empty character string or an R function that sets the default text editor, e.g., for edit and file.edit. Set from the environment variable EDITOR on UNIX, or if unset VISUAL or vi. As a string it should specify the name of or path to an external command. . example.ask:default for the ask argument of example. . help.ports:optional integer vector for setting ports of the internal HTTP server, see startDynamicHelp. . help.search.types:default types of documentation to be searched by help.search and ??. . help.try.all.packages:default for an argument of help. . help_type:default for an argument of help, used also as the help type by ?. . HTTPUserAgent:string used as the &lsquo;user agent&rsquo; in HTTP(S) requests by download.file, url and curlGetHeaders, or NULL when requests will be made without a user agent header. The default is R (&lt;version&gt; &lt;platform&gt; &lt;arch&gt; &lt;os&gt;) except when libcurl is used when it is libcurl/7.&lt;xx&gt;.&lt;y&gt; for the libcurl version in use. . install.lock:logical: should per-directory package locking be used by install.packages? Most useful for binary installs on macOS and Windows, but can be used in a startup file for source installs via R CMD INSTALL. For binary installs, can also be the character string &quot;pkglock&quot;. . internet.info:The minimum level of information to be printed on URL downloads etc, using the &quot;internal&quot; and &quot;libcurl&quot; methods. Default is 2, for failure causes. Set to 1 or 0 to get more detailed information (for the &quot;internal&quot; method 0 provides more information than 1). . install.packages.check.source:Used by install.packages (and indirectly update.packages) on platforms which support binary packages. Possible values &quot;yes&quot; and &quot;no&quot;, with unset being equivalent to &quot;yes&quot;. . install.packages.compile.from.source:Used by install.packages(type = &quot;both&quot;) (and indirectly update.packages) on platforms which support binary packages. Possible values are &quot;never&quot;, &quot;interactive&quot; (which means ask in interactive use and &quot;never&quot; in batch use) and &quot;always&quot;. The default is taken from environment variable R_COMPILE_AND_INSTALL_PACKAGES, with default &quot;interactive&quot; if unset. However, install.packages uses &quot;never&quot; unless a make program is found, consulting the environment variable MAKE. . mailer:default emailing method used by create.post and hence bug.report and help.request. . menu.graphics:Logical: should graphical menus be used if available?. Defaults to TRUE. Currently applies to select.list, chooseCRANmirror, setRepositories and to select from multiple (text) help files in help. . Ncpus:an integer n &gt;= 1, used in install.packages as default for the number of cpus to use in a potentially parallel installation, as Ncpus = getOption(&quot;Ncpus&quot;, 1L), i.e., when unset is equivalent to a setting of 1. . pkgType:The default type of packages to be downloaded and installed &ndash; see install.packages. Possible values are platform dependently . on Windows &quot;win.binary&quot;, &quot;source&quot; and &quot;both&quot; (the default). . on Unix-alikes&quot;source&quot; (the default except under a CRAN macOS build), &quot;mac.binary&quot; and &quot;both&quot; (the default for CRAN macOS builds). (&quot;mac.binary.el-capitan&quot;, &quot;mac.binary.mavericks&quot;, &quot;mac.binary.leopard&quot; and &quot;mac.binary.universal&quot; are no longer in use.) . Value &quot;binary&quot; is a synonym for the native binary type (if there is one); &quot;both&quot; is used by install.packages to choose between source and binary installs. . repos:URLs of the repositories for use by update.packages. Defaults to c(CRAN=&quot;@CRAN@&quot;), a value that causes some utilities to prompt for a CRAN mirror. To avoid this do set the CRAN mirror, by something like local({r &lt;- getOption(&quot;repos&quot;); r[&quot;CRAN&quot;] &lt;- &quot;http://my.local.cran&quot;; options(repos = r)}). . Note that you can add more repositories (Bioconductor, R-Forge, Rforge.net ...) using setRepositories. . SweaveHooks, SweaveSyntax: see Sweave. . unzip:a character string used by unzip: the path of the external program unzip or &quot;internal&quot;. Defaults (platform dependently) . on unix-alikesto the value of R_UNZIPCMD, which is set in &lsquo;etc/Renviron&rsquo; to the path of the unzip command found during configuration and otherwise to &quot;&quot;. . on Windowsto &quot;internal&quot; when the internal unzip code is used. . Options set in package parallel . These will be set when package parallel (or its namespace) is loaded if not already set. . mc.cores:a integer giving the maximum allowed number of additional R processes allowed to be run in parallel to the current R process. Defaults to the setting of the environment variable MC_CORES if set. Most applications which use this assume a limit of 2 if it is unset. . Options used on Unix only . dvipscmd:character string giving a command to be used in the (deprecated) off-line printing of help pages via PostScript. Defaults to &quot;dvips&quot;. . Options used on Windows only . warn.FPU:logical, by default undefined. If true, a warning is produced whenever dyn.load repairs the control word damaged by a buggy DLL. . Note . For compatibility with S there is a visible object .Options whose value is a pairlist containing the current options() (in no particular order). Assigning to it will make a local copy and not change the original. (Using it however is faster than calling options()). . An option set to NULL is indistinguishable from a non existing option. . References . Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole. . Examples . op &lt;- options(); utils::str(op) # op is a named list getOption(&quot;width&quot;) == options()$width # the latter needs more memory options(digits = 15) pi # set the editor, and save previous value old.o &lt;- options(editor = &quot;nedit&quot;) old.o options(check.bounds = TRUE, warn = 1) x &lt;- NULL; x[4] &lt;- &quot;yes&quot; # gives a warning options(digits = 5) print(1e5) options(scipen = 3); print(1e5) options(op) # reset (all) initial options options(&quot;digits&quot;) ## Not run: ## set contrast handling to be like S options(contrasts = c(&quot;contr.helmert&quot;, &quot;contr.poly&quot;)) ## End(Not run) ## Not run: ## on error, terminate the R session with error status 66 options(error = quote(q(&quot;no&quot;, status = 66, runLast = FALSE))) stop(&quot;test it&quot;) ## End(Not run) ## Not run: ## Set error actions for debugging: ## enter browser on error, see ?recover: options(error = recover) ## allows to call debugger() afterwards, see ?debugger: options(error = dump.frames) ## A possible setting for non-interactive sessions options(error = quote({dump.frames(to.file = TRUE); q()})) ## End(Not run) # Compare the two ways to get an option and use it # acconting for the possibility it might not be set. if(as.logical(getOption(&quot;performCleanp&quot;, TRUE))) cat(&quot;do cleanup n&quot;) ## Not run: # a clumsier way of expressing the above w/o the default. tmp &lt;- getOption(&quot;performCleanup&quot;) if(is.null(tmp)) tmp &lt;- TRUE if(tmp) cat(&quot;do cleanup n&quot;) ## End(Not run) . . [Package base version 4.0.5 ]",
            "url": "https://stahangryum.github.io/stahangryum/2021/12/11/%EB%A9%94%EC%9D%B4%ED%94%8C%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%8A%A4%ED%83%80%ED%8F%AC%EC%8A%A4-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98.html",
            "relUrl": "/2021/12/11/%EB%A9%94%EC%9D%B4%ED%94%8C%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%8A%A4%ED%83%80%ED%8F%AC%EC%8A%A4-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98.html",
            "date": " • Dec 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "R : dataframe, tibble",
            "content": "",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/12/11/R%EC%9E%85%EB%AC%B8-%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC.html",
            "relUrl": "/introduction%20to%20r/2021/12/11/R%EC%9E%85%EB%AC%B8-%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC.html",
            "date": " • Dec 11, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "rps = c(66, 39, 14) rr = 119 * 1/3 a = c() for (i in 1:3){a[i] = (q[i] - rr)**2 /rr} sum(a) . 34.1008403361345 c(3) . 3 sum((q - rr)^2 /rr) . 34.1008403361345 a = c(18, 24, 103, 57, 148, 659) b = c(10.8, 24.7, 109.5, 64.2, 147.3, 652.5) h = c() for (i in 1:6){ h[i] = (a[i]-b[i])**2 /b[i] } sum(h) . 6.08123694337411 a = c(117, 130, 60, 30, 50, 91) b = c(117.3, 129.7, 42.7, 47.3, 67, 74) h = c() for (i in 1:6){ h[i] = (a[i]-b[i])**2 /b[i] } sum(h) . 21.5569170468988 141 * 251/478 . 74.0397489539749",
            "url": "https://stahangryum.github.io/stahangryum/2021/12/10/nn.html",
            "relUrl": "/2021/12/10/nn.html",
            "date": " • Dec 10, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "def solution(new_id): # 1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다. new_id = new_id.lower() # 2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다. able_list = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;0&#39;, &#39;-&#39;, &#39;_&#39;, &#39;.&#39;] new_id = list(new_id) temp_ = [] for i in new_id: if i in able_list: temp_.append(i) new_id = temp_ # 3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다. temp_ = [] dot_conti = False for i in range(len(new_id)): if (new_id[i] == &#39;.&#39;) and (new_id[i] == new_id[i-1]): continue else: temp_.append(new_id[i]) new_id = temp_ # 4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다. if len(new_id) == 0: pass elif len(new_id) == 1: if new_id[0] == &#39;.&#39;: del new_id[0] elif len(new_id) &gt;= 2: if (new_id[-1] == &quot;.&quot;): del new_id[-1] if new_id[0] == &#39;.&#39;: del new_id[0] # 5단계 new_id가 빈 문자열이라면, new_id에 &quot;a&quot;를 대입합니다. if len(new_id) == 0: new_id.append(&#39;a&#39;) # 6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다. # 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다. if len(new_id) &gt;= 16: del new_id[15:] if new_id[-1] == &#39;.&#39;: del new_id[-1] # 7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다. while len(new_id) &lt;= 2: new_id.append(new_id[-1]) answer = &quot;&quot;.join(new_id) return answer .",
            "url": "https://stahangryum.github.io/stahangryum/2021/12/10/Untitled1.html",
            "relUrl": "/2021/12/10/Untitled1.html",
            "date": " • Dec 10, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "url &lt;- &quot;http://www.lock5stat.com/datasets2e/ElectionMargin.csv&quot; ElectionMargin &lt;- read.csv(url) fit &lt;- lm(Margin ~ Approval, data=ElectionMargin) predict(fit, data.frame(Approval=50), interval=&quot;prediction&quot;, level=0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 15.170698 | -7.995153 | 18.33655 | . t.test(ElectionMargin$Margin, conf.level = 0.95) . One Sample t-test data: ElectionMargin$Margin t = 2.4619, df = 11, p-value = 0.03157 alternative hypothesis: true mean is not equal to 0 95 percent confidence interval: 0.8072435 14.4260898 sample estimates: mean of x 7.616667 . ElectionMargin . A data.frame: 12 × 5 YearCandidateApprovalMarginResult . &lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 1940 | Roosevelt | 62 | 10.0 | Won | . 1948 | Truman | 50 | 4.5 | Won | . 1956 | Eisenhower | 70 | 15.4 | Won | . 1964 | Johnson | 67 | 22.6 | Won | . 1972 | Nixon | 57 | 23.2 | Won | . 1976 | Ford | 48 | -2.1 | Lost | . 1980 | Carter | 31 | -9.7 | Lost | . 1984 | Reagan | 57 | 18.2 | Won | . 1992 | G.H.W.Bush | 39 | -5.5 | Lost | . 1996 | Clinton | 55 | 8.5 | Won | . 2004 | G.W.Bush | 49 | 2.4 | Won | . 2012 | Obama | 50 | 3.9 | Won | .",
            "url": "https://stahangryum.github.io/stahangryum/2021/12/10/Untitled.html",
            "relUrl": "/2021/12/10/Untitled.html",
            "date": " • Dec 10, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Anova in Regression Analysis",
            "content": "&#54924;&#44480;&#48516;&#49437;&#51032; ANOVA . library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . file_url &lt;- &quot;http://www.lock5stat.com/datasets2e/Cereal.csv&quot; . cereal = read.csv(file_url) . fit = lm(Calories ~ Sugars, data=cereal) . summary(fit) . Call: lm(formula = Calories ~ Sugars, data = cereal) Residuals: Min 1Q Median 3Q Max -36.574 -25.282 -2.549 17.796 51.805 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 88.9204 10.8120 8.224 5.96e-09 *** Sugars 4.3103 0.9269 4.650 7.22e-05 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 26.61 on 28 degrees of freedom Multiple R-squared: 0.4357, Adjusted R-squared: 0.4156 F-statistic: 21.62 on 1 and 28 DF, p-value: 7.217e-05 . anova(fit) . A anova: 2 × 5 DfSum SqMean SqF valuePr(&gt;F) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . Sugars 1 | 15316.51 | 15316.5131 | 21.62296 | 7.217205e-05 | . Residuals28 | 19833.65 | 708.3448 | NA | NA | . sum( (cereal$Calories - mean(cereal$Calories))^2) . 35150.1666666667 Example 5.14 . fit1 = lm(Calories ~ Sugars, data=cereal) summary(fit1) . Call: lm(formula = Calories ~ Sugars, data = cereal) Residuals: Min 1Q Median 3Q Max -36.574 -25.282 -2.549 17.796 51.805 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 88.9204 10.8120 8.224 5.96e-09 *** Sugars 4.3103 0.9269 4.650 7.22e-05 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 26.61 on 28 degrees of freedom Multiple R-squared: 0.4357, Adjusted R-squared: 0.4156 F-statistic: 21.62 on 1 and 28 DF, p-value: 7.217e-05 . fit2 = lm(Calories ~ Sodium, data=cereal) as_tibble(anova(fit2)) . A tibble: 2 × 5 DfSum SqMean SqF valuePr(&gt;F) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | 3241.282 | 3241.282 | 2.844221 | 0.1028158 | . 28 | 31908.884 | 1139.603 | NA | NA | . summary(fit2) . Call: lm(formula = Calories ~ Sodium, data = cereal) Residuals: Min 1Q Median 3Q Max -47.387 -22.917 -8.006 18.747 76.233 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 103.75873 18.86779 5.499 7.1e-06 *** Sodium 0.13658 0.08098 1.686 0.103 Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 33.76 on 28 degrees of freedom Multiple R-squared: 0.09221, Adjusted R-squared: 0.05979 F-statistic: 2.844 on 1 and 28 DF, p-value: 0.1028 . 33.76/ (sd(cereal$Sodium)*sqrt(29)) . 0.0809890928008326 cereal . A data.frame: 30 × 10 NameCompanyServingCaloriesFatSodiumCarbsFiberSugarsProtein . &lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . AppleJacks | K | 1.00 | 117 | 0.6 | 143 | 27 | 0.5 | 15.0 | 1.0 | . Boo Berry | G | 1.00 | 118 | 0.8 | 211 | 27 | 0.1 | 14.0 | 1.0 | . Cap&#39;n Crunch | Q | 0.75 | 144 | 2.1 | 269 | 31 | 1.1 | 16.0 | 1.3 | . Cinnamon Toast Crunch | G | 0.75 | 169 | 4.4 | 408 | 32 | 1.7 | 13.3 | 2.7 | . Cocoa Blasts | Q | 1.00 | 130 | 1.2 | 135 | 29 | 0.8 | 16.0 | 1.0 | . Cocoa Puffs | G | 1.00 | 117 | 1.0 | 171 | 26 | 0.8 | 14.0 | 1.0 | . Cookie Crisp | G | 1.00 | 117 | 0.9 | 178 | 26 | 0.5 | 13.0 | 1.0 | . Corn Flakes | K | 1.00 | 101 | 0.1 | 202 | 24 | 0.8 | 3.0 | 2.0 | . Corn Pops | K | 1.00 | 117 | 0.2 | 120 | 28 | 0.3 | 15.0 | 1.0 | . Crispix | K | 1.00 | 113 | 0.3 | 229 | 26 | 0.1 | 3.0 | 2.0 | . Crunchy Bran | Q | 0.75 | 120 | 1.3 | 309 | 31 | 6.4 | 8.0 | 1.3 | . Froot Loops | K | 1.00 | 118 | 0.9 | 150 | 26 | 0.8 | 12.0 | 2.0 | . Frosted Mini-Wheats | K | 1.00 | 175 | 0.8 | 5 | 41 | 5.0 | 10.0 | 5.0 | . Golden Grahams | G | 0.75 | 149 | 1.3 | 359 | 33 | 1.3 | 14.7 | 2.7 | . Honey Nut Clusters | G | 1.00 | 214 | 2.7 | 249 | 46 | 2.8 | 17.0 | 4.0 | . Honey Nut Heaven | Q | 1.00 | 192 | 3.7 | 216 | 38 | 3.5 | 13.0 | 4.0 | . King Vitaman | Q | 1.50 | 80 | 0.7 | 173 | 17 | 0.9 | 4.0 | 1.3 | . Kix | G | 1.30 | 87 | 0.5 | 205 | 20 | 0.8 | 2.3 | 1.5 | . Life | Q | 0.75 | 160 | 1.9 | 219 | 33 | 2.7 | 8.0 | 4.0 | . Lucky Charms | G | 1.00 | 114 | 1.1 | 203 | 25 | 1.5 | 13.0 | 2.0 | . Multi-Grain Cheerios | G | 1.00 | 108 | 1.2 | 201 | 24 | 2.8 | 6.0 | 2.0 | . Product 19 | K | 1.00 | 100 | 0.4 | 207 | 25 | 1.0 | 4.0 | 2.0 | . Raisin Bran | K | 1.00 | 195 | 1.6 | 362 | 47 | 7.3 | 20.0 | 5.0 | . Reese&#39;s Puffs | G | 0.75 | 171 | 3.9 | 223 | 31 | 0.0 | 16.0 | 2.7 | . Rice Chex | G | 1.25 | 94 | 0.2 | 234 | 22 | 0.1 | 1.6 | 1.6 | . Rice Krispie Treats | K | 0.75 | 160 | 1.7 | 252 | 35 | 0.0 | 12.0 | 1.3 | . Smart Start | K | 1.00 | 182 | 0.7 | 275 | 43 | 2.8 | 14.0 | 4.0 | . Special K | K | 1.00 | 117 | 0.4 | 224 | 22 | 0.8 | 4.0 | 7.0 | . Total | G | 0.75 | 129 | 0.9 | 256 | 31 | 3.7 | 6.7 | 4.0 | . Wheaties | G | 1.00 | 107 | 1.0 | 218 | 24 | 3.0 | 4.0 | 3.0 | . Problem 5.4 . cereal . A data.frame: 30 × 10 NameCompanyServingCaloriesFatSodiumCarbsFiberSugarsProtein . &lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . AppleJacks | K | 1.00 | 117 | 0.6 | 143 | 27 | 0.5 | 15.0 | 1.0 | . Boo Berry | G | 1.00 | 118 | 0.8 | 211 | 27 | 0.1 | 14.0 | 1.0 | . Cap&#39;n Crunch | Q | 0.75 | 144 | 2.1 | 269 | 31 | 1.1 | 16.0 | 1.3 | . Cinnamon Toast Crunch | G | 0.75 | 169 | 4.4 | 408 | 32 | 1.7 | 13.3 | 2.7 | . Cocoa Blasts | Q | 1.00 | 130 | 1.2 | 135 | 29 | 0.8 | 16.0 | 1.0 | . Cocoa Puffs | G | 1.00 | 117 | 1.0 | 171 | 26 | 0.8 | 14.0 | 1.0 | . Cookie Crisp | G | 1.00 | 117 | 0.9 | 178 | 26 | 0.5 | 13.0 | 1.0 | . Corn Flakes | K | 1.00 | 101 | 0.1 | 202 | 24 | 0.8 | 3.0 | 2.0 | . Corn Pops | K | 1.00 | 117 | 0.2 | 120 | 28 | 0.3 | 15.0 | 1.0 | . Crispix | K | 1.00 | 113 | 0.3 | 229 | 26 | 0.1 | 3.0 | 2.0 | . Crunchy Bran | Q | 0.75 | 120 | 1.3 | 309 | 31 | 6.4 | 8.0 | 1.3 | . Froot Loops | K | 1.00 | 118 | 0.9 | 150 | 26 | 0.8 | 12.0 | 2.0 | . Frosted Mini-Wheats | K | 1.00 | 175 | 0.8 | 5 | 41 | 5.0 | 10.0 | 5.0 | . Golden Grahams | G | 0.75 | 149 | 1.3 | 359 | 33 | 1.3 | 14.7 | 2.7 | . Honey Nut Clusters | G | 1.00 | 214 | 2.7 | 249 | 46 | 2.8 | 17.0 | 4.0 | . Honey Nut Heaven | Q | 1.00 | 192 | 3.7 | 216 | 38 | 3.5 | 13.0 | 4.0 | . King Vitaman | Q | 1.50 | 80 | 0.7 | 173 | 17 | 0.9 | 4.0 | 1.3 | . Kix | G | 1.30 | 87 | 0.5 | 205 | 20 | 0.8 | 2.3 | 1.5 | . Life | Q | 0.75 | 160 | 1.9 | 219 | 33 | 2.7 | 8.0 | 4.0 | . Lucky Charms | G | 1.00 | 114 | 1.1 | 203 | 25 | 1.5 | 13.0 | 2.0 | . Multi-Grain Cheerios | G | 1.00 | 108 | 1.2 | 201 | 24 | 2.8 | 6.0 | 2.0 | . Product 19 | K | 1.00 | 100 | 0.4 | 207 | 25 | 1.0 | 4.0 | 2.0 | . Raisin Bran | K | 1.00 | 195 | 1.6 | 362 | 47 | 7.3 | 20.0 | 5.0 | . Reese&#39;s Puffs | G | 0.75 | 171 | 3.9 | 223 | 31 | 0.0 | 16.0 | 2.7 | . Rice Chex | G | 1.25 | 94 | 0.2 | 234 | 22 | 0.1 | 1.6 | 1.6 | . Rice Krispie Treats | K | 0.75 | 160 | 1.7 | 252 | 35 | 0.0 | 12.0 | 1.3 | . Smart Start | K | 1.00 | 182 | 0.7 | 275 | 43 | 2.8 | 14.0 | 4.0 | . Special K | K | 1.00 | 117 | 0.4 | 224 | 22 | 0.8 | 4.0 | 7.0 | . Total | G | 0.75 | 129 | 0.9 | 256 | 31 | 3.7 | 6.7 | 4.0 | . Wheaties | G | 1.00 | 107 | 1.0 | 218 | 24 | 3.0 | 4.0 | 3.0 | . fit = lm(Calories ~ Fiber, data = cereal) summary(fit) . Call: lm(formula = Calories ~ Fiber, data = cereal) Residuals: Min 1Q Median 3Q Max -52.889 -23.528 -5.832 17.896 71.654 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 118.590 8.019 14.788 9.32e-15 *** Fiber 8.484 3.111 2.727 0.0109 * Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 31.49 on 28 degrees of freedom Multiple R-squared: 0.2098, Adjusted R-squared: 0.1816 F-statistic: 7.436 on 1 and 28 DF, p-value: 0.01091 . anova_fit = anova(fit) anova_fit . A anova: 2 × 5 DfSum SqMean SqF valuePr(&gt;F) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . Fiber 1 | 7376.109 | 7376.1085 | 7.436113 | 0.01090724 | . Residuals28 | 27774.058 | 991.9306 | NA | NA | . anova_fit[[2,2]] / 28 . 991.930648466004 anova_fit[[1,3]] / anova_fit[[2,3]] . 7.43611312043391 Problem 5.5 . file_url = &quot;http://www.lock5stat.com/datasets2e/StudentSurvey.csv&quot; student = read.csv(file_url) student %&gt;% select(c(VerbalSAT, GPA)) . A data.frame: 362 × 2 VerbalSATGPA . &lt;int&gt;&lt;dbl&gt; . 540 | 3.13 | . 520 | 2.50 | . 550 | 2.55 | . 490 | 3.10 | . 720 | 2.70 | . 600 | 3.20 | . 640 | 2.77 | . 660 | 3.30 | . 550 | 2.80 | . 670 | 3.70 | . 500 | 2.09 | . 580 | NA | . 530 | 2.90 | . 650 | 3.08 | . 700 | NA | . 590 | 3.86 | . 600 | 3.00 | . 700 | 3.00 | . 610 | 3.35 | . 550 | 3.30 | . 550 | 3.40 | . 560 | 2.90 | . 560 | 3.50 | . 550 | 3.00 | . 550 | 3.30 | . 700 | 3.70 | . 610 | 3.48 | . 570 | 3.40 | . 550 | 2.50 | . 500 | 3.30 | . ⋮ | ⋮ | . 590 | 3.01 | . 530 | 2.25 | . 690 | 3.20 | . 550 | 3.35 | . 600 | 3.00 | . 610 | 3.00 | . 600 | 3.48 | . 750 | 2.88 | . 470 | 2.60 | . 550 | 2.75 | . 540 | 3.30 | . 530 | 3.25 | . 540 | 3.30 | . 680 | 3.20 | . 510 | 2.60 | . 500 | 3.00 | . 680 | 3.25 | . 500 | 3.30 | . 570 | 3.25 | . 540 | 2.83 | . 550 | 3.30 | . 680 | 3.60 | . 630 | 3.70 | . 650 | 2.83 | . 680 | 3.30 | . 550 | 3.44 | . 600 | 3.00 | . 540 | 3.27 | . 550 | 2.30 | . 500 | 2.60 | . fit = lm(GPA ~ VerbalSAT, data = student) . summary(fit) . Call: lm(formula = GPA ~ VerbalSAT, data = student) Residuals: Min 1Q Median 3Q Max -1.0936 -0.2422 0.0282 0.2550 0.9253 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.0335506 0.1621397 12.542 &lt; 2e-16 *** VerbalSAT 0.0018929 0.0002709 6.989 1.45e-11 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.3732 on 343 degrees of freedom (17 observations deleted due to missingness) Multiple R-squared: 0.1246, Adjusted R-squared: 0.1221 F-statistic: 48.84 on 1 and 343 DF, p-value: 1.454e-11 . x = 550 0.0018929*x + 2.0335506 . 3.0746456 anova(fit) . A anova: 2 × 5 DfSum SqMean SqF valuePr(&gt;F) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . VerbalSAT 1 | 6.802883 | 6.8028831 | 48.84023 | 1.453626e-11 | . Residuals343 | 47.775956 | 0.1392885 | NA | NA | . $R^2 = dfrac{SSModel}{SSTotal}$ . anova(fit)[[1,2]] / (anova(fit)[[1,2]] + anova(fit)[[2,2]]) . 0.124643235538024 Problem 5.6 . file_url = &quot;http://www.lock5stat.com/datasets2e/WaterStriders.csv&quot; strider = read.csv(file_url) . strider %&gt;% select(c(FemalesHiding, MatingActivity)) %&gt;% plot . fit = lm(MatingActivity ~ FemalesHiding, data = strider) . summary(fit) . Call: lm(formula = MatingActivity ~ FemalesHiding, data = strider) Residuals: Min 1Q Median 3Q Max -0.15105 -0.03703 -0.00928 0.03888 0.14763 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 0.48014 0.04213 11.398 3.17e-06 *** FemalesHiding -0.32321 0.12605 -2.564 0.0334 * Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.1013 on 8 degrees of freedom Multiple R-squared: 0.4511, Adjusted R-squared: 0.3825 F-statistic: 6.575 on 1 and 8 DF, p-value: 0.03343 . x = 0.5 -0.32321 * x + 0.48014 . 0.318535 anova(fit) . A anova: 2 × 5 DfSum SqMean SqF valuePr(&gt;F) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . FemalesHiding1 | 0.06748725 | 0.06748725 | 6.575082 | 0.03342822 | . Residuals8 | 0.08211275 | 0.01026409 | NA | NA | . 0.06748 / (0.06748 + 0.08211) . 0.451099672437997 &#49888;&#47280;&#44396;&#44036;&#44284; &#50696;&#52769;&#44396;&#44036; . Example 5.17 . file_url = &quot;http://www.lock5stat.com/datasets2e/inkjetPrinters.csv&quot; . inkjet = read.csv(file_url) . fit = lm(Price ~ PPM, data = inkjet) . summary(fit) . Call: lm(formula = Price ~ PPM, data = inkjet) Residuals: Min 1Q Median 3Q Max -79.38 -51.40 -3.49 43.85 87.76 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -94.22 56.40 -1.671 0.112086 PPM 90.88 19.49 4.663 0.000193 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 58.55 on 18 degrees of freedom Multiple R-squared: 0.5471, Adjusted R-squared: 0.522 F-statistic: 21.75 on 1 and 18 DF, p-value: 0.0001934 . newdata = data.frame(PPM = 3.0) . newdata . A data.frame: 1 × 1 PPM . &lt;dbl&gt; . 3 | . predict(fit, newdata, interval = &quot;prediction&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 1178.4124 | 52.1476 | 304.6773 | . predict(fit, newdata, interval = &quot;confidence&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 1178.4124 | 149.8849 | 206.94 | . summary(fit) . Call: lm(formula = Price ~ PPM, data = inkjet) Residuals: Min 1Q Median 3Q Max -79.38 -51.40 -3.49 43.85 87.76 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -94.22 56.40 -1.671 0.112086 PPM 90.88 19.49 4.663 0.000193 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 58.55 on 18 degrees of freedom Multiple R-squared: 0.5471, Adjusted R-squared: 0.522 F-statistic: 21.75 on 1 and 18 DF, p-value: 0.0001934 . Problem 5.7 . base_url = &quot;http://www.lock5stat.com/datasets2e/&quot; . file = &quot;SampCountries.csv&quot; . url = paste0(base_url, file) . samp = read.csv(url) . fit = lm(LifeExpectancy ~ Health, data = samp) . predict(fit, data.frame(Health = 3), interval = &quot;prediction&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 163.506 | 41.7928 | 85.2192 | . predict(fit, data.frame(Health = 10), interval = &quot;prediction&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 168.6062 | 47.9192 | 89.29321 | . predict(fit, data.frame(Health = 50), interval = &quot;prediction&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 197.75023 | 63.3292 | 132.1713 | . Problem 5.8 . file = &quot;ElectionMargin.csv&quot; url = paste0(base_url, file) EM = read.csv(url) . EM . A data.frame: 12 × 5 YearCandidateApprovalMarginResult . &lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 1940 | Roosevelt | 62 | 10.0 | Won | . 1948 | Truman | 50 | 4.5 | Won | . 1956 | Eisenhower | 70 | 15.4 | Won | . 1964 | Johnson | 67 | 22.6 | Won | . 1972 | Nixon | 57 | 23.2 | Won | . 1976 | Ford | 48 | -2.1 | Lost | . 1980 | Carter | 31 | -9.7 | Lost | . 1984 | Reagan | 57 | 18.2 | Won | . 1992 | G.H.W.Bush | 39 | -5.5 | Lost | . 1996 | Clinton | 55 | 8.5 | Won | . 2004 | G.W.Bush | 49 | 2.4 | Won | . 2012 | Obama | 50 | 3.9 | Won | . EM$Approval %&gt;% mean EM$Approval %&gt;% sd EM$Margin %&gt;% mean EM$Margin %&gt;% sd . 52.9166666666667 11.0409019174846 7.61666666666667 10.717261635777 fit = lm(Margin ~ Approval, data= EM) summary(fit) . Call: lm(formula = Margin ~ Approval, data = EM) Residuals: Min 1Q Median 3Q Max -6.543 -2.758 -1.067 1.591 12.159 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -36.7602 8.3415 -4.407 0.001321 ** Approval 0.8386 0.1546 5.425 0.000291 *** Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 5.661 on 10 degrees of freedom Multiple R-squared: 0.7464, Adjusted R-squared: 0.721 F-statistic: 29.43 on 1 and 10 DF, p-value: 0.0002909 . anova(fit) . A anova: 2 × 5 DfSum SqMean SqF valuePr(&gt;F) . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . Approval 1 | 943.0398 | 943.03976 | 29.43165 | 0.0002909048 | . Residuals10 | 320.4169 | 32.04169 | NA | NA | . predict(fit, data.frame(Approval = 50), interval = &quot;confidence&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 15.170698 | 1.393745 | 8.947651 | . predict(fit, data.frame(Approval = 50), interval = &quot;prediction&quot;, level = 0.95) . A matrix: 1 × 3 of type dbl fitlwrupr . 15.170698 | -7.995153 | 18.33655 | . predict(fit, data.frame(Approval = NA), interval = &quot;confidence&quot;, level = 0.95) . Error: variable &#39;Approval&#39; was fitted with type &#34;numeric&#34; but type &#34;logical&#34; was supplied Traceback: 1. predict(fit, data.frame(Approval = NA), interval = &#34;confidence&#34;, . level = 0.95) 2. predict.lm(fit, data.frame(Approval = NA), interval = &#34;confidence&#34;, . level = 0.95) 3. .checkMFClasses(cl, m) 4. stop(gettextf(&#34;variable &#39;%s&#39; was fitted with type &#34;%s &#34; but type &#34;%s &#34; was supplied&#34;, . names(old)[wrong], old[wrong], new[wrong]), call. = FALSE, . domain = NA) . EM . A data.frame: 12 × 5 YearCandidateApprovalMarginResult . &lt;int&gt;&lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 1940 | Roosevelt | 62 | 10.0 | Won | . 1948 | Truman | 50 | 4.5 | Won | . 1956 | Eisenhower | 70 | 15.4 | Won | . 1964 | Johnson | 67 | 22.6 | Won | . 1972 | Nixon | 57 | 23.2 | Won | . 1976 | Ford | 48 | -2.1 | Lost | . 1980 | Carter | 31 | -9.7 | Lost | . 1984 | Reagan | 57 | 18.2 | Won | . 1992 | G.H.W.Bush | 39 | -5.5 | Lost | . 1996 | Clinton | 55 | 8.5 | Won | . 2004 | G.W.Bush | 49 | 2.4 | Won | . 2012 | Obama | 50 | 3.9 | Won | . 7.62 - 2.228*0.1546 . 7.2755512 7.62 + 2.228*0.1546 . 7.9644488 mean(c(0.8, 14.4)) . 7.6 7.62 - 2.201* (10.72/sqrt(12)) . 0.808791028273076",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20statistics/2021/12/04/%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D%EC%9D%98-ANOVA.html",
            "relUrl": "/introduction%20to%20statistics/2021/12/04/%ED%9A%8C%EA%B7%80%EB%B6%84%EC%84%9D%EC%9D%98-ANOVA.html",
            "date": " • Dec 4, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "R : dataframe, tibble",
            "content": "library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . tibble . A = rnorm(10*5) dim(A) = c(10,5) A = as_tibble(A) A . Warning message: &#34;The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. Using compatibility `.name_repair`. This warning is displayed once every 8 hours. Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.&#34; . A tibble: 10 × 5 V1V2V3V4V5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.22171163 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | 1.69826333 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | -0.03372118 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | 0.90800474 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.19389942 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.82995542 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | 1.08352406 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | -1.25122594 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -0.86940762 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.25294523 | 0.8213772 | . colnames(A) . &lt;ol class=list-inline&gt;&#39;V1&#39; | &#39;V2&#39; | &#39;V3&#39; | &#39;V4&#39; | &#39;V5&#39; | &lt;/ol&gt; colnames(A) = c(&quot;X1&quot;, &quot;X2&quot;, &quot;X3&quot;, &quot;X4&quot;, &quot;X5&quot;) A . A tibble: 10 × 5 X1X2X3X4X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.22171163 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | 1.69826333 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | -0.03372118 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | 0.90800474 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.19389942 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.82995542 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | 1.08352406 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | -1.25122594 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -0.86940762 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.25294523 | 0.8213772 | . select . 특정 열만 return한다. | . A %&gt;% select(1:3,5) . A tibble: 10 × 4 X1X2X3X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.8213772 | . A %&gt;% select(X1:X3, X5) . A tibble: 10 × 4 X1X2X3X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.8213772 | . A %&gt;% select(X1:X3, 5) . A tibble: 10 × 4 X1X2X3X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.8213772 | . select(-c()) . 특정 열을 제외하고 return한다. | . A %&gt;% select(-(X1:X3)) . A tibble: 10 × 2 X4X5 . &lt;dbl&gt;&lt;dbl&gt; . -0.22171163 | -0.4435196 | . 1.69826333 | -0.3276056 | . -0.03372118 | 1.6288003 | . 0.90800474 | -1.5250155 | . 0.19389942 | 0.6184074 | . -1.82995542 | -1.3931623 | . 1.08352406 | -0.9960136 | . -1.25122594 | 1.6910696 | . -0.86940762 | -1.6689878 | . 0.25294523 | 0.8213772 | . select(...,start_with(~)) . colname이 ~로 시작하는 열을 return한다. | . colnames(A) = c(&quot;XY1&quot;, &quot;XY2&quot;, &quot;XZ1&quot;, &quot;XZ2&quot;, &quot;X5&quot;) A . A tibble: 10 × 5 XY1XY2XZ1XZ2X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.22171163 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | 1.69826333 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | -0.03372118 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | 0.90800474 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.19389942 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.82995542 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | 1.08352406 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | -1.25122594 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -0.86940762 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.25294523 | 0.8213772 | . A %&gt;% select(starts_with(&quot;XY&quot;)) . A tibble: 10 × 2 XY1XY2 . &lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | . 0.53584545 | 0.09181352 | . 0.90624156 | 2.85523537 | . 1.70929906 | 1.13885998 | . 0.19758044 | 0.25588517 | . -0.91999842 | -0.55179290 | . -1.60525138 | -0.69143779 | . 0.13403321 | 1.09364788 | . -0.08960615 | 1.32145228 | . 1.80364011 | -2.31312123 | . select(...,ends_with(~)) . colname이 ~로 끝나는 열을 return한다. | . A %&gt;% select(ends_with(&quot;2&quot;)) . A tibble: 10 × 2 XY2XZ2 . &lt;dbl&gt;&lt;dbl&gt; . -0.73793104 | -0.22171163 | . 0.09181352 | 1.69826333 | . 2.85523537 | -0.03372118 | . 1.13885998 | 0.90800474 | . 0.25588517 | 0.19389942 | . -0.55179290 | -1.82995542 | . -0.69143779 | 1.08352406 | . 1.09364788 | -1.25122594 | . 1.32145228 | -0.86940762 | . -2.31312123 | 0.25294523 | . select(...,contains(~)) . colname이 ~를 포함한 열을 return한다. | . A %&gt;% select(contains(&quot;Z&quot;)) . A tibble: 10 × 2 XZ1XZ2 . &lt;dbl&gt;&lt;dbl&gt; . -0.81053576 | -0.22171163 | . 0.58065814 | 1.69826333 | . -1.06706911 | -0.03372118 | . -0.69105256 | 0.90800474 | . -0.09596958 | 0.19389942 | . 1.10549004 | -1.82995542 | . -0.51414387 | 1.08352406 | . -2.41510714 | -1.25122594 | . -0.42417048 | -0.86940762 | . 0.11079088 | 0.25294523 | . select(...,everyting()) . colname이 ~를 포함하는 열을 좌측으로 옮긴다. | everything()이 없는 코드와 다른 점은 ~를 포함하지 않는 열도 출력한다는 점이다. | . A %&gt;% select(contains(&quot;Z&quot;), everything()) . A tibble: 10 × 5 XZ1XZ2XY1XY2X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . -0.81053576 | -0.22171163 | 1.36007190 | -0.73793104 | -0.4435196 | . 0.58065814 | 1.69826333 | 0.53584545 | 0.09181352 | -0.3276056 | . -1.06706911 | -0.03372118 | 0.90624156 | 2.85523537 | 1.6288003 | . -0.69105256 | 0.90800474 | 1.70929906 | 1.13885998 | -1.5250155 | . -0.09596958 | 0.19389942 | 0.19758044 | 0.25588517 | 0.6184074 | . 1.10549004 | -1.82995542 | -0.91999842 | -0.55179290 | -1.3931623 | . -0.51414387 | 1.08352406 | -1.60525138 | -0.69143779 | -0.9960136 | . -2.41510714 | -1.25122594 | 0.13403321 | 1.09364788 | 1.6910696 | . -0.42417048 | -0.86940762 | -0.08960615 | 1.32145228 | -1.6689878 | . 0.11079088 | 0.25294523 | 1.80364011 | -2.31312123 | 0.8213772 | . filter . A . A tibble: 10 × 5 XY1XY2XZ1XZ2X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.22171163 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | 1.69826333 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | -0.03372118 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | 0.90800474 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.19389942 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.82995542 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | 1.08352406 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | -1.25122594 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -0.86940762 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.25294523 | 0.8213772 | . 아래 코드는 $X5&gt;0$인 행만 return한다. | . A %&gt;% filter(X5&gt;0) . A tibble: 4 × 5 XY1XY2XZ1XZ2X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 0.9062416 | 2.8552354 | -1.06706911 | -0.03372118 | 1.6288003 | . 0.1975804 | 0.2558852 | -0.09596958 | 0.19389942 | 0.6184074 | . 0.1340332 | 1.0936479 | -2.41510714 | -1.25122594 | 1.6910696 | . 1.8036401 | -2.3131212 | 0.11079088 | 0.25294523 | 0.8213772 | . 아래 코드는 $X5&gt;0$이고$XY2&gt;0$인 행만 return한다. | . A %&gt;% filter(X5&gt;0 &amp; XY2 &gt; 0) . A tibble: 3 × 5 XY1XY2XZ1XZ2X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 0.9062416 | 2.8552354 | -1.06706911 | -0.03372118 | 1.6288003 | . 0.1975804 | 0.2558852 | -0.09596958 | 0.19389942 | 0.6184074 | . 0.1340332 | 1.0936479 | -2.41510714 | -1.25122594 | 1.6910696 | . A %&gt;% filter(X5&gt;0 &amp; XY2 &gt; 0) %&gt;% select(contains(&quot;XY&quot;)) . A tibble: 3 × 2 XY1XY2 . &lt;dbl&gt;&lt;dbl&gt; . 0.9062416 | 2.8552354 | . 0.1975804 | 0.2558852 | . 0.1340332 | 1.0936479 | . mutate . 새로운 열을 추가한다. | . A . A tibble: 10 × 5 XY1XY2XZ1XZ2X5 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.22171163 | -0.4435196 | . 0.53584545 | 0.09181352 | 0.58065814 | 1.69826333 | -0.3276056 | . 0.90624156 | 2.85523537 | -1.06706911 | -0.03372118 | 1.6288003 | . 1.70929906 | 1.13885998 | -0.69105256 | 0.90800474 | -1.5250155 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.19389942 | 0.6184074 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.82995542 | -1.3931623 | . -1.60525138 | -0.69143779 | -0.51414387 | 1.08352406 | -0.9960136 | . 0.13403321 | 1.09364788 | -2.41510714 | -1.25122594 | 1.6910696 | . -0.08960615 | 1.32145228 | -0.42417048 | -0.86940762 | -1.6689878 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.25294523 | 0.8213772 | . A %&gt;% mutate(X6 = abs(X5), Z7 = X5**2, Z8 = Z7 - mean(Z7)) . A tibble: 10 × 8 XY1XY2XZ1XZ2X5X6Z7Z8 . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1.36007190 | -0.73793104 | -0.81053576 | -0.22171163 | -0.4435196 | 0.4435196 | 0.1967096 | -1.2950871 | . 0.53584545 | 0.09181352 | 0.58065814 | 1.69826333 | -0.3276056 | 0.3276056 | 0.1073254 | -1.3844713 | . 0.90624156 | 2.85523537 | -1.06706911 | -0.03372118 | 1.6288003 | 1.6288003 | 2.6529903 | 1.1611936 | . 1.70929906 | 1.13885998 | -0.69105256 | 0.90800474 | -1.5250155 | 1.5250155 | 2.3256722 | 0.8338755 | . 0.19758044 | 0.25588517 | -0.09596958 | 0.19389942 | 0.6184074 | 0.6184074 | 0.3824277 | -1.1093690 | . -0.91999842 | -0.55179290 | 1.10549004 | -1.82995542 | -1.3931623 | 1.3931623 | 1.9409013 | 0.4491046 | . -1.60525138 | -0.69143779 | -0.51414387 | 1.08352406 | -0.9960136 | 0.9960136 | 0.9920430 | -0.4997536 | . 0.13403321 | 1.09364788 | -2.41510714 | -1.25122594 | 1.6910696 | 1.6910696 | 2.8597164 | 1.3679197 | . -0.08960615 | 1.32145228 | -0.42417048 | -0.86940762 | -1.6689878 | 1.6689878 | 2.7855204 | 1.2937237 | . 1.80364011 | -2.31312123 | 0.11079088 | 0.25294523 | 0.8213772 | 0.8213772 | 0.6746605 | -0.8171362 | . group_by() . sex = c(&quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;) value = c(1, 2, 3, 10, 20, 30, 40) . df = tibble(sex, value) df . A tibble: 7 × 2 sexvalue . &lt;chr&gt;&lt;dbl&gt; . M | 1 | . M | 2 | . M | 3 | . F | 10 | . F | 20 | . F | 30 | . F | 40 | . df %&gt;% group_by(sex) %&gt;% summarise(mean_value = mean(value)) . A tibble: 2 × 2 sexmean_value . &lt;chr&gt;&lt;dbl&gt; . F | 25 | . M | 2 | . 그룹별로 묶은 다음에 평균을 계산한다. | . summarise에 사용할 수 있는 함수는 평균과 같이 $n$개의 벡터가 입력으로 올 때 하나의 스칼라를 return하는 함수이다. | . NA . NA는 신중하게 다루자. . | NA가 포함되어도 개별연산은 가능하다. . | . x = c(1,2,NA,3,4) x . &lt;ol class=list-inline&gt;1 | 2 | &lt;NA&gt; | 3 | 4 | &lt;/ol&gt; x+1 . &lt;ol class=list-inline&gt;2 | 3 | &lt;NA&gt; | 4 | 5 | &lt;/ol&gt; x**2 . &lt;ol class=list-inline&gt;1 | 4 | &lt;NA&gt; | 9 | 16 | &lt;/ol&gt; 개별연산이 아닌 연산은 불가능하다. | . 예를 들면 평균연산 | . mean(x) . &lt;NA&gt; sum(x) . &lt;NA&gt; max(x) . &lt;NA&gt; na.rm=TRUE . 개별연산이 아닌 연산에도 사용하고 싶다면 na.rm=TRUE 옵션을 사용한다. | . na.rm=TRUE 옵션을 주면 NA를 제외하고 연산한다. | . mean(x, na.rm=TRUE) . 2.5 max(x, na.rm=TRUE) . 4 tibble(x) %&gt;% mutate(y = x+1) . A tibble: 5 × 2 xy . &lt;dbl&gt;&lt;dbl&gt; . 1 | 2 | . 2 | 3 | . NA | NA | . 3 | 4 | . 4 | 5 | . tibble(x) %&gt;% mutate(z=mean(x)) . A tibble: 5 × 2 xz . &lt;dbl&gt;&lt;dbl&gt; . 1 | NA | . 2 | NA | . NA | NA | . 3 | NA | . 4 | NA | . tibble(x) %&gt;% summarise(z=mean(x)) . A tibble: 1 × 1 z . &lt;dbl&gt; . NA | . tibble(x) %&gt;% summarise(z=mean(x, na.rm=TRUE)) . A tibble: 1 × 1 z . &lt;dbl&gt; . 2.5 | . x = c(1,2,3,4,NA,5,6,7) y = c(-1,-2,-3,-4,77,-5,-6,-7) tibble(x,y) . A tibble: 8 × 2 xy . &lt;dbl&gt;&lt;dbl&gt; . 1 | -1 | . 2 | -2 | . 3 | -3 | . 4 | -4 | . NA | 77 | . 5 | -5 | . 6 | -6 | . 7 | -7 | . is.na() . tibble(x,y) %&gt;% filter(x&gt;3&amp;x&lt;7) . A tibble: 3 × 2 xy . &lt;dbl&gt;&lt;dbl&gt; . 4 | -4 | . 5 | -5 | . 6 | -6 | . tibble(x,y) %&gt;% filter(x&lt;3|x&gt;7) . A tibble: 2 × 2 xy . &lt;dbl&gt;&lt;dbl&gt; . 1 | -1 | . 2 | -2 | . NA는 실수가 아니기에 그냥 사라져 버린다. | . 조금 억울한데? | . is.na를 사용하면 NA가 TRUE로 처리된다. | . x . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | &lt;NA&gt; | 5 | 6 | 7 | &lt;/ol&gt; is.na(x) . &lt;ol class=list-inline&gt;FALSE | FALSE | FALSE | FALSE | TRUE | FALSE | FALSE | FALSE | &lt;/ol&gt; tibble(x,y) %&gt;% filter(is.na(x) | (x&gt;3&amp;x&lt;7)) . A tibble: 4 × 2 xy . &lt;dbl&gt;&lt;dbl&gt; . 4 | -4 | . NA | 77 | . 5 | -5 | . 6 | -6 | . Application . install.packages(&quot;nycflights13&quot;) . package &#39;nycflights13&#39; successfully unpacked and MD5 sums checked The downloaded binary packages are in C: Users user AppData Local Temp Rtmp2LjT0v downloaded_packages . library(nycflights13) . df = flights df . A tibble: 336776 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 555 | 600 | -5 | 913 | 854 | 19 | B6 | 507 | N516JB | EWR | FLL | 158 | 1065 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 557 | 600 | -3 | 709 | 723 | -14 | EV | 5708 | N829AS | LGA | IAD | 53 | 229 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 557 | 600 | -3 | 838 | 846 | -8 | B6 | 79 | N593JB | JFK | MCO | 140 | 944 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 753 | 745 | 8 | AA | 301 | N3ALAA | LGA | ORD | 138 | 733 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 849 | 851 | -2 | B6 | 49 | N793JB | JFK | PBI | 149 | 1028 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 853 | 856 | -3 | B6 | 71 | N657JB | JFK | TPA | 158 | 1005 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 924 | 917 | 7 | UA | 194 | N29129 | JFK | LAX | 345 | 2475 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 923 | 937 | -14 | UA | 1124 | N53441 | EWR | SFO | 361 | 2565 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 559 | 600 | -1 | 941 | 910 | 31 | AA | 707 | N3DUAA | LGA | DFW | 257 | 1389 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 559 | 559 | 0 | 702 | 706 | -4 | B6 | 1806 | N708JB | JFK | BOS | 44 | 187 | 5 | 59 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 559 | 600 | -1 | 854 | 902 | -8 | UA | 1187 | N76515 | EWR | LAS | 337 | 2227 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 600 | 600 | 0 | 851 | 858 | -7 | B6 | 371 | N595JB | LGA | FLL | 152 | 1076 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 600 | 600 | 0 | 837 | 825 | 12 | MQ | 4650 | N542MQ | LGA | ATL | 134 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 601 | 600 | 1 | 844 | 850 | -6 | B6 | 343 | N644JB | EWR | PBI | 147 | 1023 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 602 | 610 | -8 | 812 | 820 | -8 | DL | 1919 | N971DL | LGA | MSP | 170 | 1020 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 602 | 605 | -3 | 821 | 805 | 16 | MQ | 4401 | N730MQ | LGA | DTW | 105 | 502 | 6 | 5 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 606 | 610 | -4 | 858 | 910 | -12 | AA | 1895 | N633AA | EWR | MIA | 152 | 1085 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 606 | 610 | -4 | 837 | 845 | -8 | DL | 1743 | N3739P | JFK | ATL | 128 | 760 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 607 | 607 | 0 | 858 | 915 | -17 | UA | 1077 | N53442 | EWR | MIA | 157 | 1085 | 6 | 7 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 608 | 600 | 8 | 807 | 735 | 32 | MQ | 3768 | N9EAMQ | EWR | ORD | 139 | 719 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 611 | 600 | 11 | 945 | 931 | 14 | UA | 303 | N532UA | JFK | SFO | 366 | 2586 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 613 | 610 | 3 | 925 | 921 | 4 | B6 | 135 | N635JB | JFK | RSW | 175 | 1074 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 615 | 615 | 0 | 1039 | 1100 | -21 | B6 | 709 | N794JB | JFK | SJU | 182 | 1598 | 6 | 15 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 615 | 615 | 0 | 833 | 842 | -9 | DL | 575 | N326NB | EWR | ATL | 120 | 746 | 6 | 15 | 2013-01-01 06:00:00 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 9 | 30 | 2123 | 2125 | -2 | 2223 | 2247 | -24 | EV | 5489 | N712EV | LGA | CHO | 45 | 305 | 21 | 25 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2127 | 2129 | -2 | 2314 | 2323 | -9 | EV | 3833 | N16546 | EWR | CLT | 72 | 529 | 21 | 29 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2128 | 2130 | -2 | 2328 | 2359 | -31 | B6 | 97 | N807JB | JFK | DEN | 213 | 1626 | 21 | 30 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2129 | 2059 | 30 | 2230 | 2232 | -2 | EV | 5048 | N751EV | LGA | RIC | 45 | 292 | 20 | 59 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2131 | 2140 | -9 | 2225 | 2255 | -30 | MQ | 3621 | N807MQ | JFK | DCA | 36 | 213 | 21 | 40 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2140 | 2140 | 0 | 10 | 40 | -30 | AA | 185 | N335AA | JFK | LAX | 298 | 2475 | 21 | 40 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2142 | 2129 | 13 | 2250 | 2239 | 11 | EV | 4509 | N12957 | EWR | PWM | 47 | 284 | 21 | 29 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2145 | 2145 | 0 | 115 | 140 | -25 | B6 | 1103 | N633JB | JFK | SJU | 192 | 1598 | 21 | 45 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2147 | 2137 | 10 | 30 | 27 | 3 | B6 | 1371 | N627JB | LGA | FLL | 139 | 1076 | 21 | 37 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2149 | 2156 | -7 | 2245 | 2308 | -23 | UA | 523 | N813UA | EWR | BOS | 37 | 200 | 21 | 56 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2150 | 2159 | -9 | 2250 | 2306 | -16 | EV | 3842 | N10575 | EWR | MHT | 39 | 209 | 21 | 59 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2159 | 1845 | 194 | 2344 | 2030 | 194 | 9E | 3320 | N906XJ | JFK | BUF | 50 | 301 | 18 | 45 | 2013-09-30 18:00:00 | . 2013 | 9 | 30 | 2203 | 2205 | -2 | 2339 | 2331 | 8 | EV | 5311 | N722EV | LGA | BGR | 61 | 378 | 22 | 5 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2207 | 2140 | 27 | 2257 | 2250 | 7 | MQ | 3660 | N532MQ | LGA | BNA | 97 | 764 | 21 | 40 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2211 | 2059 | 72 | 2339 | 2242 | 57 | EV | 4672 | N12145 | EWR | STL | 120 | 872 | 20 | 59 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2231 | 2245 | -14 | 2335 | 2356 | -21 | B6 | 108 | N193JB | JFK | PWM | 48 | 273 | 22 | 45 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2233 | 2113 | 80 | 112 | 30 | 42 | UA | 471 | N578UA | EWR | SFO | 318 | 2565 | 21 | 13 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2235 | 2001 | 154 | 59 | 2249 | 130 | B6 | 1083 | N804JB | JFK | MCO | 123 | 944 | 20 | 1 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2237 | 2245 | -8 | 2345 | 2353 | -8 | B6 | 234 | N318JB | JFK | BTV | 43 | 266 | 22 | 45 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2240 | 2245 | -5 | 2334 | 2351 | -17 | B6 | 1816 | N354JB | JFK | SYR | 41 | 209 | 22 | 45 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2240 | 2250 | -10 | 2347 | 7 | -20 | B6 | 2002 | N281JB | JFK | BUF | 52 | 301 | 22 | 50 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2241 | 2246 | -5 | 2345 | 1 | -16 | B6 | 486 | N346JB | JFK | ROC | 47 | 264 | 22 | 46 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2307 | 2255 | 12 | 2359 | 2358 | 1 | B6 | 718 | N565JB | JFK | BOS | 33 | 187 | 22 | 55 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2349 | 2359 | -10 | 325 | 350 | -25 | B6 | 745 | N516JB | JFK | PSE | 196 | 1617 | 23 | 59 | 2013-09-30 23:00:00 | . 2013 | 9 | 30 | NA | 1842 | NA | NA | 2019 | NA | EV | 5274 | N740EV | LGA | BNA | NA | 764 | 18 | 42 | 2013-09-30 18:00:00 | . 2013 | 9 | 30 | NA | 1455 | NA | NA | 1634 | NA | 9E | 3393 | NA | JFK | DCA | NA | 213 | 14 | 55 | 2013-09-30 14:00:00 | . 2013 | 9 | 30 | NA | 2200 | NA | NA | 2312 | NA | 9E | 3525 | NA | LGA | SYR | NA | 198 | 22 | 0 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | NA | 1210 | NA | NA | 1330 | NA | MQ | 3461 | N535MQ | LGA | BNA | NA | 764 | 12 | 10 | 2013-09-30 12:00:00 | . 2013 | 9 | 30 | NA | 1159 | NA | NA | 1344 | NA | MQ | 3572 | N511MQ | LGA | CLE | NA | 419 | 11 | 59 | 2013-09-30 11:00:00 | . 2013 | 9 | 30 | NA | 840 | NA | NA | 1020 | NA | MQ | 3531 | N839MQ | LGA | RDU | NA | 431 | 8 | 40 | 2013-09-30 08:00:00 | . 1&#50900; 1&#51068;&#50640; &#52636;&#48156;&#54616;&#45716; &#54637;&#44277;&#54200;&#51012; &#49440;&#53469;&#54616;&#44256; &#49910;&#45796;. . df %&gt;% filter(month==1&amp;day==1) . A tibble: 842 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 555 | 600 | -5 | 913 | 854 | 19 | B6 | 507 | N516JB | EWR | FLL | 158 | 1065 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 557 | 600 | -3 | 709 | 723 | -14 | EV | 5708 | N829AS | LGA | IAD | 53 | 229 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 557 | 600 | -3 | 838 | 846 | -8 | B6 | 79 | N593JB | JFK | MCO | 140 | 944 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 753 | 745 | 8 | AA | 301 | N3ALAA | LGA | ORD | 138 | 733 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 849 | 851 | -2 | B6 | 49 | N793JB | JFK | PBI | 149 | 1028 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 853 | 856 | -3 | B6 | 71 | N657JB | JFK | TPA | 158 | 1005 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 924 | 917 | 7 | UA | 194 | N29129 | JFK | LAX | 345 | 2475 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 923 | 937 | -14 | UA | 1124 | N53441 | EWR | SFO | 361 | 2565 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 559 | 600 | -1 | 941 | 910 | 31 | AA | 707 | N3DUAA | LGA | DFW | 257 | 1389 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 559 | 559 | 0 | 702 | 706 | -4 | B6 | 1806 | N708JB | JFK | BOS | 44 | 187 | 5 | 59 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 559 | 600 | -1 | 854 | 902 | -8 | UA | 1187 | N76515 | EWR | LAS | 337 | 2227 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 600 | 600 | 0 | 851 | 858 | -7 | B6 | 371 | N595JB | LGA | FLL | 152 | 1076 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 600 | 600 | 0 | 837 | 825 | 12 | MQ | 4650 | N542MQ | LGA | ATL | 134 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 601 | 600 | 1 | 844 | 850 | -6 | B6 | 343 | N644JB | EWR | PBI | 147 | 1023 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 602 | 610 | -8 | 812 | 820 | -8 | DL | 1919 | N971DL | LGA | MSP | 170 | 1020 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 602 | 605 | -3 | 821 | 805 | 16 | MQ | 4401 | N730MQ | LGA | DTW | 105 | 502 | 6 | 5 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 606 | 610 | -4 | 858 | 910 | -12 | AA | 1895 | N633AA | EWR | MIA | 152 | 1085 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 606 | 610 | -4 | 837 | 845 | -8 | DL | 1743 | N3739P | JFK | ATL | 128 | 760 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 607 | 607 | 0 | 858 | 915 | -17 | UA | 1077 | N53442 | EWR | MIA | 157 | 1085 | 6 | 7 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 608 | 600 | 8 | 807 | 735 | 32 | MQ | 3768 | N9EAMQ | EWR | ORD | 139 | 719 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 611 | 600 | 11 | 945 | 931 | 14 | UA | 303 | N532UA | JFK | SFO | 366 | 2586 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 613 | 610 | 3 | 925 | 921 | 4 | B6 | 135 | N635JB | JFK | RSW | 175 | 1074 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 615 | 615 | 0 | 1039 | 1100 | -21 | B6 | 709 | N794JB | JFK | SJU | 182 | 1598 | 6 | 15 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 615 | 615 | 0 | 833 | 842 | -9 | DL | 575 | N326NB | EWR | ATL | 120 | 746 | 6 | 15 | 2013-01-01 06:00:00 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 1 | 1 | 2140 | 2135 | 5 | 210 | 224 | -14 | B6 | 701 | N284JB | JFK | SJU | 189 | 1598 | 21 | 35 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2157 | 2155 | 2 | 43 | 41 | 2 | B6 | 43 | N537JB | JFK | MCO | 140 | 944 | 21 | 55 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2158 | 2200 | -2 | 2254 | 2307 | -13 | EV | 4103 | N14998 | EWR | BWI | 36 | 169 | 22 | 0 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2205 | 1720 | 285 | 46 | 2040 | 246 | AA | 1999 | N5DNAA | EWR | MIA | 146 | 1085 | 17 | 20 | 2013-01-01 17:00:00 | . 2013 | 1 | 1 | 2209 | 2145 | 24 | 58 | 37 | 21 | B6 | 35 | N608JB | JFK | PBI | 143 | 1028 | 21 | 45 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2209 | 2155 | 14 | 2400 | 2337 | 23 | B6 | 1109 | N216JB | JFK | RDU | 86 | 427 | 21 | 55 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2211 | 2145 | 26 | 2339 | 2311 | 28 | B6 | 104 | N228JB | JFK | BUF | 64 | 301 | 21 | 45 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2217 | 2229 | -12 | 249 | 315 | -26 | B6 | 713 | N547JB | JFK | SJU | 191 | 1598 | 22 | 29 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2217 | 2130 | 47 | 140 | 27 | 73 | B6 | 21 | N516JB | JFK | TPA | 163 | 1005 | 21 | 30 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2221 | 2000 | 141 | 2331 | 2124 | 127 | EV | 4462 | N13566 | EWR | BUF | 56 | 282 | 20 | 0 | 2013-01-01 20:00:00 | . 2013 | 1 | 1 | 2224 | 2200 | 24 | 2324 | 2316 | 8 | EV | 4206 | N16561 | EWR | PWM | 47 | 284 | 22 | 0 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2229 | 2159 | 30 | 149 | 100 | 49 | B6 | 11 | N531JB | JFK | FLL | 153 | 1069 | 21 | 59 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2240 | 2245 | -5 | 2340 | 2356 | -16 | B6 | 608 | N279JB | JFK | PWM | 44 | 273 | 22 | 45 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2250 | 2255 | -5 | 2352 | 2359 | -7 | B6 | 1018 | N521JB | JFK | BOS | 37 | 187 | 22 | 55 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2302 | 2200 | 62 | 2342 | 2253 | 49 | EV | 4276 | N13903 | EWR | BDL | 24 | 116 | 22 | 0 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2306 | 2245 | 21 | 28 | 5 | 23 | B6 | 30 | N281JB | JFK | ROC | 59 | 264 | 22 | 45 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2307 | 2245 | 22 | 32 | 2357 | 35 | B6 | 128 | N178JB | JFK | BTV | 59 | 266 | 22 | 45 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2310 | 2255 | 15 | 24 | 15 | 9 | B6 | 112 | N646JB | JFK | BUF | 57 | 301 | 22 | 55 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2312 | 2000 | 192 | 21 | 2110 | 191 | EV | 4312 | N13958 | EWR | DCA | 44 | 199 | 20 | 0 | 2013-01-01 20:00:00 | . 2013 | 1 | 1 | 2323 | 2200 | 83 | 22 | 2313 | 69 | EV | 4257 | N13538 | EWR | BTV | 44 | 266 | 22 | 0 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2326 | 2130 | 116 | 131 | 18 | 73 | B6 | 199 | N594JB | JFK | LAS | 290 | 2248 | 21 | 30 | 2013-01-01 21:00:00 | . 2013 | 1 | 1 | 2327 | 2250 | 37 | 32 | 2359 | 33 | B6 | 22 | N639JB | JFK | SYR | 45 | 209 | 22 | 50 | 2013-01-01 22:00:00 | . 2013 | 1 | 1 | 2343 | 1724 | 379 | 314 | 1938 | 456 | EV | 4321 | N21197 | EWR | MCI | 222 | 1092 | 17 | 24 | 2013-01-01 17:00:00 | . 2013 | 1 | 1 | 2353 | 2359 | -6 | 425 | 445 | -20 | B6 | 739 | N591JB | JFK | PSE | 195 | 1617 | 23 | 59 | 2013-01-01 23:00:00 | . 2013 | 1 | 1 | 2353 | 2359 | -6 | 418 | 442 | -24 | B6 | 707 | N794JB | JFK | SJU | 185 | 1598 | 23 | 59 | 2013-01-01 23:00:00 | . 2013 | 1 | 1 | 2356 | 2359 | -3 | 425 | 437 | -12 | B6 | 727 | N588JB | JFK | BQN | 186 | 1576 | 23 | 59 | 2013-01-01 23:00:00 | . 2013 | 1 | 1 | NA | 1630 | NA | NA | 1815 | NA | EV | 4308 | N18120 | EWR | RDU | NA | 416 | 16 | 30 | 2013-01-01 16:00:00 | . 2013 | 1 | 1 | NA | 1935 | NA | NA | 2240 | NA | AA | 791 | N3EHAA | LGA | DFW | NA | 1389 | 19 | 35 | 2013-01-01 19:00:00 | . 2013 | 1 | 1 | NA | 1500 | NA | NA | 1825 | NA | AA | 1925 | N3EVAA | LGA | MIA | NA | 1096 | 15 | 0 | 2013-01-01 15:00:00 | . 2013 | 1 | 1 | NA | 600 | NA | NA | 901 | NA | B6 | 125 | N618JB | JFK | FLL | NA | 1069 | 6 | 0 | 2013-01-01 06:00:00 | . 11&#50900; &#46608;&#45716; 12&#50900;&#50640; &#52636;&#48156;&#54616;&#45716; &#54637;&#44277;&#54200;&#51012; &#49440;&#53469;&#54616;&#44256; &#49910;&#45796;. . df %&gt;% filter(month==11|month==12) . A tibble: 55403 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 11 | 1 | 5 | 2359 | 6 | 352 | 345 | 7 | B6 | 745 | N568JB | JFK | PSE | 205 | 1617 | 23 | 59 | 2013-11-01 23:00:00 | . 2013 | 11 | 1 | 35 | 2250 | 105 | 123 | 2356 | 87 | B6 | 1816 | N353JB | JFK | SYR | 36 | 209 | 22 | 50 | 2013-11-01 22:00:00 | . 2013 | 11 | 1 | 455 | 500 | -5 | 641 | 651 | -10 | US | 1895 | N192UW | EWR | CLT | 88 | 529 | 5 | 0 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 539 | 545 | -6 | 856 | 827 | 29 | UA | 1714 | N38727 | LGA | IAH | 229 | 1416 | 5 | 45 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 542 | 545 | -3 | 831 | 855 | -24 | AA | 2243 | N5CLAA | JFK | MIA | 147 | 1089 | 5 | 45 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 549 | 600 | -11 | 912 | 923 | -11 | UA | 303 | N595UA | JFK | SFO | 359 | 2586 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 550 | 600 | -10 | 705 | 659 | 6 | US | 2167 | N748UW | LGA | DCA | 57 | 214 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 554 | 600 | -6 | 659 | 701 | -2 | US | 2134 | N742PS | LGA | BOS | 40 | 184 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 554 | 600 | -6 | 826 | 827 | -1 | DL | 563 | N912DE | LGA | ATL | 126 | 762 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 554 | 600 | -6 | 749 | 751 | -2 | DL | 731 | N315NB | LGA | DTW | 93 | 502 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 555 | 600 | -5 | 847 | 854 | -7 | B6 | 605 | N640JB | EWR | FLL | 149 | 1065 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 555 | 600 | -5 | 839 | 846 | -7 | B6 | 583 | N661JB | JFK | MCO | 136 | 944 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 555 | 600 | -5 | 929 | 943 | -14 | B6 | 1403 | N746JB | JFK | SJU | 196 | 1598 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 556 | 600 | -4 | 834 | 851 | -17 | UA | 407 | N834UA | EWR | TPA | 142 | 997 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 727 | 730 | -3 | UA | 279 | N459UA | EWR | ORD | 118 | 719 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 650 | 658 | -8 | US | 1909 | N950UW | LGA | PHL | 38 | 96 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 914 | 905 | 9 | AA | 1175 | N3GHAA | LGA | MIA | 155 | 1096 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 720 | 715 | 5 | WN | 464 | N390SW | EWR | MDW | 117 | 711 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 559 | 600 | -1 | 756 | 730 | 26 | AA | 301 | N4YHAA | LGA | ORD | 119 | 733 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 600 | 600 | 0 | 709 | 716 | -7 | EV | 5716 | N820AS | JFK | IAD | 49 | 228 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 600 | 600 | 0 | 725 | 721 | 4 | UA | 1198 | N23707 | LGA | ORD | 121 | 733 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 601 | 600 | 1 | 853 | 856 | -3 | B6 | 371 | N570JB | LGA | FLL | 150 | 1076 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 601 | 610 | -9 | 803 | 813 | -10 | DL | 1919 | N922DL | LGA | MSP | 153 | 1020 | 6 | 10 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 602 | 600 | 2 | 843 | 815 | 28 | FL | 345 | N353AT | LGA | ATL | 131 | 762 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 603 | 600 | 3 | 717 | 711 | 6 | EV | 4533 | N11109 | EWR | BUF | 53 | 282 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 604 | 610 | -6 | 855 | 855 | 0 | AA | 1103 | N3FTAA | LGA | DFW | 205 | 1389 | 6 | 10 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 606 | 615 | -9 | 746 | 750 | -4 | MQ | 3525 | N834MQ | LGA | RDU | 74 | 431 | 6 | 15 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 606 | 615 | -9 | 807 | 817 | -10 | US | 1899 | N199UW | JFK | CLT | 93 | 541 | 6 | 15 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 606 | 610 | -4 | 752 | 745 | 7 | WN | 2609 | N440LV | LGA | STL | 142 | 888 | 6 | 10 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 607 | 611 | -4 | 857 | 912 | -15 | B6 | 601 | N597JB | JFK | FLL | 149 | 1069 | 6 | 11 | 2013-11-01 06:00:00 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 12 | 31 | 2155 | 2039 | 76 | 253 | 2355 | NA | B6 | 1205 | N627JB | JFK | PDX | NA | 2454 | 20 | 39 | 2013-12-31 20:00:00 | . 2013 | 12 | 31 | 2155 | 2150 | 5 | 110 | 51 | 19 | B6 | 1901 | N729JB | JFK | FLL | 164 | 1069 | 21 | 50 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2159 | 2155 | 4 | 55 | 46 | 9 | B6 | 2053 | N593JB | JFK | PBI | 155 | 1028 | 21 | 55 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2206 | 2110 | 56 | 44 | 2339 | 65 | B6 | 775 | N184JB | JFK | MSY | 195 | 1182 | 21 | 10 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2211 | 2159 | 12 | 100 | 45 | 15 | B6 | 1183 | N715JB | JFK | MCO | 148 | 944 | 21 | 59 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2218 | 2219 | -1 | 315 | 304 | 11 | B6 | 1203 | N625JB | JFK | SJU | 202 | 1598 | 22 | 19 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2235 | 2245 | -10 | 2351 | 2355 | -4 | B6 | 234 | N355JB | JFK | BTV | 49 | 266 | 22 | 45 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2245 | 2250 | -5 | 2359 | 2356 | 3 | B6 | 1816 | N318JB | JFK | SYR | 51 | 209 | 22 | 50 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2310 | 2255 | 15 | 7 | 2356 | 11 | B6 | 718 | N279JB | JFK | BOS | 40 | 187 | 22 | 55 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2321 | 2250 | 31 | 46 | 8 | 38 | B6 | 2002 | N179JB | JFK | BUF | 66 | 301 | 22 | 50 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2328 | 2330 | -2 | 412 | 409 | 3 | B6 | 1389 | N651JB | EWR | SJU | 198 | 1608 | 23 | 30 | 2013-12-31 23:00:00 | . 2013 | 12 | 31 | 2332 | 2245 | 47 | 58 | 3 | 55 | B6 | 486 | N334JB | JFK | ROC | 60 | 264 | 22 | 45 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2355 | 2359 | -4 | 430 | 440 | -10 | B6 | 1503 | N509JB | JFK | SJU | 195 | 1598 | 23 | 59 | 2013-12-31 23:00:00 | . 2013 | 12 | 31 | 2356 | 2359 | -3 | 436 | 445 | -9 | B6 | 745 | N665JB | JFK | PSE | 200 | 1617 | 23 | 59 | 2013-12-31 23:00:00 | . 2013 | 12 | 31 | NA | 1520 | NA | NA | 1705 | NA | AA | 341 | N568AA | LGA | ORD | NA | 733 | 15 | 20 | 2013-12-31 15:00:00 | . 2013 | 12 | 31 | NA | 2025 | NA | NA | 2205 | NA | AA | 371 | N482AA | LGA | ORD | NA | 733 | 20 | 25 | 2013-12-31 20:00:00 | . 2013 | 12 | 31 | NA | 1932 | NA | NA | 2305 | NA | B6 | 161 | N516JB | JFK | SMF | NA | 2521 | 19 | 32 | 2013-12-31 19:00:00 | . 2013 | 12 | 31 | NA | 1505 | NA | NA | 1725 | NA | EV | 4181 | N24103 | EWR | MCI | NA | 1092 | 15 | 5 | 2013-12-31 15:00:00 | . 2013 | 12 | 31 | NA | 1000 | NA | NA | 1252 | NA | UA | 1124 | NA | EWR | EGE | NA | 1725 | 10 | 0 | 2013-12-31 10:00:00 | . 2013 | 12 | 31 | NA | 840 | NA | NA | 1205 | NA | UA | 1151 | NA | EWR | SEA | NA | 2402 | 8 | 40 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 754 | NA | NA | 1118 | NA | UA | 1455 | NA | EWR | LAX | NA | 2454 | 7 | 54 | 2013-12-31 07:00:00 | . 2013 | 12 | 31 | NA | 2000 | NA | NA | 2146 | NA | UA | 1482 | NA | EWR | ORD | NA | 719 | 20 | 0 | 2013-12-31 20:00:00 | . 2013 | 12 | 31 | NA | 1500 | NA | NA | 1817 | NA | UA | 1483 | NA | EWR | AUS | NA | 1504 | 15 | 0 | 2013-12-31 15:00:00 | . 2013 | 12 | 31 | NA | 1430 | NA | NA | 1750 | NA | UA | 1493 | NA | EWR | LAX | NA | 2454 | 14 | 30 | 2013-12-31 14:00:00 | . 2013 | 12 | 31 | NA | 855 | NA | NA | 1142 | NA | UA | 1506 | NA | EWR | JAC | NA | 1874 | 8 | 55 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 705 | NA | NA | 931 | NA | UA | 1729 | NA | EWR | DEN | NA | 1605 | 7 | 5 | 2013-12-31 07:00:00 | . 2013 | 12 | 31 | NA | 825 | NA | NA | 1029 | NA | US | 1831 | NA | JFK | CLT | NA | 541 | 8 | 25 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 1615 | NA | NA | 1800 | NA | MQ | 3301 | N844MQ | LGA | RDU | NA | 431 | 16 | 15 | 2013-12-31 16:00:00 | . 2013 | 12 | 31 | NA | 600 | NA | NA | 735 | NA | UA | 219 | NA | EWR | ORD | NA | 719 | 6 | 0 | 2013-12-31 06:00:00 | . 2013 | 12 | 31 | NA | 830 | NA | NA | 1154 | NA | UA | 443 | NA | JFK | LAX | NA | 2475 | 8 | 30 | 2013-12-31 08:00:00 | . df %&gt;% filter(month %in% c(11,12)) . A tibble: 55403 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 11 | 1 | 5 | 2359 | 6 | 352 | 345 | 7 | B6 | 745 | N568JB | JFK | PSE | 205 | 1617 | 23 | 59 | 2013-11-01 23:00:00 | . 2013 | 11 | 1 | 35 | 2250 | 105 | 123 | 2356 | 87 | B6 | 1816 | N353JB | JFK | SYR | 36 | 209 | 22 | 50 | 2013-11-01 22:00:00 | . 2013 | 11 | 1 | 455 | 500 | -5 | 641 | 651 | -10 | US | 1895 | N192UW | EWR | CLT | 88 | 529 | 5 | 0 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 539 | 545 | -6 | 856 | 827 | 29 | UA | 1714 | N38727 | LGA | IAH | 229 | 1416 | 5 | 45 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 542 | 545 | -3 | 831 | 855 | -24 | AA | 2243 | N5CLAA | JFK | MIA | 147 | 1089 | 5 | 45 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 549 | 600 | -11 | 912 | 923 | -11 | UA | 303 | N595UA | JFK | SFO | 359 | 2586 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 550 | 600 | -10 | 705 | 659 | 6 | US | 2167 | N748UW | LGA | DCA | 57 | 214 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 554 | 600 | -6 | 659 | 701 | -2 | US | 2134 | N742PS | LGA | BOS | 40 | 184 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 554 | 600 | -6 | 826 | 827 | -1 | DL | 563 | N912DE | LGA | ATL | 126 | 762 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 554 | 600 | -6 | 749 | 751 | -2 | DL | 731 | N315NB | LGA | DTW | 93 | 502 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 555 | 600 | -5 | 847 | 854 | -7 | B6 | 605 | N640JB | EWR | FLL | 149 | 1065 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 555 | 600 | -5 | 839 | 846 | -7 | B6 | 583 | N661JB | JFK | MCO | 136 | 944 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 555 | 600 | -5 | 929 | 943 | -14 | B6 | 1403 | N746JB | JFK | SJU | 196 | 1598 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 556 | 600 | -4 | 834 | 851 | -17 | UA | 407 | N834UA | EWR | TPA | 142 | 997 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 727 | 730 | -3 | UA | 279 | N459UA | EWR | ORD | 118 | 719 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 650 | 658 | -8 | US | 1909 | N950UW | LGA | PHL | 38 | 96 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 914 | 905 | 9 | AA | 1175 | N3GHAA | LGA | MIA | 155 | 1096 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 558 | 600 | -2 | 720 | 715 | 5 | WN | 464 | N390SW | EWR | MDW | 117 | 711 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 559 | 600 | -1 | 756 | 730 | 26 | AA | 301 | N4YHAA | LGA | ORD | 119 | 733 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 600 | 600 | 0 | 709 | 716 | -7 | EV | 5716 | N820AS | JFK | IAD | 49 | 228 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 600 | 600 | 0 | 725 | 721 | 4 | UA | 1198 | N23707 | LGA | ORD | 121 | 733 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 601 | 600 | 1 | 853 | 856 | -3 | B6 | 371 | N570JB | LGA | FLL | 150 | 1076 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 601 | 610 | -9 | 803 | 813 | -10 | DL | 1919 | N922DL | LGA | MSP | 153 | 1020 | 6 | 10 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 602 | 600 | 2 | 843 | 815 | 28 | FL | 345 | N353AT | LGA | ATL | 131 | 762 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 603 | 600 | 3 | 717 | 711 | 6 | EV | 4533 | N11109 | EWR | BUF | 53 | 282 | 6 | 0 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 604 | 610 | -6 | 855 | 855 | 0 | AA | 1103 | N3FTAA | LGA | DFW | 205 | 1389 | 6 | 10 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 606 | 615 | -9 | 746 | 750 | -4 | MQ | 3525 | N834MQ | LGA | RDU | 74 | 431 | 6 | 15 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 606 | 615 | -9 | 807 | 817 | -10 | US | 1899 | N199UW | JFK | CLT | 93 | 541 | 6 | 15 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 606 | 610 | -4 | 752 | 745 | 7 | WN | 2609 | N440LV | LGA | STL | 142 | 888 | 6 | 10 | 2013-11-01 06:00:00 | . 2013 | 11 | 1 | 607 | 611 | -4 | 857 | 912 | -15 | B6 | 601 | N597JB | JFK | FLL | 149 | 1069 | 6 | 11 | 2013-11-01 06:00:00 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 12 | 31 | 2155 | 2039 | 76 | 253 | 2355 | NA | B6 | 1205 | N627JB | JFK | PDX | NA | 2454 | 20 | 39 | 2013-12-31 20:00:00 | . 2013 | 12 | 31 | 2155 | 2150 | 5 | 110 | 51 | 19 | B6 | 1901 | N729JB | JFK | FLL | 164 | 1069 | 21 | 50 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2159 | 2155 | 4 | 55 | 46 | 9 | B6 | 2053 | N593JB | JFK | PBI | 155 | 1028 | 21 | 55 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2206 | 2110 | 56 | 44 | 2339 | 65 | B6 | 775 | N184JB | JFK | MSY | 195 | 1182 | 21 | 10 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2211 | 2159 | 12 | 100 | 45 | 15 | B6 | 1183 | N715JB | JFK | MCO | 148 | 944 | 21 | 59 | 2013-12-31 21:00:00 | . 2013 | 12 | 31 | 2218 | 2219 | -1 | 315 | 304 | 11 | B6 | 1203 | N625JB | JFK | SJU | 202 | 1598 | 22 | 19 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2235 | 2245 | -10 | 2351 | 2355 | -4 | B6 | 234 | N355JB | JFK | BTV | 49 | 266 | 22 | 45 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2245 | 2250 | -5 | 2359 | 2356 | 3 | B6 | 1816 | N318JB | JFK | SYR | 51 | 209 | 22 | 50 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2310 | 2255 | 15 | 7 | 2356 | 11 | B6 | 718 | N279JB | JFK | BOS | 40 | 187 | 22 | 55 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2321 | 2250 | 31 | 46 | 8 | 38 | B6 | 2002 | N179JB | JFK | BUF | 66 | 301 | 22 | 50 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2328 | 2330 | -2 | 412 | 409 | 3 | B6 | 1389 | N651JB | EWR | SJU | 198 | 1608 | 23 | 30 | 2013-12-31 23:00:00 | . 2013 | 12 | 31 | 2332 | 2245 | 47 | 58 | 3 | 55 | B6 | 486 | N334JB | JFK | ROC | 60 | 264 | 22 | 45 | 2013-12-31 22:00:00 | . 2013 | 12 | 31 | 2355 | 2359 | -4 | 430 | 440 | -10 | B6 | 1503 | N509JB | JFK | SJU | 195 | 1598 | 23 | 59 | 2013-12-31 23:00:00 | . 2013 | 12 | 31 | 2356 | 2359 | -3 | 436 | 445 | -9 | B6 | 745 | N665JB | JFK | PSE | 200 | 1617 | 23 | 59 | 2013-12-31 23:00:00 | . 2013 | 12 | 31 | NA | 1520 | NA | NA | 1705 | NA | AA | 341 | N568AA | LGA | ORD | NA | 733 | 15 | 20 | 2013-12-31 15:00:00 | . 2013 | 12 | 31 | NA | 2025 | NA | NA | 2205 | NA | AA | 371 | N482AA | LGA | ORD | NA | 733 | 20 | 25 | 2013-12-31 20:00:00 | . 2013 | 12 | 31 | NA | 1932 | NA | NA | 2305 | NA | B6 | 161 | N516JB | JFK | SMF | NA | 2521 | 19 | 32 | 2013-12-31 19:00:00 | . 2013 | 12 | 31 | NA | 1505 | NA | NA | 1725 | NA | EV | 4181 | N24103 | EWR | MCI | NA | 1092 | 15 | 5 | 2013-12-31 15:00:00 | . 2013 | 12 | 31 | NA | 1000 | NA | NA | 1252 | NA | UA | 1124 | NA | EWR | EGE | NA | 1725 | 10 | 0 | 2013-12-31 10:00:00 | . 2013 | 12 | 31 | NA | 840 | NA | NA | 1205 | NA | UA | 1151 | NA | EWR | SEA | NA | 2402 | 8 | 40 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 754 | NA | NA | 1118 | NA | UA | 1455 | NA | EWR | LAX | NA | 2454 | 7 | 54 | 2013-12-31 07:00:00 | . 2013 | 12 | 31 | NA | 2000 | NA | NA | 2146 | NA | UA | 1482 | NA | EWR | ORD | NA | 719 | 20 | 0 | 2013-12-31 20:00:00 | . 2013 | 12 | 31 | NA | 1500 | NA | NA | 1817 | NA | UA | 1483 | NA | EWR | AUS | NA | 1504 | 15 | 0 | 2013-12-31 15:00:00 | . 2013 | 12 | 31 | NA | 1430 | NA | NA | 1750 | NA | UA | 1493 | NA | EWR | LAX | NA | 2454 | 14 | 30 | 2013-12-31 14:00:00 | . 2013 | 12 | 31 | NA | 855 | NA | NA | 1142 | NA | UA | 1506 | NA | EWR | JAC | NA | 1874 | 8 | 55 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 705 | NA | NA | 931 | NA | UA | 1729 | NA | EWR | DEN | NA | 1605 | 7 | 5 | 2013-12-31 07:00:00 | . 2013 | 12 | 31 | NA | 825 | NA | NA | 1029 | NA | US | 1831 | NA | JFK | CLT | NA | 541 | 8 | 25 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 1615 | NA | NA | 1800 | NA | MQ | 3301 | N844MQ | LGA | RDU | NA | 431 | 16 | 15 | 2013-12-31 16:00:00 | . 2013 | 12 | 31 | NA | 600 | NA | NA | 735 | NA | UA | 219 | NA | EWR | ORD | NA | 719 | 6 | 0 | 2013-12-31 06:00:00 | . 2013 | 12 | 31 | NA | 830 | NA | NA | 1154 | NA | UA | 443 | NA | JFK | LAX | NA | 2475 | 8 | 30 | 2013-12-31 08:00:00 | . arr_delay&#44032; 120&#51060;&#54616;&#51060;&#44256; dep_delay&#44032; 120&#51060;&#54616;&#51064; &#54637;&#44260;&#54200;&#51012; &#49440;&#53469;&#54616;&#44256; &#49910;&#45796;. . df %&gt;% filter(arr_delay &lt;= 120 &amp; dep_delay &lt;= 120) . A tibble: 316050 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 555 | 600 | -5 | 913 | 854 | 19 | B6 | 507 | N516JB | EWR | FLL | 158 | 1065 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 557 | 600 | -3 | 709 | 723 | -14 | EV | 5708 | N829AS | LGA | IAD | 53 | 229 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 557 | 600 | -3 | 838 | 846 | -8 | B6 | 79 | N593JB | JFK | MCO | 140 | 944 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 753 | 745 | 8 | AA | 301 | N3ALAA | LGA | ORD | 138 | 733 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 849 | 851 | -2 | B6 | 49 | N793JB | JFK | PBI | 149 | 1028 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 853 | 856 | -3 | B6 | 71 | N657JB | JFK | TPA | 158 | 1005 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 924 | 917 | 7 | UA | 194 | N29129 | JFK | LAX | 345 | 2475 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 558 | 600 | -2 | 923 | 937 | -14 | UA | 1124 | N53441 | EWR | SFO | 361 | 2565 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 559 | 600 | -1 | 941 | 910 | 31 | AA | 707 | N3DUAA | LGA | DFW | 257 | 1389 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 559 | 559 | 0 | 702 | 706 | -4 | B6 | 1806 | N708JB | JFK | BOS | 44 | 187 | 5 | 59 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 559 | 600 | -1 | 854 | 902 | -8 | UA | 1187 | N76515 | EWR | LAS | 337 | 2227 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 600 | 600 | 0 | 851 | 858 | -7 | B6 | 371 | N595JB | LGA | FLL | 152 | 1076 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 600 | 600 | 0 | 837 | 825 | 12 | MQ | 4650 | N542MQ | LGA | ATL | 134 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 601 | 600 | 1 | 844 | 850 | -6 | B6 | 343 | N644JB | EWR | PBI | 147 | 1023 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 602 | 610 | -8 | 812 | 820 | -8 | DL | 1919 | N971DL | LGA | MSP | 170 | 1020 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 602 | 605 | -3 | 821 | 805 | 16 | MQ | 4401 | N730MQ | LGA | DTW | 105 | 502 | 6 | 5 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 606 | 610 | -4 | 858 | 910 | -12 | AA | 1895 | N633AA | EWR | MIA | 152 | 1085 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 606 | 610 | -4 | 837 | 845 | -8 | DL | 1743 | N3739P | JFK | ATL | 128 | 760 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 607 | 607 | 0 | 858 | 915 | -17 | UA | 1077 | N53442 | EWR | MIA | 157 | 1085 | 6 | 7 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 608 | 600 | 8 | 807 | 735 | 32 | MQ | 3768 | N9EAMQ | EWR | ORD | 139 | 719 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 611 | 600 | 11 | 945 | 931 | 14 | UA | 303 | N532UA | JFK | SFO | 366 | 2586 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 613 | 610 | 3 | 925 | 921 | 4 | B6 | 135 | N635JB | JFK | RSW | 175 | 1074 | 6 | 10 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 615 | 615 | 0 | 1039 | 1100 | -21 | B6 | 709 | N794JB | JFK | SJU | 182 | 1598 | 6 | 15 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 615 | 615 | 0 | 833 | 842 | -9 | DL | 575 | N326NB | EWR | ATL | 120 | 746 | 6 | 15 | 2013-01-01 06:00:00 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 9 | 30 | 2110 | 2055 | 15 | 51 | 2359 | 52 | B6 | 1205 | N517JB | JFK | PDX | 361 | 2454 | 20 | 55 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2114 | 2025 | 49 | 2304 | 2228 | 36 | EV | 4348 | N11184 | EWR | MSP | 145 | 1008 | 20 | 25 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2115 | 2110 | 5 | 2246 | 2255 | -9 | MQ | 3603 | N519MQ | LGA | DTW | 72 | 502 | 21 | 10 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2116 | 2124 | -8 | 2317 | 2337 | -20 | EV | 4682 | N14542 | EWR | SDF | 94 | 642 | 21 | 24 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2119 | 2005 | 74 | 2310 | 2212 | 58 | EV | 4321 | N17984 | EWR | MCI | 147 | 1092 | 20 | 5 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2119 | 2120 | -1 | 2330 | 2354 | -24 | B6 | 1677 | N358JB | JFK | JAX | 113 | 828 | 21 | 20 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2121 | 2100 | 21 | 2349 | 14 | -25 | DL | 2363 | N193DN | JFK | LAX | 296 | 2475 | 21 | 0 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2122 | 2127 | -5 | 2226 | 2237 | -11 | EV | 4372 | N14902 | EWR | DCA | 35 | 199 | 21 | 27 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2123 | 2125 | -2 | 2223 | 2247 | -24 | EV | 5489 | N712EV | LGA | CHO | 45 | 305 | 21 | 25 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2127 | 2129 | -2 | 2314 | 2323 | -9 | EV | 3833 | N16546 | EWR | CLT | 72 | 529 | 21 | 29 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2128 | 2130 | -2 | 2328 | 2359 | -31 | B6 | 97 | N807JB | JFK | DEN | 213 | 1626 | 21 | 30 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2129 | 2059 | 30 | 2230 | 2232 | -2 | EV | 5048 | N751EV | LGA | RIC | 45 | 292 | 20 | 59 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2131 | 2140 | -9 | 2225 | 2255 | -30 | MQ | 3621 | N807MQ | JFK | DCA | 36 | 213 | 21 | 40 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2140 | 2140 | 0 | 10 | 40 | -30 | AA | 185 | N335AA | JFK | LAX | 298 | 2475 | 21 | 40 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2142 | 2129 | 13 | 2250 | 2239 | 11 | EV | 4509 | N12957 | EWR | PWM | 47 | 284 | 21 | 29 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2145 | 2145 | 0 | 115 | 140 | -25 | B6 | 1103 | N633JB | JFK | SJU | 192 | 1598 | 21 | 45 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2147 | 2137 | 10 | 30 | 27 | 3 | B6 | 1371 | N627JB | LGA | FLL | 139 | 1076 | 21 | 37 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2149 | 2156 | -7 | 2245 | 2308 | -23 | UA | 523 | N813UA | EWR | BOS | 37 | 200 | 21 | 56 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2150 | 2159 | -9 | 2250 | 2306 | -16 | EV | 3842 | N10575 | EWR | MHT | 39 | 209 | 21 | 59 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2203 | 2205 | -2 | 2339 | 2331 | 8 | EV | 5311 | N722EV | LGA | BGR | 61 | 378 | 22 | 5 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2207 | 2140 | 27 | 2257 | 2250 | 7 | MQ | 3660 | N532MQ | LGA | BNA | 97 | 764 | 21 | 40 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2211 | 2059 | 72 | 2339 | 2242 | 57 | EV | 4672 | N12145 | EWR | STL | 120 | 872 | 20 | 59 | 2013-09-30 20:00:00 | . 2013 | 9 | 30 | 2231 | 2245 | -14 | 2335 | 2356 | -21 | B6 | 108 | N193JB | JFK | PWM | 48 | 273 | 22 | 45 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2233 | 2113 | 80 | 112 | 30 | 42 | UA | 471 | N578UA | EWR | SFO | 318 | 2565 | 21 | 13 | 2013-09-30 21:00:00 | . 2013 | 9 | 30 | 2237 | 2245 | -8 | 2345 | 2353 | -8 | B6 | 234 | N318JB | JFK | BTV | 43 | 266 | 22 | 45 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2240 | 2245 | -5 | 2334 | 2351 | -17 | B6 | 1816 | N354JB | JFK | SYR | 41 | 209 | 22 | 45 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2240 | 2250 | -10 | 2347 | 7 | -20 | B6 | 2002 | N281JB | JFK | BUF | 52 | 301 | 22 | 50 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2241 | 2246 | -5 | 2345 | 1 | -16 | B6 | 486 | N346JB | JFK | ROC | 47 | 264 | 22 | 46 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2307 | 2255 | 12 | 2359 | 2358 | 1 | B6 | 718 | N565JB | JFK | BOS | 33 | 187 | 22 | 55 | 2013-09-30 22:00:00 | . 2013 | 9 | 30 | 2349 | 2359 | -10 | 325 | 350 | -25 | B6 | 745 | N516JB | JFK | PSE | 196 | 1617 | 23 | 59 | 2013-09-30 23:00:00 | . &#54596;&#50836;&#54620; &#48320;&#49688;&#47564; &#45224;&#44592;&#44256; &#49910;&#45796;. . df %&gt;% colnames . &lt;ol class=list-inline&gt;&#39;year&#39; | &#39;month&#39; | &#39;day&#39; | &#39;dep_time&#39; | &#39;sched_dep_time&#39; | &#39;dep_delay&#39; | &#39;arr_time&#39; | &#39;sched_arr_time&#39; | &#39;arr_delay&#39; | &#39;carrier&#39; | &#39;flight&#39; | &#39;tailnum&#39; | &#39;origin&#39; | &#39;dest&#39; | &#39;air_time&#39; | &#39;distance&#39; | &#39;hour&#39; | &#39;minute&#39; | &#39;time_hour&#39; | &lt;/ol&gt; df %&gt;% names . &lt;ol class=list-inline&gt;&#39;year&#39; | &#39;month&#39; | &#39;day&#39; | &#39;dep_time&#39; | &#39;sched_dep_time&#39; | &#39;dep_delay&#39; | &#39;arr_time&#39; | &#39;sched_arr_time&#39; | &#39;arr_delay&#39; | &#39;carrier&#39; | &#39;flight&#39; | &#39;tailnum&#39; | &#39;origin&#39; | &#39;dest&#39; | &#39;air_time&#39; | &#39;distance&#39; | &#39;hour&#39; | &#39;minute&#39; | &#39;time_hour&#39; | &lt;/ol&gt; 아래 조건에 부합하는 변수만 남기자. | . - year~day는 포함 . - delay로 끝나는 변수 . - distance, air_time . df = df %&gt;% select(year:day , ends_with(&#39;delay&#39;), distance, air_time) df . A tibble: 336776 × 7 yearmonthdaydep_delayarr_delaydistanceair_time . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 2 | 11 | 1400 | 227 | . 2013 | 1 | 1 | 4 | 20 | 1416 | 227 | . 2013 | 1 | 1 | 2 | 33 | 1089 | 160 | . 2013 | 1 | 1 | -1 | -18 | 1576 | 183 | . 2013 | 1 | 1 | -6 | -25 | 762 | 116 | . 2013 | 1 | 1 | -4 | 12 | 719 | 150 | . 2013 | 1 | 1 | -5 | 19 | 1065 | 158 | . 2013 | 1 | 1 | -3 | -14 | 229 | 53 | . 2013 | 1 | 1 | -3 | -8 | 944 | 140 | . 2013 | 1 | 1 | -2 | 8 | 733 | 138 | . 2013 | 1 | 1 | -2 | -2 | 1028 | 149 | . 2013 | 1 | 1 | -2 | -3 | 1005 | 158 | . 2013 | 1 | 1 | -2 | 7 | 2475 | 345 | . 2013 | 1 | 1 | -2 | -14 | 2565 | 361 | . 2013 | 1 | 1 | -1 | 31 | 1389 | 257 | . 2013 | 1 | 1 | 0 | -4 | 187 | 44 | . 2013 | 1 | 1 | -1 | -8 | 2227 | 337 | . 2013 | 1 | 1 | 0 | -7 | 1076 | 152 | . 2013 | 1 | 1 | 0 | 12 | 762 | 134 | . 2013 | 1 | 1 | 1 | -6 | 1023 | 147 | . 2013 | 1 | 1 | -8 | -8 | 1020 | 170 | . 2013 | 1 | 1 | -3 | 16 | 502 | 105 | . 2013 | 1 | 1 | -4 | -12 | 1085 | 152 | . 2013 | 1 | 1 | -4 | -8 | 760 | 128 | . 2013 | 1 | 1 | 0 | -17 | 1085 | 157 | . 2013 | 1 | 1 | 8 | 32 | 719 | 139 | . 2013 | 1 | 1 | 11 | 14 | 2586 | 366 | . 2013 | 1 | 1 | 3 | 4 | 1074 | 175 | . 2013 | 1 | 1 | 0 | -21 | 1598 | 182 | . 2013 | 1 | 1 | 0 | -9 | 746 | 120 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 9 | 30 | -2 | -24 | 305 | 45 | . 2013 | 9 | 30 | -2 | -9 | 529 | 72 | . 2013 | 9 | 30 | -2 | -31 | 1626 | 213 | . 2013 | 9 | 30 | 30 | -2 | 292 | 45 | . 2013 | 9 | 30 | -9 | -30 | 213 | 36 | . 2013 | 9 | 30 | 0 | -30 | 2475 | 298 | . 2013 | 9 | 30 | 13 | 11 | 284 | 47 | . 2013 | 9 | 30 | 0 | -25 | 1598 | 192 | . 2013 | 9 | 30 | 10 | 3 | 1076 | 139 | . 2013 | 9 | 30 | -7 | -23 | 200 | 37 | . 2013 | 9 | 30 | -9 | -16 | 209 | 39 | . 2013 | 9 | 30 | 194 | 194 | 301 | 50 | . 2013 | 9 | 30 | -2 | 8 | 378 | 61 | . 2013 | 9 | 30 | 27 | 7 | 764 | 97 | . 2013 | 9 | 30 | 72 | 57 | 872 | 120 | . 2013 | 9 | 30 | -14 | -21 | 273 | 48 | . 2013 | 9 | 30 | 80 | 42 | 2565 | 318 | . 2013 | 9 | 30 | 154 | 130 | 944 | 123 | . 2013 | 9 | 30 | -8 | -8 | 266 | 43 | . 2013 | 9 | 30 | -5 | -17 | 209 | 41 | . 2013 | 9 | 30 | -10 | -20 | 301 | 52 | . 2013 | 9 | 30 | -5 | -16 | 264 | 47 | . 2013 | 9 | 30 | 12 | 1 | 187 | 33 | . 2013 | 9 | 30 | -10 | -25 | 1617 | 196 | . 2013 | 9 | 30 | NA | NA | 764 | NA | . 2013 | 9 | 30 | NA | NA | 213 | NA | . 2013 | 9 | 30 | NA | NA | 198 | NA | . 2013 | 9 | 30 | NA | NA | 764 | NA | . 2013 | 9 | 30 | NA | NA | 419 | NA | . 2013 | 9 | 30 | NA | NA | 431 | NA | . gain, speed&#47484; &#44228;&#49328;&#54616;&#44256; &#49910;&#45796;. . 아래의 수식을 시용하여 gain, speed를 계산하자. | . - gain = dep_delay - arr_delay . - speed = distance / air_time . df = df %&gt;% mutate(gain= dep_delay-arr_delay, speed= distance / air_time) print(df) . # A tibble: 336,776 x 9 year month day dep_delay arr_delay distance air_time gain speed &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 2013 1 1 2 11 1400 227 -9 6.17 2 2013 1 1 4 20 1416 227 -16 6.24 3 2013 1 1 2 33 1089 160 -31 6.81 4 2013 1 1 -1 -18 1576 183 17 8.61 5 2013 1 1 -6 -25 762 116 19 6.57 6 2013 1 1 -4 12 719 150 -16 4.79 7 2013 1 1 -5 19 1065 158 -24 6.74 8 2013 1 1 -3 -14 229 53 11 4.32 9 2013 1 1 -3 -8 944 140 5 6.74 10 2013 1 1 -2 8 733 138 -10 5.31 # ... with 336,766 more rows . mean_gain, mean_speed&#47484; &#44228;&#49328;&#54616;&#44256; &#49910;&#45796;. . df %&gt;% select(year:day, ends_with(&quot;delay&quot;), distance, air_time) %&gt;% mutate(gain= dep_delay-arr_delay, speed= distance / air_time) %&gt;% group_by(year, month, day) %&gt;% summarise(mean_gain = mean(gain), mean_speed = mean(speed)) . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 365 × 5 yearmonthdaymean_gainmean_speed . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | NA | NA | . 2013 | 1 | 2 | NA | NA | . 2013 | 1 | 3 | NA | NA | . 2013 | 1 | 4 | NA | NA | . 2013 | 1 | 5 | NA | NA | . 2013 | 1 | 6 | NA | NA | . 2013 | 1 | 7 | NA | NA | . 2013 | 1 | 8 | NA | NA | . 2013 | 1 | 9 | NA | NA | . 2013 | 1 | 10 | NA | NA | . 2013 | 1 | 11 | NA | NA | . 2013 | 1 | 12 | NA | NA | . 2013 | 1 | 13 | NA | NA | . 2013 | 1 | 14 | NA | NA | . 2013 | 1 | 15 | NA | NA | . 2013 | 1 | 16 | NA | NA | . 2013 | 1 | 17 | NA | NA | . 2013 | 1 | 18 | NA | NA | . 2013 | 1 | 19 | NA | NA | . 2013 | 1 | 20 | NA | NA | . 2013 | 1 | 21 | NA | NA | . 2013 | 1 | 22 | NA | NA | . 2013 | 1 | 23 | NA | NA | . 2013 | 1 | 24 | NA | NA | . 2013 | 1 | 25 | NA | NA | . 2013 | 1 | 26 | NA | NA | . 2013 | 1 | 27 | NA | NA | . 2013 | 1 | 28 | NA | NA | . 2013 | 1 | 29 | NA | NA | . 2013 | 1 | 30 | NA | NA | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 12 | 2 | NA | NA | . 2013 | 12 | 3 | NA | NA | . 2013 | 12 | 4 | NA | NA | . 2013 | 12 | 5 | NA | NA | . 2013 | 12 | 6 | NA | NA | . 2013 | 12 | 7 | NA | NA | . 2013 | 12 | 8 | NA | NA | . 2013 | 12 | 9 | NA | NA | . 2013 | 12 | 10 | NA | NA | . 2013 | 12 | 11 | NA | NA | . 2013 | 12 | 12 | NA | NA | . 2013 | 12 | 13 | NA | NA | . 2013 | 12 | 14 | NA | NA | . 2013 | 12 | 15 | NA | NA | . 2013 | 12 | 16 | NA | NA | . 2013 | 12 | 17 | NA | NA | . 2013 | 12 | 18 | NA | NA | . 2013 | 12 | 19 | NA | NA | . 2013 | 12 | 20 | NA | NA | . 2013 | 12 | 21 | NA | NA | . 2013 | 12 | 22 | NA | NA | . 2013 | 12 | 23 | NA | NA | . 2013 | 12 | 24 | NA | NA | . 2013 | 12 | 25 | NA | NA | . 2013 | 12 | 26 | NA | NA | . 2013 | 12 | 27 | NA | NA | . 2013 | 12 | 28 | NA | NA | . 2013 | 12 | 29 | NA | NA | . 2013 | 12 | 30 | NA | NA | . 2013 | 12 | 31 | NA | NA | . NA가 출력되는 것을 보니 데이터 중에 결측치가 존재했던 것 같다. | . na.rm=TRUE를 사용하자. | . df %&gt;% select(year:day, ends_with(&quot;delay&quot;), distance, air_time) %&gt;% mutate(gain= dep_delay-arr_delay, speed= distance / air_time) %&gt;% group_by(year, month, day) %&gt;% summarise(mean_gain = mean(gain, na.rm=TRUE), mean_speed = mean(speed, na.rm=TRUE)) . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 365 × 5 yearmonthdaymean_gainmean_speed . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | -1.2154031 | 5.956879 | . 2013 | 1 | 2 | 0.9849138 | 6.085977 | . 2013 | 1 | 3 | 5.1744444 | 6.163061 | . 2013 | 1 | 4 | 10.8986784 | 6.389652 | . 2013 | 1 | 5 | 7.2580195 | 6.259174 | . 2013 | 1 | 6 | 2.9095296 | 6.146544 | . 2013 | 1 | 7 | 10.3645161 | 6.488469 | . 2013 | 1 | 8 | 5.7858744 | 6.215331 | . 2013 | 1 | 9 | 2.5655095 | 6.021767 | . 2013 | 1 | 10 | 8.7438105 | 6.375353 | . 2013 | 1 | 11 | 7.5954198 | 6.326487 | . 2013 | 1 | 12 | 14.6093979 | 6.613691 | . 2013 | 1 | 13 | 4.6877323 | 6.353392 | . 2013 | 1 | 14 | -0.8418202 | 6.018617 | . 2013 | 1 | 15 | -0.3019296 | 5.918271 | . 2013 | 1 | 16 | -9.7924971 | 5.819344 | . 2013 | 1 | 17 | 1.1923497 | 5.923112 | . 2013 | 1 | 18 | 4.9263736 | 6.207338 | . 2013 | 1 | 19 | 11.8882265 | 6.340853 | . 2013 | 1 | 20 | 3.0640205 | 6.098927 | . 2013 | 1 | 21 | 1.5232816 | 5.911828 | . 2013 | 1 | 22 | 0.2225989 | 5.966793 | . 2013 | 1 | 23 | 3.6925676 | 6.081496 | . 2013 | 1 | 24 | 4.1156388 | 6.305144 | . 2013 | 1 | 25 | -5.3469852 | 6.177677 | . 2013 | 1 | 26 | 6.4619970 | 6.342779 | . 2013 | 1 | 27 | 9.6972705 | 6.371808 | . 2013 | 1 | 28 | 5.7794632 | 6.288730 | . 2013 | 1 | 29 | 9.1047181 | 6.297918 | . 2013 | 1 | 30 | 2.0226131 | 6.072084 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 12 | 2 | 8.6172345 | 6.538165 | . 2013 | 12 | 3 | 3.7637306 | 6.385837 | . 2013 | 12 | 4 | 5.5354497 | 6.374694 | . 2013 | 12 | 5 | 0.7886279 | 6.315847 | . 2013 | 12 | 6 | -4.9424779 | 6.088300 | . 2013 | 12 | 7 | -0.5210210 | 6.083830 | . 2013 | 12 | 8 | -16.0335404 | 6.015119 | . 2013 | 12 | 9 | -7.9688889 | 5.927017 | . 2013 | 12 | 10 | -18.0433018 | 5.851833 | . 2013 | 12 | 11 | -3.8292683 | 5.854563 | . 2013 | 12 | 12 | 2.1491137 | 6.257818 | . 2013 | 12 | 13 | 5.0612669 | 6.276367 | . 2013 | 12 | 14 | -19.4046346 | 6.257517 | . 2013 | 12 | 15 | 3.6813725 | 6.167540 | . 2013 | 12 | 16 | 4.1434555 | 6.232667 | . 2013 | 12 | 17 | -15.1005988 | 6.380989 | . 2013 | 12 | 18 | 2.9474790 | 6.464964 | . 2013 | 12 | 19 | 7.1438923 | 6.458775 | . 2013 | 12 | 20 | 3.3555094 | 6.272395 | . 2013 | 12 | 21 | 7.8052434 | 6.465150 | . 2013 | 12 | 22 | 5.2189616 | 6.320959 | . 2013 | 12 | 23 | 0.1666667 | 6.193496 | . 2013 | 12 | 24 | 7.8098404 | 6.363875 | . 2013 | 12 | 25 | 9.4517483 | 6.478628 | . 2013 | 12 | 26 | 7.2430108 | 6.349989 | . 2013 | 12 | 27 | 11.1061394 | 6.442939 | . 2013 | 12 | 28 | 11.2410824 | 6.555790 | . 2013 | 12 | 29 | 3.3479263 | 6.365616 | . 2013 | 12 | 30 | 0.6526758 | 6.115099 | . 2013 | 12 | 31 | 0.6930171 | 6.139908 | . &#44284;&#51228; . Problem . 강화유리와 유리를 구분할 수 있는 유리 장인이 있다. . 이 유리장인은 80%의 확률로 강화유리를 고른다. . 총 10명의 참가자가 있고 이 참가자들은 유리와 강화유리의 조합으로 이루어진 징검다리를 5번 연속으로 건너야 한다. . 아래의 경우에 참가자들은 총 몇명이 살아남는가? 1000번의 시뮬레이션을 하여 추정하라. . - 첫 번째 경우 . 일반인1 - 일반인2 - $ dots$ - 일반인9 - 유리장인||(유리, 강화유리) . - 두 번째 경우 . 유리장인 - 일반인1 - 일반인2 - $ dots$ - 일반인9||(유리, 강화유리) . Solution I . 뒤에 있는 5명은 항상 살아남는다. | . 따라서 생존자 = 1번 ~ 5번주자 중 생존자 + 5 | . - 첫 번째 경우 . rslt = c() A = rbinom(1000,size=5,prob=0.8) B = rbinom(1000,size=4,prob=0.5) for (i in 1:length(B)) rslt[i] = 4*mean(sum(B&gt;=5-A[i]))/1000 + 5 rslt%&gt;%mean . 8.52672 약 8.5명이 생존한다. | . - 두 번째 경우 . (rbinom(1000,size=5,prob=0.5) %&gt;% mean) + 5 . 7.524 약 7.5명이 생존한다. | . rslt = c() for (a in 1:1000){ mat = cbind(rep(TRUE, 5), rep(0, 5)) colnames(mat) = c(&quot;최종 생존 여부&quot;, &quot;성공 횟수&quot;) mat = as_tibble(mat) for (i in 1:5){ try = 1 scc = 0 while (try == 1){ if (sum(mat[,2]) &gt;=5) break try = sample(c(0,1), size = 1) if (try == 1){ #생존 mat[i,2] = mat[i,2] + 1 } else if(try == 0){ #사망 mat[i,1] = 0 mat[i,2] = mat[i,2] + 1 } } } rslt[a] = sum(mat[,1]) } mean(rslt) + 5 . 7.48 rslt = c() for (a in 1:1000){ mat = cbind(rep(TRUE, 5), rep(0, 5)) mat = as_tibble(mat) for (i in 1:5){ try = 1 scc = 0 while (try == 1){ if (sum(mat[,2]) &gt;= 5) break if (i == 1) try = sample(c(0,1), size = 1, prob = c(2,8)) else try = sample(c(0,1), size = 1, prob = c(5,5)) mat[i,2] = mat[i,2] + 1 if(try == 0) mat[i,1] = 0 } } rslt[a] = sum(mat[,1]) } mean(rslt) + 5 . 8.5 Solution II . &#51109;&#51064;&#51060; &#47592; &#50526;&#50640; &#51080;&#45716; &#44221;&#50864; . - 10명이 생존할 확률 . 장인이 모두 성공$0.8^5$ | . - 9명이 생존할 확률 . 장인이 1번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ . | 장인이 2번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ . | 장인이 3번째에서 탈락 $=0.8^2 times 0.2^1 times 0.5^2$ . | 장인이 4번째에서 탈락 $=0.8^3 times 0.2^1 times 0.5^1$ . | 장인이 5번째에서 탈락 $=0.8^4 times 0.2^1 times 0.5^0$ . | . - 8명이 생존할 확률 . 장인이 1번째에서 탈락 $=4 times0.8^0 times 0.2^1 times 0.5^4$ . 일반인이 2번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ . | 일반인이 3번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ . | 일반인이 4번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | 일반인이 5번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | . | . 장인이 2번째에서 탈락 $=3 times0.8^1 times 0.2^1 times 0.5^3$ . 일반인이 3번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ | 일반인이 4번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ | 일반인이 5번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ | . | . 장인이 3번째에서 탈락 $=3 times 0.8^2 times 0.2^1 times 0.5^2$ . 일반인이 4번째에서 탈락 $=0.8^2 times 0.2^1 times 0.5^2$ . | 일반인이 5번째에서 탈락 $=0.8^2 times 0.2^1 times 0.5^2$ . | . | . 장인이 4번째에서 탈락 $=1 times0.8^2 times 0.2^1 times 0.5^1$ . 일반인이 5번째에서 탈락 $=0.8^2 times 0.2^1 times 0.5^1$ | . | . - 7명이 생존할 확률 . 장인이 1번째에서 탈락 $= choose(4, 2) times0.8^0 times 0.2^1 times 0.5^4$ . 일반인이 2, 3번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | 일반인이 2, 4번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | 일반인이 2, 5번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | 일반인이 3, 4번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | 일반인이 3, 5번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | 일반인이 4, 5번째에서 탈락 $=0.8^0 times 0.2^1 times 0.5^4$ | . | . 장인이 2번째에서 탈락 $= choose(3,2) times0.8^1 times 0.2^1 times 0.5^3$ . 일반인이 3, 4번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ | 일반인이 3, 5번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ | 일반인이 4, 5번째에서 탈락 $=0.8^1 times 0.2^1 times 0.5^3$ | . | . 장인이 3번째에서 탈락 $=choose(2,2) times 0.8^2 times 0.2^1 times 0.5^2$ . 일반인이 4, 5번째에서 탈락 $=0.8^2 times 0.2^1 times 0.5^2$ | . | . - 6명이 생존할 확률 . 장인이 1번째에서 탈락 $= choose(4, 3) times0.8^0 times 0.2^1 times 0.5^4$ . | 장인이 2번째에서 탈락 $= choose(3,3) times0.8^1 times 0.2^1 times 0.5^3$ . | . - 5명이 생존할 확률 $=0.2 times0.5^4$ . Solution III . 0.8 ^ 5 . 0.32768 surv9_prob = c() for (i in 0:4) surv9_prob[i+1] = 0.8^i * 0.2 * 0.5^(4-i) sum(surv9_prob) . 0.19762 surv8_prob = c() for(i in 0:3) surv8_prob[i+1] = choose(4-i, 1) * 0.8^i * 0.2 * 0.5^(4-i) sum(surv8_prob) . 0.2252 surv7_prob = c() for(i in 0:2) surv7_prob[i+1] = choose(4-i, 2) * 0.8^i * 0.2 * 0.5^(4-i) sum(surv7_prob) . 0.167 surv6_prob = c() for(i in 0:1) surv6_prob[i+1] = choose(4-i, 3) * 0.8^i * 0.2 * 0.5^(4-i) sum(surv6_prob) . 0.07 surv5_prob = c() for(i in 0:0) surv5_prob[i+1] = choose(4-i, 4) * 0.8^i * 0.2 * 0.5^(4-i) sum(surv5_prob) . 0.0125 확률의 총 합은 1이 되어야 한다. | . 0.8^5+ sum(surv9_prob)+ sum(surv8_prob)+ sum(surv7_prob)+ sum(surv6_prob)+ sum(surv5_prob) . 1 평균을 구하자 | . 0.8^5 *10+ sum(surv9_prob) *9+ sum(surv8_prob) *8+ sum(surv7_prob) *7+ sum(surv6_prob) *6+ sum(surv5_prob) *5 . 8.50848 saves = c() for (j in 1:1000){ rslt = c() A = rbinom(1000,size=5,prob=0.8) B = rbinom(1000,size=4,prob=0.5) for (i in 1:length(B)) rslt[i] = 4*mean(sum(B&gt;=5-A[i]))/1000 + 5 saves[j] = mean(rslt) } saves %&gt;% mean . 8.475589804",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/11/30/R%EC%9E%85%EB%AC%B8-12%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/11/30/R%EC%9E%85%EB%AC%B8-12%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Nov 30, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "수학2 중간고사",
            "content": "1번 문항 | . 다음 급수의 수렴 반지름과 수렴 구간을 구하라. . $ sum_{n=1}^ infty dfrac{2^n(x-3)^n}{ sqrt{n+3}} $ . 2번 문항 | . 다음 곡선의 $t = dfrac{ pi}{4}$일 때, 접선의 방정식을 구하라. . $ x= sec ,t, y = tan ,t : - dfrac{ pi}{2} ,&lt; ,t ,&lt; dfrac{ pi}{2}$ . 3번 문항 | . $x = a ,cos ,t, y = a ,sin ,t$일 때, $ dfrac{d^2y}{dx^2}$을 구하여라. . 4번 문항 | . 다음 보기 중 참인 보기를 모두 고르시오. . (1) p-급수 $ sum_{n=1}^{ infty} dfrac{1}{n^P}$는 $p&gt;1$이면 발산이다. . (2) 사이클로이드는 직선 위를 따라 원이 구를 때, 원주 위의 점 P에 의하여 그려지는 곡선을 의미한다. . (3) $lim_{n to infty} |a_n|$이면 $lim_{n to infty}a_n =0$이다. . (4) $0 leq a_n leq b_n$이고, $ sum_{n=1}^{ infty}b_n$이 발산한다면, $ sum_{n=1}^{ infty}a_n$은 발산한다. . (5) $ lim_{n= infty}a_n$이 존재하지 않거나, $ lim_{n= infty}a_n neq 0$이면 $ sum_{n=1}^{ infty}a_n$은 발산한다. . 5번 문항 | . 급수의 수렴, 발산 판정법이 바르지 않은 것을 모두 찾아라. . (1) $ sum_{n=1}^{ infty} dfrac{(2n+1)^n}{n^{2n}}$ : 근판정법 . (2) $ sum_{n=1}^{ infty}(-1)^n dfrac{n}{n^2+2}$ : 교대급수판정법 . (3) $ sum_{n=1}^{ infty} dfrac{3^n n^2}{n!}$ : 발산판정법 . (4) $ sum_{n=1}^{ infty} dfrac{1}{n+3^n}$ : 비교판정법 . (5) $ sum_{n=1}^{ infty} dfrac{1}{2n+1}$ : 비판정법(비율판정법) . 6번 문항 | . 곡선 $x = 1+e^t, , y=t-t^2$과 $x$축으로 둘러싸인 넓이를 찾아라. . &#49436;&#49696;&#54805; . $x geq2$에서 연속이고 감소인 함수 $f(x) = dfrac{ln ,x}{x^3} &gt; 0$와 적분판정법을 이용하여, 다음 급수 $ sum_{n=1}^{ infty} dfrac{ln ,n}{n^3}$의 수렴여부를 판정하라. | 멱급수를 이용하여 $ int dfrac{x-tan^{-1}x}{x^3}dx$의 값을 구하라. 그리고 수렴반지름을 찾아라. | 매개변수방정식 $x=2cos^2 theta, y=sin2 theta$의 접선이 수평이 되는 점과 수직이 되는 점을 찾아라. | 문제1 : 비율판정법을 사용하면 . $lim_{n to infty}| dfrac{a_{n+1}}{a_n} = |2x-6| &lt; 1$이면 수렴한다. . 따라서 수렴 반지름 $R = dfrac{1}{2}$이다. 끝점은 별도로 판단하라. . 문제2 : $ dfrac{ dfrac{dy}{dt}}{ dfrac{dx}{dt}} = dfrac{dy}{dx},$ . $(sec ,t)&#39; = sec ,t ,tan ,t, (tan ,t)&#39; = sec^2t$ 임을 활용하라. .",
            "url": "https://stahangryum.github.io/stahangryum/calculus/2021/11/19/%EC%88%98%ED%95%992-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC.html",
            "relUrl": "/calculus/2021/11/19/%EC%88%98%ED%95%992-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC.html",
            "date": " • Nov 19, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "R : Random Sampling and Integration",
            "content": "library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . &#47004;&#45924;&#48320;&#49688;&#51032; &#49373;&#49457; . runif(N): &#44512;&#46321;&#48516;&#54252; . runif(N)을 실행하면 0 ~ 1 사이의 난수를 N개 리턴한다. . | runif(n = N, min = a, max = b)을 실행하면 a ~ b 사이의 난수를 N개 리턴한다. . | . runif(5) . &lt;ol class=list-inline&gt;0.113343952456489 | 0.958494298160076 | 0.333700813120231 | 0.296662832610309 | 0.0340885552577674 | &lt;/ol&gt; runif(n = 5, min = 3, max = 5) . &lt;ol class=list-inline&gt;3.20300217764452 | 4.31503517366946 | 3.09817771287635 | 4.0317866820842 | 4.81291742436588 | &lt;/ol&gt; Application . runif(5)*2 # 0 ~ 2 사이의 난수를 리턴 . &lt;ol class=list-inline&gt;0.448645848315209 | 1.02495100675151 | 0.26648238953203 | 0.401437606196851 | 0.0193486330099404 | &lt;/ol&gt; (runif(5)*3)+4 # 4 ~ 7 사이의 난수를 리턴 . &lt;ol class=list-inline&gt;5.14778439537622 | 4.72293969267048 | 5.91136680007912 | 6.92601511161774 | 4.97068434930407 | &lt;/ol&gt; Problem . $$ text{Find} int_0^2 |x^2(x-1)|dx$$ . Solution I . $$ begin{aligned} int_0^2 |x^2(x-1)|dx &amp;= int_0^1 |x^2(x-1)|dx + int_1^2 |x^2(x-1)|dx &amp;=- int_0^1 x^2(x-1)dx + int_1^2 x^2(x-1)dx &amp;=- int_0^1 (x^3-x^2)dx + int_1^2 (x^3-x^2)dx &amp;= - left[ dfrac{1}{4}x^4 - dfrac{1}{3}x^3 right]_0^1 + left[ dfrac{1}{4}x^4 - dfrac{1}{3}x^3 right]_1^2 &amp;= - left( dfrac{1}{4}- dfrac{1}{3} right) + left( dfrac{16}{4}- dfrac{8}{3} right)- left( dfrac{1}{4}- dfrac{1}{3} right) &amp;= dfrac{3}{2} end{aligned}$$ Solution II . f = function(x) abs(x**2 *(x-1)) x = seq(0,2, by=0.001) plot(x, f(x), type = &#39;l&#39;) . xx = runif(10000) * 2 yy = runif(10000) * 4 plot(xx, yy, col = &#39;gray&#39;) lines(x, f(x), col = &#39;red&#39;) . 빨간색 그래프 아래에 있는 넓이가 적분값이다. | . test = function(xx, yy){ yy &lt; f(xx) } . A = test(xx, yy) . plot(xx, yy, col = &quot;gray&quot;) lines(x, f(x), col = &quot;red&quot;) points(xx[A], yy[A], col= &quot;red&quot;) . $ text{적분값} = text{사각형의 크기} times dfrac{ text{빨간색 점의 개수}}{ text{전체 점의 개수}}$ . 8 * (sum(A)/length(A)) . 1.5368 Solution I에서 구한 값과 유사하다. | 표본을 늘리면 오차가 줄어들 것 같다. | . xx = runif(1000000) * 2 yy = runif(1000000) * 4 A = test(xx, yy) plot(xx, yy, col = &quot;gray&quot;) lines(x, f(x), col = &quot;red&quot;) points(xx[A], yy[A], col= &quot;red&quot;) . 8 * (sum(A)/length(A)) . 1.496296 답은 1.5이다. | . rbinom(n, size = a, prob = b): &#51060;&#54637;&#48516;&#54252; . rbinom(N, size = a, prob = b) | . 앞면이 나올 확률이 b인 동전을 a번 던졌을 때 앞면이 나온 횟수를 리턴한다. 위 시행을 n번 반복한다. | . b=0.5이면 베르누이 분포이다.(베르누이 분포는 이항분포의 특수한 경우이다.) | . rbinom(1,size=10,prob=0.9) . 9 위 코드는 앞면이 나올 확률이 0.9인 동전을 10번 던졌더니 8번 앞면이 나온 것이다. | . rbinom(1,size=10,prob=0.9) . 7 위 코드는 앞면이 나올 확률이 0.9인 동전을 10번 던졌더니 7번 앞면이 나온 것이다. | . 이러한 시행을 계속해서 반복하면, 즉 N의 크기를 늘린다면 그 평균은 9에 수렴하지 않겠는가? 실제로 그렇다. | . rbinom(10000, size=10, prob=0.9) %&gt;% mean . 9.0035 sample(a, size = n, prob = p, replace = TRUE or FALSE): &#51665;&#54633;&#50640;&#49436;&#51032; &#49368;&#54540;&#47553; . sample(a, size = n)를 실행하면 집합 a에서 n개의 원소를 비복원추출한다. | . sample(a, size = n, replace = TRUE)를 실행하면 집합 a에서 n개의 원소를 복원추출한다. | . sample(a, size = n, prob = c(p_1, p_2 ....p_k))을 실행하면 원소의 개수가 k인 집합 a에서 n개의 원소를 뽑되, 각 원소가 뽑힐 확률을 제어할 수 있다. 이 때 확률 벡터는 a의 인덱스 순으로 입력해야 한다. | . set = c(&#39;red&#39;, &#39;red&#39;, &#39;blue&#39;, &#39;blue&#39;, &#39;blue&#39;) sample(set, size = 4) . &lt;ol class=list-inline&gt;&#39;blue&#39; | &#39;blue&#39; | &#39;red&#39; | &#39;red&#39; | &lt;/ol&gt; sample(set, size = 4) . &lt;ol class=list-inline&gt;&#39;blue&#39; | &#39;red&#39; | &#39;blue&#39; | &#39;blue&#39; | &lt;/ol&gt; sample(set, size = 4, replace = TRUE) . &lt;ol class=list-inline&gt;&#39;blue&#39; | &#39;blue&#39; | &#39;blue&#39; | &#39;blue&#39; | &lt;/ol&gt; sample(set, size = 4, replace = TRUE) . &lt;ol class=list-inline&gt;&#39;blue&#39; | &#39;blue&#39; | &#39;red&#39; | &#39;red&#39; | &lt;/ol&gt; set = c(&#39;red&#39;, &#39;blue&#39;) sample(set, size = 5, prob = c(0.2, 0.8), replace = TRUE) . &lt;ol class=list-inline&gt;&#39;blue&#39; | &#39;blue&#39; | &#39;blue&#39; | &#39;red&#39; | &#39;blue&#39; | &lt;/ol&gt; sample(set, size = 5, prob = c(0.2, 0.8)) . Error in sample.int(length(x), size, replace, prob): &#39;replace = FALSE&#39; 일때는 모집단보다 큰 샘플을 가질 수 없습니다 Traceback: 1. sample(set, size = 5, prob = c(0.2, 0.8)) 2. sample.int(length(x), size, replace, prob) . 위 코드는 비복원추출인데, 원소가 2개인 집합에서 5개의 원소를 뽑으려 했기 때문에 오류가 발생한 것이다. | . sample(set, size = 2, prob = c(0.2, 0.3), replace = TRUE) . &lt;ol class=list-inline&gt;&#39;red&#39; | &#39;blue&#39; | &lt;/ol&gt; sample(set, size = 2, prob = c(32.2, 44.3), replace = TRUE) . &lt;ol class=list-inline&gt;&#39;red&#39; | &#39;blue&#39; | &lt;/ol&gt; set = c(&#39;red&#39;, &#39;blue&#39;) rslt = matrix(rep(&quot;_&quot;, 1000*2), ncol = 2) rslt . A matrix: 1000 × 2 of type chr _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . ⋮ | ⋮ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . _ | _ | . . for (i in 1:1000) rslt[i,] = sample(set, size = 2, prob=c(0.95,0.05)) rslt . A matrix: 1000 × 2 of type chr red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . blue | red | . red | blue | . blue | red | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . ⋮ | ⋮ | . red | blue | . red | blue | . blue | red | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . red | blue | . . sum(rslt[,1] == &quot;red&quot;)/1000 . 0.956 &#44284;&#51228;: &#50976;&#47532;&#47196; &#46108; &#51669;&#44160;&#45796;&#47532; &#44148;&#45320;&#44592; . Problem . . 유리와 강화유리가 한 쌍으로 이루어진 징검다리가 총 5개 있다고 하자.(따라서 징검다리는 모두 10개이다.) . 강화유리로 된 징검다리를 밟으면 살아남지만 유리로 된 징검다리를 밟으면 죽는다. . 따라서 강화유리로 된 징검다리를 골라야 살아남을 수 있다. . A씨는 유리공장에서 20년 근무한 장인으로 유리와 강화유리를 구분할 수 있는 능력을 가져서 강화유리로 된 징검다리를 고를 확률이 80%이다. . A씨가 살아남을 확률을 시뮬레이션을 통하여 구하여라. . Solution . #수리적으로 구한 값 (0.8)^5 . 0.32768 #천만번의 시뮬레이션을 통해 평균을 구한다. num_repeat = 10000000 sum(rbinom(num_repeat, size=5, prob=0.8) == 5) / num_repeat . 0.3277079 # mean으로도 가능한 것 같다. num_repeat = 10000000 mean(rbinom(num_repeat, size=5, prob=0.8) == 5) . 0.3277134 즉, 시뮬레이션으로 구한 A씨가 살아남을 확률은 약 0.3278이다. | . Problem . 강화유리와 유리를 랜덤으로 찍는 참가자가 2명 있다고 하자. (따라서 강화유리를 고를 확률이 50%이다.) . (강화유리, 유리)의 징검다리가 3개 있다고 하자. (따라서 총 6개의 유리가 있고, 3번연속으로 강화유리를 고르면 2명 모두 살아남는다) . 8000번의 시뮬레이션을 하였을 경우 아래의 질문에 답하라. . (질문1) 2명 모두 살아남는 경우는 몇번인가? 약 1000번 . (질문2) 1명만 살아남는 경우는 몇번정도인가? 약 3000번 정도.. . Solution I . 2&#47749; &#47784;&#46160; &#49373;&#51316;&#54616;&#45716; &#44221;&#50864; . simulate_all_sulv = function(N) return (sum(rbinom(8000,size=3,prob=0.5) == 3)) simulate_all_sulv(8000) . 1006 1&#47749;&#47564; &#49373;&#51316;&#54616;&#45716; &#44221;&#50864; . matt = sample(size = 8000*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(8000, 3) matt = as.tibble(matt) sum( (rbinom(sum(matt$V1==0), size = 2, prob = 0.5) == 2)%&gt;% sum + (rbinom(sum((matt$V1==1)&amp;(matt$V2==0)), size = 1, prob = 0.5) == 1) %&gt;% sum + (rbinom(sum((matt$V1==1)&amp;(matt$V2==1)&amp;(matt$V3==0)), size = 0, prob = 0.5) == 0) %&gt;% sum ) . 3026 Solution II . simulate_one_sulv = function(N){ #N &lt;- 시행 횟수 matt = sample(size = N*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(N, 3) for (i in 1:N){ # 사망하면 더이상 시도할 수 없으므로 0이후에 발생된 1은 0으로 교체한다. if (matt[i,1] == 0) matt[i,2] &lt;- matt[i,3] &lt;- 0 # 첫 번째에 사망한 경우 두 번째, 세 번째는 실패로 간주한다. else if (matt[i,2] == 0) matt[i,3] &lt;- 0 # 두 번째에 사망한 경우 세 번째는 실패로 간주한다. } # sum은 1번 주자의 성공 횟수이다. matt = matt %&gt;% as.tibble %&gt;% mutate(sum = V1 + V2 + V3) # sum이 3이면 한 명만 생존하는 경우가 아니므로 summ이 0:2인 경우만 계산한다. rslt = c() for (i in 0:2) rslt[i+1] = (matt %&gt;% filter(sum == i) %&gt;% count %&gt;% as.numeric %&gt;% rbinom(size = 2-i, prob = 0.5) == 2-i) %&gt;% sum return(sum(rslt)) } . simulate_one_sulv(8000) . 3012 &#45796;&#47480; &#49884;&#46020;&#46308; . simulate_one_sulv = function(N){ first_cross = rbinom(8000,size=3,prob=0.5) second_cross = 0 ATA = 0 for (i in 1:N){ if (first_cross[i] == 3) next # 1번 주자가 모두 강화유리를 밟은 경우, 즉 전원 생존한다. else if (first_cross[i] == 2) second_cross = second_cross + 1 # 1번 주자가 첫 번째, 두 번째에서 강화유리를 밟고 세 번째에서 일반유리를 밟아 사망한 경우, 즉 2번 주자만 생존한다. else if (sample(size=2-first_cross[i], c(0,1), prob=c(5,5),replace=T) %&gt;% prod == 1) second_cross = second_cross + 1 } return(second_cross) } simulate_one_sulv(8000) . 4769 simulate_one_sulv = function(N){ first_cross = rbinom(8000,size=3,prob=0.5) second_cross = 0 ATA = 0 for (i in 1:N){ if (first_cross[i] == 3) next # 1번 주자가 모두 강화유리를 밟은 경우, 즉 전원 생존한다. else if (first_cross[i] == 2) ATA = ATA + 1 # 1번 주자가 첫 번째, 두 번째에서 강화유리를 밟고 세 번째에서 일반유리를 밟아 사망한 경우, 즉 2번 주자만 생존한다. else if (sample(size=2-first_cross[i], c(0,1), prob=c(5,5),replace=T) %&gt;% prod == 1) second_cross = second_cross + 1 } print(ATA) return(second_cross+ATA) } simulate_one_sulv(8000) . [1] 2978 . 4730 zero = 0 one = 0 two = 0 three = 0 first_cross = rbinom(8000,size=3,prob=0.5) for (i in first_cross){ if (i == 0) zero = zero + 1 else if (i == 1) one = one + 1 else if (i == 2) two = two + 1 else if (i == 3) three = three + 1 } zero one two three . 1073 2987 2950 990 first_cross = rbinom(8000,size=3,prob=0.5) sample(size = 0, prob = c(0.2, 0.8), replace = TRUE) . Error in sample(size = 0, prob = c(0.2, 0.8), replace = TRUE): 기본값이 없는 인수 &#34;x&#34;가 누락되어 있습니다 Traceback: 1. sample(size = 0, prob = c(0.2, 0.8), replace = TRUE) . fc = 0 이면 2번 fc = 1 이면 1번 fc = 2 이면 0번 fc = 3 이면 해당되지 않음 . simulate_one_sulv = function(N){ first_cross = rbinom(8000,size=3,prob=0.5) second_cross = 0 for (i in 1:N){ if (first_cross[i] == 3) next else if (first_cross[i] == 2) second_cross = second_cross + 1 else if (first_cross[i] == 1){ if (sample(size=1, c(0,1), prob=c(5,5),replace=T) %&gt;% prod == 1) second_cross = second_cross + 1 } else if (first_cross[i] == 0){ if (sample(size=2, c(0,1), prob=c(5,5),replace=T) %&gt;% prod == 1) second_cross = second_cross + 1 } } return(second_cross) } simulate_one_sulv(8000) . 4715 print(sample(size = 0, c(0,1), prob=c(5,5),replace=T)) . numeric(0) . prod(numeric(2)) . 0 numeric(3) . &lt;ol class=list-inline&gt;0 | 0 | 0 | &lt;/ol&gt; matt = sample(size = 8000*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(8000, 3) rslt = c() for (i in 1:8000){ if (matt[i,1] == 0) matt[i,2] &lt;- matt[i,3] &lt;- 0 else if (matt[i,2] == 0) matt[i,3] &lt;- 0 } matt = matt %&gt;% as.tibble %&gt;% mutate(sum = V1 + V2 + V3) for (i in 0:2){ matt %&gt;% filter(sum == 0) %&gt;% count %&gt;% as.numeric %&gt;% rbinom(size = i, prob = 0.5) == i %&gt;% sum B = matt %&gt;% filter(sum == 1) %&gt;% count %&gt;% as.numeric C = matt %&gt;% filter(sum == 2) %&gt;% count %&gt;% as.numeric } sum(rbinom(A, size=2, prob=0.5) == 2) sum(rbinom(B, size=1, prob=0.5) == 1) sum(rbinom(C, size=0, prob=0.5) == 0) . 249361 991 1026 for (i in 1:3) print(i) . [1] 1 [1] 2 [1] 3 . matt = sample(size = 8000*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(8000, 3) rslt = c() for (i in 1:8000){ if (matt[i,1] == 0) matt[i,2] &lt;- matt[i,3] &lt;- 0 else if (matt[i,2] == 0) matt[i,3] &lt;- 0 } matt = matt %&gt;% as.tibble %&gt;% mutate(sum = V1 + V2 + V3) for (i in 0:2){ matt %&gt;% filter(sum == i) %&gt;% count %&gt;% as.numeric %&gt;% rbinom(size = 2-i, prob = 0.5) == 2-i %&gt;% sum %&gt;% print } . [1] 0 [1] 1 [1] 2 . simulate_one_sulv = function(N){ #N &lt;- 시행 횟수 matt = sample(size = N*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(N, 3) for (i in 1:N){ # 사망하면 더이상 시도할 수 없으므로 0이후에 발생된 1은 0으로 교체한다. if (matt[i,1] == 0) matt[i,2] &lt;- matt[i,3] &lt;- 0 # 첫 번째에 사망한 경우 두 번째, 세 번째는 실패로 간주한다. else if (matt[i,2] == 0) matt[i,3] &lt;- 0 # 두 번째에 사망한 경우 세 번째는 실패로 간주한다. } # sum은 1번 주자의 성공 횟수이다. matt = matt %&gt;% as.tibble %&gt;% mutate(sum = V1 + V2 + V3) # sum이 3이면 한 명만 생존하는 경우가 아니므로 summ이 0:2인 경우만 계산한다. rslt = c() for (i in 0:2) rslt[i+1] = (matt %&gt;% filter(sum == i) %&gt;% count %&gt;% as.numeric %&gt;% rbinom(size = 2-i, prob = 0.5) == 2-i) %&gt;% sum return(sum(rslt)) } . tt = c() for (i in 1:100){ tt[i] = simulate_one_sulv(8000) } hist(tt) . simulate_one_sulv = function(N){ matt = sample(size = N*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(N, 3) for (i in 1:N){ if (matt[i,1] == 0) matt[i,2] &lt;- matt[i,3] &lt;- 0 else if (matt[i,2] == 0) matt[i,3] &lt;- 0 } matt = matt %&gt;% as.tibble %&gt;% mutate(sum = V1 + V2 + V3) rslt = c() for (i in 0:2) rslt[i+1] = (matt %&gt;% filter(sum == i) %&gt;% count %&gt;% as.numeric %&gt;% rbinom(size = 2-i, prob = 0.5) == 2-i) %&gt;% sum return(sum(rslt)) } simulate_one_sulv(800) . 298 matt %&gt;% filter(sum == 1) . A tibble: 1916 × 4 V1V2V3sum . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . ⋮ | ⋮ | ⋮ | ⋮ | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . 1 | 0 | 0 | 1 | . as.dataframe(matt$V1) . Error in as.dataframe(matt$V1): 함수 &#34;as.dataframe&#34;를 찾을 수 없습니다 Traceback: . matt = sample(size = 8000*3, c(0,1), prob = c(5,5), replace = T) dim(matt) = c(8000, 3) for (i in 1:8000){ # 사망하면 더이상 시도할 수 없으므로 0이후에 발생된 1은 0으로 교체한다. if (matt[i,1] == 0) matt[i,2] &lt;- matt[i,3] &lt;- 0 # 첫 번째에 사망한 경우 두 번째, 세 번째는 실패로 간주한다. else if (matt[i,2] == 0) matt[i,3] &lt;- 0 # 두 번째에 사망한 경우 세 번째는 실패로 간주한다. } # sum은 1번 주자의 성공 횟수이다. matt = matt %&gt;% as.tibble %&gt;% mutate(sum = V1 + V2 + V3) matt %&gt;% filter(sum ==0) %&gt;%count%&gt;%as.numeric matt %&gt;% filter(sum ==1)%&gt;%count%&gt;%as.numeric matt %&gt;% filter(sum ==2)%&gt;% count%&gt;%as.numeric # sum이 3이면 한 명만 생존하는 경우가 아니므로 summ이 0:2인 경우만 계산한다. rslt = c() for (i in 0:2) rslt[i+1] = (matt %&gt;% filter(sum == i) %&gt;% count %&gt;% as.numeric %&gt;% rbinom(size = 2-i, prob = 0.5) == 2-i) %&gt;% sum print(sum(rslt)) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/11/19/R%EC%9E%85%EB%AC%B8-11%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/11/19/R%EC%9E%85%EB%AC%B8-11%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Nov 19, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "R : list",
            "content": "library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . list . lst = list(5:10, c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;), matrix(c(T,T,F,T),ncol=2)) lst . [[1]] [1] 5 6 7 8 9 10 [[2]] [1] &#34;A&#34; &#34;B&#34; &#34;C&#34; [[3]] [,1] [,2] [1,] TRUE FALSE [2,] TRUE TRUE . lst[[1]] . [1] 5 6 7 8 9 10 . lst[[2]] . [1] &#34;A&#34; &#34;B&#34; &#34;C&#34; . lst[[3]] . [,1] [,2] [1,] TRUE FALSE [2,] TRUE TRUE . lst[[1]] + 4 . [1] 9 10 11 12 13 14 . length(lst) . [1] 3 . &#50780; &#50416;&#45716;&#44032;? . 함수에서 여러개의 리턴값 | . 자료의 저장 및 정리 | . . mid = list(c(&#39;hynn&#39;, &#39;iu&#39;, &#39;gd&#39;), c(100,95,100)) mid . [[1]] [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; [[2]] [1] 100 95 100 . names(mid) . NULL . names(mid) = c(&#39;names&#39;, &#39;score&#39;) mid . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $score [1] 100 95 100 . names(mid) . [1] &#34;names&#34; &#34;score&#34; . mid$names . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . mid$score . [1] 100 95 100 . final = mid final$score = mid$score - 10 final . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $score [1] 90 85 90 . IR2021 = list(mid, final) IR2021 . [[1]] [[1]]$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; [[1]]$score [1] 100 95 100 [[2]] [[2]]$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; [[2]]$score [1] 90 85 90 . names(IR2021) = c(&quot;mid&quot;, &quot;final&quot;) IR2021 . $mid $mid$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid$score [1] 100 95 100 $final $final$names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $final$score [1] 90 85 90 . IR2021$final$score . [1] 90 85 90 . 아래와 같이 선언하는 것도 깔끔하다. | . IR2021 = list(names = mid$names, mid = mid$score, final = final$score) IR2021 . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid [1] 100 95 100 $final [1] 90 85 90 . &#47532;&#49828;&#53944;&#51032; &#49436;&#48652;&#49464;&#54021; . IR2021 . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid [1] 100 95 100 $final [1] 90 85 90 . &#52395; &#48264;&#51704; &#48169;&#48277; : [ . [를 이용: 리스트를 리턴 | . IR2021[1] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . IR2021[1:2] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $mid [1] 100 95 100 . IR2021[c(1,3)] . $names [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; $final [1] 90 85 90 . &#46160; &#48264;&#51704; &#48169;&#48277; : [[ . [[를 이용: 리스트의 요소를 리턴 | . IR2021[[1]] . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . IR2021[[2]] . [1] 100 95 100 . [[&#39;names&#39;]]와 같은 사용도 가능하다. . IR2021[[&#39;names&#39;]] . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . &#51452;&#51032;&#51216; . IR2021[[1:2]] . [1] &#34;iu&#34; . IR2021[[c(1,2)]] . [1] &#34;iu&#34; . 위 코드는 IR2021[[1]][2]와 같다. | . IR2021[[1:3]] . Error in IR2021[[1:3]]: recursive indexing failed at level 2 Traceback: . &#49464; &#48264;&#51704; &#48169;&#48277; : $ . $를 이용: | . IR2021$names . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . partial matching . IR2021$n . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . IR2021$na . [1] &#34;hynn&#34; &#34;iu&#34; &#34;gd&#34; . IR201$names . &#47532;&#49828;&#53944;&#51032; &#54876;&#50857; . &#54632;&#49688;&#51032; &#45796;&#51473; &#47532;&#53556; . cal = function(x, y){ return(list(add=x+y, sub=x-y, mul=x*y, dic=x/y)) } cal(2,3) . $add [1] 5 $sub [1] -1 $mul [1] 6 $dic [1] 0.6666667 . 함수의 결괏값을 저장하여 아래와 같이 사용 | . rslt = cal(4,3) . rslt$add . [1] 7 . rslt$sub . [1] 1 . 아래와 같은 코드는 비효율적이므로 잘 사용하지 않는다. | . cal(4,3)$add . [1] 7 . cal(4,3)$sub . [1] 1 . &#44284;&#51228; . rnorm(N) . rnorm(N, mean = A, sd = B)을 실행하면 평균이 A, 표준편차가 B인 정규분포에서 N개의 난수를 추출하여 벡터 형식으로 리턴한다. . | mean과 sd를 생략하면 표준정규분포를 사용한다. . | . st_norm = function(x){ return ((sqrt(1/(2*pi))) * (exp(-(x**2)/2))) } . x = rnorm(500000) y = rnorm(500000) hist(x, breaks= 50, col=adjustcolor(&quot;purple&quot;,alpha=0.5), xlim=c(-4,4), ann = FALSE, xaxt=&quot;n&quot;,yaxt=&quot;n&quot;) par(new = T) k = seq(-4, 4, by = 0.00001) #실제 표준정규분포 plot(k, st_norm(k), type = &#39;l&#39;, lwd = 5,xlim=c(-4,4), ann = FALSE) . Problem . 표준정규분포에서 난수를 각각 100개 뽑아 벡터 ${ bf x, y}$에 할당하고 아래의 수식을 계산하는 코드를 작성하라. | . $$ dfrac{ sum_{i=1}^{100}(x_i- bar{x})(y_i- bar{y})}{ sqrt{ sum_{i=1}^{100}(x_i- bar{x})^2} sqrt{ sum_{i=1}^{100}(y_i- bar{y})^2}} $$단, $ bar{x}= frac{1}{100} sum_{i=1}^{100}x_i$로 정의한다. . Solution . x=rnorm(100) y=rnorm(100) . crrn = function(x, y){ x_bar = mean(x) y_bar = mean(y) crrn = sum((x-x_bar)*(y-y_bar)) / (sqrt(sum((x-x_bar)**2)) * sqrt(sum((y-y_bar)**2))) return(crrn) } . crrn(x,y) . [1] -0.2172038 . crrn(x,y) %&gt;% round(6) == cor(x,y) %&gt;% round(6) . [1] TRUE .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/11/17/R%EC%9E%85%EB%AC%B8-10%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/11/17/R%EC%9E%85%EB%AC%B8-10%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Nov 17, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "R입문 중간고사",
            "content": "1. R&#51012; &#51060;&#50857;&#54616;&#50668; &#45796;&#51020;&#51012; &#44228;&#49328;&#54616;&#50668;&#46972;. (3&#51216;) . (a) $2^{-5}+2^{3}$ . 2^(-5) + 2^3 . 8.03125 (b) $ sqrt{33}$ . sqrt(33) . 5.74456264653803 (c) $ sum_{k=1}^{100} frac{1}{k^2+2k+1}$ . summ = 0 for (k in 1:100){ summ = summ + 1/(k^2 +2*k +1) } summ . 0.635081929789834 2. &#45796;&#51020;&#51012; &#51096; &#51069;&#44256; &#47932;&#51020;&#50640; &#45813;&#54616;&#46972;. (2&#51216;) . (a) &#50500;&#47000;&#50752; &#44057;&#51008; &#49688;&#50676;&#51012; &#49373;&#49457;&#54616;&#46972;. . $$x=(-10,-9.5,-9.0,...,9.0,9.5,10)$$ . x =seq(from = -10, to = 10, by = 0.5) x . &lt;ol class=list-inline&gt;-10 | -9.5 | -9 | -8.5 | -8 | -7.5 | -7 | -6.5 | -6 | -5.5 | -5 | -4.5 | -4 | -3.5 | -3 | -2.5 | -2 | -1.5 | -1 | -0.5 | 0 | 0.5 | 1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 4.5 | 5 | 5.5 | 6 | 6.5 | 7 | 7.5 | 8 | 8.5 | 9 | 9.5 | 10 | &lt;/ol&gt; (b) &#49373;&#49457;&#46108; &#49688;&#50676;&#50640; &#45824;&#54616;&#50668; &#50500;&#47000;&#47484; &#47564;&#51313;&#54616;&#45716; $y$&#47484; &#44228;&#49328;&#54616;&#46972;. . $$y= begin{cases} x &amp; |x|&gt;5 0 &amp; |x| leq 2 5 &amp; o.w. end{cases}$$ print(ifelse(abs(x)&gt;5, x, ifelse(abs(x)&lt;=2, 0, 5))) . [1] -10 -9 -8 -7 -6 5 5 5 0 0 0 0 0 5 5 5 6 7 8 [20] 9 10 . 3. $x=(-10,-9,-8, dots,8,9,10)$&#50640; &#45824;&#54616;&#50668; $h(g(f(x)))$&#51032; &#44228;&#49328;&#44208;&#44284;&#47484; &#44396;&#54616;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#46972;. (10&#51216;) . 단, $f(x)$,$g(x)$, $h(x)$의 정의는 각각 아래와 같다. . $f(x)=2x+3 $ | $g(x)= frac{e^x}{1+e^x}$ | $h(x)=max(x,0)$ | . library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . x = -10:10 f &lt;- function(x){ 2*x+3 } g &lt;- function(x){ (exp(x))/(1+exp(x)) } h &lt;- function(x){ max(x, 0) } x %&gt;% f %&gt;% g %&gt;% h . 0.999999999897381 4. &#50500;&#47000;&#51473; &#50739;&#51008;&#44163;&#51008;? (O / X &#47196; &#45813;&#50504;&#51648;&#47484; &#50416;&#44256; &#45813;&#51032; &#44540;&#44144;&#44032; &#46104;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54624;&#44163;) (10&#51216;) . (a) $1= frac{1}{2}+ frac{1}{4} + frac{1}{8} dots $ . summ = 0 for (i in 1:50000){ summ = summ + (1/2)^i } summ #항이 많을수록 근사 정도가 좋다. . 1 $1 = dfrac{ dfrac{1}{2}}{1- dfrac{1}{2}}$ . 즉 (a)는 참(O)이다. . (b) $e^x= 1+x+x^2+x^3+ dots $ . f &lt;- function(x, k){ summ = 0 for (i in 0:k){ summ = summ + x^i } return(summ) } f(2,100) - exp(2) #f_b와 f_o의 함숫값이 현저하게 다르므로 같다고 보기 어렵다. . 2.53530120045646e+30 $e^x$의 테일러 급수는 $ sum_{n=0}^{ infty} frac{x^n}{n!}$이다. . 즉 (b)는 거짓(X)이다. . 5. &#45796;&#51020;&#51012; &#51069;&#44256; &#47932;&#51020;&#50640; &#45813;&#54616;&#46972;. (10&#51216;) . 다음은 어느 회사의 연봉에 대한 규정이다. . (가) 입사 첫째 해 연봉은 $a$원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. . (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 75%로 한다. . 이 회사에 입사한 사람이 28년동안 근무하여 받는 연봉의 총합은? . salary = c(1) for (i in 2:19){ salary[i] = salary[i-1]*(1.08) } salary[20:28] = salary[19] *(0.75) sum(salary) . 68.4193948584949 6. &#45796;&#51020; &#47928;&#51109;&#51012; &#51069;&#44256; &#52280;&#44144;&#51667;&#51012; &#54032;&#45800;&#54616;&#49884;&#50724;. (10&#51216;) . (a) _a&#45716; &#48320;&#49688;&#51060;&#47492;&#51004;&#47196; &#44032;&#45733;&#54616;&#45796;. . _a = 1 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예상하지 못한 입력입니다. 1: _ ^ Traceback: . 거짓(X) . (b) &#48289;&#53552;&#51032; &#50896;&#49548;&#45716; &#49688;&#52824;&#54805;(numeric)&#47564; &#44032;&#45733;&#54616;&#45796;. . a = c(&#39;1&#39;, &#39;d&#39;, &#39;k&#39;) a . &lt;ol class=list-inline&gt;&#39;1&#39; | &#39;d&#39; | &#39;k&#39; | &lt;/ol&gt; 거짓(X) . (c) &#45436;&#47532;&#54805;(logical)&#48320;&#49688;&#45716; &#49688;&#52824;&#54805; &#48320;&#49688;&#47196; &#48320;&#54872;&#54624; &#49688; &#50630;&#45796;. . as.numeric(TRUE) . 1 거짓(X) . (d) R&#50640;&#49436; {}&#45716; ()&#47196; &#48148;&#44992; &#49688; &#51080;&#45796;. . for (i in 1:3)( print(i) if (2!=1)( print(&quot;hello&quot;) ) ) . Error in parse(text = x, srcfile = src): &lt;text&gt;:3:5: 예기치 않은 &#39;if&#39;입니다 2: print(i) 3: if ^ Traceback: . for (i in 1:3){ print(i) if (2!=1){ print(&quot;hello&quot;) } } . [1] 1 [1] &#34;hello&#34; [1] 2 [1] &#34;hello&#34; [1] 3 [1] &#34;hello&#34; . 거짓(X) . 7. 100&#44060;&#51032; &#46972;&#52964; (15&#51216;) . 복도에 100개의 라커가 있다. 복도를 어떤 남자가 100개의 라커 문을 전부 연다. 그리고 나서 짝수 번호의 라커를 전부 닫는다. 그 다음에는 번호가 3의 배수인 라커를 순서대로 찾아다니며 열려 있으면 닫고, 닫혀 있으면 연다. 그 다음에는 번호가 4의 배수인 라커를 순서대로 찾아다니며 열려있으면 닫고, 닫혀있으면 연다. 이후에 5의 배수, 6의 배수 .. 인 라커를 순서대로 찾아다니며 행동을 반복한다. 이런식으로 복도를 100번 지나가면 열린 라커의 문은 몇개가 되겠는가? . #TRUE = OPEN #FALSE = CLOSED A = c(rep(TRUE, 100)) for (i in 2:100){ #배수 for (k in 1:100){ #몇번방 if (k%%i == 0){ if (A[k] == TRUE){ A[k] = FALSE } else { A[k] = TRUE } } } } sum(A) . 10 f &lt;- function(x) !x A = c(rep(TRUE, 100)) A = ifelse((A[(1:100)%%2 == 0] == TRUE), FALSE, TRUE) A . &lt;ol class=list-inline&gt;FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | FALSE | &lt;/ol&gt; f &lt;- function(x) !x A = c(rep(TRUE, 100)) for (i in 2:100){ A[(1:100)%%i == 0] = A[(1:100)%%i == 0] %&gt;% f } sum(A) . 10 8. &#47924;&#44417;&#54868; &#44867;&#51060; &#54588;&#50632;&#49845;&#45768;&#45796;. (25&#51216;) . 총 456명의 참가자가 &#39;무궁화 꽃이 피었습니다&#39; 게임에 참가한다. 기본적인 게임의 규칙은 아래와 같다. . 술래는 총 10회간 벽을 보고 &#39;무궁화 꽃이 피었습니다&#39; 를 외친다. . | 참가자는 술래가 있는 곳 까지 이동해야 살 수 있다. . | 술래는 벽을 보고 &#39;무궁화 꽃이 피었습니다&#39;를 외치다가 구호가 끝남과 동시에 뒤를 돌아본다. 이때 움직이는 사람은 죽는다 . | . 따라서 참가자는 술래가 벽을 보고 &#39;무궁화 꽃이 피었습니다&#39;를 외치는 동안만 이동할 수 있다. 욕심을 부려 더 이동하고자 하면 죽을 수 있다. 반대로 죽는 것을 지나치게 두려워한 나머지 매턴마다 조금씩만 이동한다면 10회의 제한횟수 내에 술래에게 도달하지 못하여 죽는다. . 게임환경과 관련된 세부적인 설정은 아래와 같다. . 술래와 참가자의 거리는 35이다. . | 술래는 처음 벽을 보고 $x$초간 무궁화 꽃이 피었습니다를 외친다. . | 모든 참가자는 1초에 거리1이상 움직일 수 없다고 가정한다. (예를들어 2.4초 동안은 최대 2.4의 거리를 이동할 수 있다. 반면 이동을 원치않으면 0의 거리만큼 움직이므로 0~2.4사이의 거리를 움직일 수 있다) . | . 술래와 참가자에 대한 설정값은 아래와 같다. . 술래에 대한 설정값 . 처음에는 술래가 10초간 무궁화 꽃이 피었습니다를 외친다. . | 그 다음에는 술래가 9.5초간 무궁화 꽃이 피었습니다를 외친다. . | 그 다음에도 0.5초씩 구호를 외치는 시간을 줄인다. 이것을 10회 반복한다. . | . 참가자에 대한 설정값 . 처음에는 참가자가 &quot;본인의번호/100&quot;을 계산하여 나온 숫자만큼 움직인다. 즉 10번 참가자는 0.1의 거리를 움직이고 456번 참가자는 4.56의 거리를 움직인다. . | 그 다음은 처음에 본인이 이동했던 거리에 1씩 더하여 움직인다. 즉 10번 참가자는 1.1의 거리를 움직이고 456번 참가자는 5.56의 거리를 움직인다. . | . - 예시2 . 300번 참가자의 경우 아래와 같이 이동하므로 . 1회 2회 3회 4회 5회 6회 . 술래의 외침시간 | 10 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | . 참가자의 이동폭 | 3 | 4 | 5 | 6 | 7 | 7.5 | . 참가자의 총 이동거리 | 3 | 7 | 12 | 18 | 25 | 32.5 | . 생존할 수 없다. (6회에서 32.5까지 이동후 사망) . - 예시2 . 350번 참가자의 경우 아래와 같이 이동하므로 . 1회 2회 3회 4회 5회 6회 . | . 술래의 외침시간 | 10 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | 참가자의 이동폭 | 3.5 | 4.5 | 5.5 | 6.5 | 7.5 | 8.5 | 참가자의 총 이동거리 | 3.5 | 8 | 13.5 | 20 | 27.5 | 35 (정확하게 7.5초간 이동하고 살아남는다) | . 생존 할 수 있다. . - 예시3 . 400번 참가자의 경우 아래와 같이 이동하므로 . 1회 2회 3회 4회 5회 6회 . | . 술래의 외침시간 | 10 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | 참가자의 이동폭 | 4 | 5 | 6 | 7 | 8 | 5 | 참가자의 총 이동거리 | 4 | 9 | 15 | 22 | 30 | 35 (5초간만 이동하면 35만큼 이동하므로 살아남는다)| . 생존 할 수 있다. . (a) 1&#48264;, 67&#48264;, 218&#48264;, 456&#48264; &#52280;&#44032;&#51088;&#51032; &#49373;&#51316;&#50668;&#48512;&#47484; &#54869;&#51064;&#54616;&#45716; &#54632;&#49688;&#47484; &#51089;&#49457;&#54616;&#46972;. . say = c(20:11/2) #술래의 외침시간 f &lt;- function(n){ move = c(n/100) summ = c(move[1]) for (i in 2:10){ move[i] = move[i-1] + 1 summ[i] = sum(move[1:i]) } return (rbind(move, summ)) } A = rbind(&#39;술래의 외침시간&#39; = say, &#39;참가자의 이동 폭&#39; = f(350)[1,], &#39;참가자의 총 이동거리&#39; = f(350)[2,]) colnames(A) = 1:10 A . A matrix: 3 × 10 of type dbl 12345678910 . 술래의 외침시간10.0 | 9.5 | 9.0 | 8.5 | 8.0 | 7.5 | 7.0 | 6.5 | 6.0 | 5.5 | . 참가자의 이동 폭 3.5 | 4.5 | 5.5 | 6.5 | 7.5 | 8.5 | 9.5 | 10.5 | 11.5 | 12.5 | . 참가자의 총 이동거리 3.5 | 8.0 | 13.5 | 20.0 | 27.5 | 36.0 | 45.5 | 56.0 | 67.5 | 80.0 | . say = c(20:11/2) #술래의 외침시간 f &lt;- function(n){ #n = 참가자의 번호 move = c(n/100) for (i in 2:10){ move[i] = move[i-1] + 1 if ((35 - sum(move[1:i-1]) &gt; say[i])&amp;(move[i] &gt; say[i])){ return(&quot;사망&quot;) break } if (sum(move) &gt;= 35){ return(&quot;생존&quot;) break } } } f(1) f(67) f(218) f(456) . &#39;사망&#39; &#39;사망&#39; &#39;생존&#39; &#39;사망&#39; 1번 사망 . 2번 사망 . 3번 생존 . 4번 사망 . (b) &#51204;&#52404; &#49373;&#51316;&#51088;&#51473; &#47751;&#47749;&#51060; &#49332;&#50500;&#45224;&#45716;&#51648; &#44228;&#49328;&#54616;&#46972;. . surv = 0 for (i in 1:456){ if ( f(i)== &quot;생존&quot;){ surv = surv + 1 } } surv . 85 생존자는 85명이다. . 9. &#45796;&#51020;&#51012; &#51096; &#51069;&#44256; &#49884;&#44033;&#54868; &#54616;&#46972;. (15&#51216;) . 다음은 인터넷에서 어떠한 자료를 다운받아 매트릭스로 저장하는 코드이다. . df=read.csv(&quot;https://raw.githubusercontent.com/miruetoto/yechan/master/_notebooks/round2.csv&quot;) mat=as.matrix(df) . 매트릭스는 mat이라는 변수에 저장되어 있다. . (a) mat&#51032; &#52395;&#48264;&#51704; &#50676;&#51012; $x$, &#46160;&#48264;&#51704;&#50676;&#51012; $y$&#47196; &#49373;&#44033;&#54616;&#44256; plot&#54632;&#49688;&#47484; &#53685;&#54616;&#50668; &#50500;&#47000;&#50752; &#44057;&#51008; &#49328;&#51216;&#46020;&#47484; &#44536;&#47140;&#46972;. . . df=read.csv(&quot;https://raw.githubusercontent.com/miruetoto/yechan/master/_notebooks/round2.csv&quot;) mat=as.matrix(df) plot(mat[,1], mat[,2]) . (b) &#47588;&#53944;&#47533;&#49828;&#51032; &#52395;&#48264;&#51704; &#54665;(first row)&#47484; &#52636;&#47141;&#54616;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#46972;. . - 힌트: 출력결과는 (12,313)이 나와야 한다. . mat[1,] . &lt;dl class=dl-inline&gt;x12y313&lt;/dl&gt; (c) (b)&#51032; &#44208;&#44284;&#50640; &#50500;&#47000;&#51032; &#50672;&#49328;&#51012; &#49688;&#54665;&#54616;&#45716; &#53076;&#46300;&#47484; &#51089;&#49457;&#54616;&#46972;. . $$ begin{bmatrix} 0 &amp; -1 -1 &amp; 0 end{bmatrix} begin{bmatrix} 12 313 end{bmatrix} $$ A = rbind(c(0, -1), c(-1,0)) B = rbind(c(12, 313)) dim(B) = c(2,1) A%*%B . A matrix: 2 × 1 of type dbl -313 | . -12 | . (d) (b)-(c) &#44284;&#51221;&#51012; mat&#51032; &#47784;&#46321;&#54665;&#50640; &#48152;&#48373;&#54616;&#50668; &#49352;&#47196;&#50868; &#47588;&#53944;&#47533;&#49828;&#47484; &#47564;&#46308;&#50612;&#46972;. . - 힌트: 아래의 과정을 따른다. . (i) mat와 동일한 dim을 가진 mat2를 만든다. | (ii) mat의 첫번째 행에 (b)-(c)의 과정을 적용하여 길이가 2인 벡터를 얻는다. | (iii) (ii)의 과정에서 얻은 벡터를 새로운 매트릭스의 첫번째 행에 넣는다. | (iv) mat의 두번째 행에 대하여 (ii)-(iii)의 과정을 반복한다. 이후 세번째, 네번째 행에 대하여 (ii)-(iii)의 과정을 반복한다. | . mat2=mat for (i in 1:5513){ mat2[i,] = A%*%mat[i,] } dim(mat2) mat2 . . &lt;ol class=list-inline&gt;5513 | 2 | &lt;/ol&gt; A matrix: 5513 × 2 of type dbl xy . -313 | -12 | . -314 | -12 | . -279 | -13 | . -311 | -13 | . -312 | -13 | . -313 | -13 | . -314 | -13 | . -315 | -13 | . -308 | -14 | . -309 | -14 | . -310 | -14 | . -311 | -14 | . -312 | -14 | . -313 | -14 | . -314 | -14 | . -315 | -14 | . -316 | -14 | . -317 | -14 | . -318 | -14 | . -319 | -14 | . -320 | -14 | . -321 | -14 | . -322 | -14 | . -306 | -15 | . -307 | -15 | . -308 | -15 | . -309 | -15 | . -310 | -15 | . -311 | -15 | . -313 | -15 | . ⋮ | ⋮ | . -375 | -636 | . -376 | -636 | . -377 | -636 | . -378 | -636 | . -379 | -636 | . -380 | -636 | . -381 | -636 | . -382 | -636 | . -383 | -636 | . -384 | -636 | . -385 | -636 | . -386 | -636 | . -391 | -636 | . -392 | -636 | . -393 | -636 | . -394 | -636 | . -395 | -636 | . -406 | -636 | . -407 | -636 | . -408 | -636 | . -409 | -636 | . -410 | -636 | . -411 | -636 | . -412 | -636 | . -413 | -636 | . -414 | -636 | . -415 | -636 | . -416 | -636 | . -417 | -636 | . -409 | -637 | . (e) (d)&#51032; &#44208;&#44284;&#47196; &#49373;&#49457;&#46104; &#47588;&#53944;&#47533;&#49828;&#51032; &#52395;&#48264;&#51704; &#50676;&#51012; x, &#46160;&#48264;&#51704; &#50676;&#51012; y&#47196; &#54616;&#44256; &#49328;&#51216;&#46020;&#47484; &#44536;&#47140;&#46972;. (&#51216;&#51032; &#49353;&#51008; &#48521;&#51008;&#49353;&#51004;&#47196; &#54616;&#46972;) . - 힌트: 아래와 같은 그림이 나와야 한다. . . plot(mat2[,1], mat2[,2], col = &#39;RED&#39;) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/exam/2021/11/04/R%EC%9E%85%EB%AC%B8-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC.html",
            "relUrl": "/introduction%20to%20r/exam/2021/11/04/R%EC%9E%85%EB%AC%B8-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC.html",
            "date": " • Nov 4, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "R : 데이터 타입",
            "content": "&#45936;&#51060;&#53552; &#53440;&#51077; . &#49688;&#52824;&#54805;(numeric) . 정수, 실수, 지수 등을 나타내며 실수가 기본형 | . a=345 mode(a) . [1] &#34;numeric&#34; . a=34.5556 mode(a) . [1] &#34;numeric&#34; . &#45436;&#47532;&#54805;(logical) . 참(TRUE)과 거짓(FALSE)를 나타낸다. | . A = TRUE mode(A) . [1] &#34;logical&#34; . A = F mode(A) . [1] &#34;logical&#34; . A = T mode(A) . [1] &#34;logical&#34; . &#47928;&#51088;&#54805;(character) . A = &quot;friendship&quot; mode(A) . [1] &#34;character&#34; . A = &quot;TRUE&quot; mode(A) . [1] &#34;character&#34; . A = &quot;1&quot; mode(A) . [1] &#34;character&#34; . &#48373;&#49548;&#49688;&#54805;(complex) . a = 1+3i b = 3+7i a+b . [1] 4+10i . mode(a) . [1] &#34;complex&#34; . mode(a+b) . [1] &#34;complex&#34; . &#51221;&#49688;&#54805;(integer) . 생략 | . &#45936;&#51060;&#53552; &#53440;&#51077; &#48320;&#54872; . &#52395; &#48264;&#51704; &#48169;&#48277; . a = &quot;1&quot; mode(a) . [1] &#34;character&#34; . mode(a) &lt;- &quot;numeric&quot; mode(a) . [1] &#34;numeric&#34; . a . [1] 1 . &#46160; &#48264;&#51704; &#48169;&#48277; . a = T as.numeric(a) . [1] 1 . a = F as.numeric(a) . [1] 0 . a = -1 as.logical(a) . [1] TRUE . a = 2 as.logical(a) . [1] TRUE . a = 2.22 as.logical(a) . [1] TRUE . a = 0 as.logical(a) . [1] FALSE . 강제형변환 | . a = &quot;asdfasfasf&quot; a = as.numeric(a) . Warning message in eval(expr, envir, enclos): &#34;강제형변환에 의해 생성된 NA 입니다&#34; . mode(a) . [1] &#34;numeric&#34; . as.logical(a) . [1] NA . a = as.logical(a) mode(a) . [1] &#34;logical&#34; . as.character(a) . [1] NA . &#49436;&#47196; &#45796;&#47480; &#54805;&#51004;&#47196; &#51060;&#47336;&#50612;&#51652; &#48289;&#53552;&#51032; mode . 문자형 섞여있으면 모두 문자형으로 바뀐다. | . a &lt;- c(1, T, &quot;1&quot;) a . [1] &#34;1&#34; &#34;TRUE&#34; &#34;1&#34; . mode(a) . [1] &#34;numeric&#34; . 문자형이 없으면 모두 numeric형으로 바뀐다. | . a &lt;- c(1, T) a . [1] 1 1 . mode(a) . [1] &#34;numeric&#34; . 서로 다른 형을 가진 벡터를 만들면 한가지 형으로 자동 형 변환이 된다. | . mode가 두 개일 수 없다. | . &#44284;&#51228; . A = matrix(1:9, ncol=3, byrow=TRUE) A . [,1] [,2] [,3] [1,] 1 2 3 [2,] 4 5 6 [3,] 7 8 9 . B = (-A) B[3,3] = -10 B . [,1] [,2] [,3] [1,] -1 -2 -3 [2,] -4 -5 -6 [3,] -7 -8 -10 . A + B . [,1] [,2] [,3] [1,] 0 0 0 [2,] 0 0 0 [3,] 0 0 -1 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/11/03/R%EC%9E%85%EB%AC%B8-8%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/11/03/R%EC%9E%85%EB%AC%B8-8%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Nov 3, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "R입문 중간고사 대비문제",
            "content": "#. R&#51012; &#51060;&#50857;&#54616;&#50668; &#45796;&#51020;&#51012; &#44228;&#49328;&#54616;&#50668;&#46972;. . $2^{-5}+2^{3}$ | . 2^(-5) + 2^3 . 8.03125 $ sqrt{33}$ | . sqrt(33) . 5.74456264653803 $ sum_{k=1}^{100} frac{1}{k^2+2k+1}$ | . summ = 0 for (k in 1:100){ summ = summ + 1/(k^2 +2*k +1) } print(summ) . [1] 0.6350819 . ... | . #. &#50500;&#47000;&#50752; &#44057;&#51008; &#49688;&#50676;&#51012; &#47564;&#46308;&#50612;&#46972;. . $(1,3,5,...,101)$ | . (0:50)*2 + 1 . &lt;ol class=list-inline&gt;1 | 3 | 5 | 7 | 9 | 11 | 13 | 15 | 17 | 19 | 21 | 23 | 25 | 27 | 29 | 31 | 33 | 35 | 37 | 39 | 41 | 43 | 45 | 47 | 49 | 51 | 53 | 55 | 57 | 59 | 61 | 63 | 65 | 67 | 69 | 71 | 73 | 75 | 77 | 79 | 81 | 83 | 85 | 87 | 89 | 91 | 93 | 95 | 97 | 99 | 101 | &lt;/ol&gt; ... | . #. &#50500;&#47000;&#50752; &#44057;&#51008; &#54632;&#49688;&#47484; &#49440;&#50616;&#54616;&#46972;. $x=1,2,3$ &#50640; &#45824;&#54616;&#50668; &#51452;&#50612;&#51652; &#54632;&#49688;&#51032; &#44208;&#44284;&#44050;&#51012; &#52636;&#47141;&#54616;&#46972;. . $f(x)=x^2$ | . f_x = function(x){ return (x^2) } print(f_x(1)) print(f_x(2)) print(f_x(3)) . [1] 1 [1] 4 [1] 9 . #. &#50500;&#47000;&#51473; &#50739;&#51008;&#44163;&#51008;? . (a) $e^x= sum_{n=0}^{ infty} frac{x^n}{n!}$ . (b) $e^x= 1+x+x^2+x^3+ dots $ . (c) $e^x= 1-(x-1)+(x-1)^2-(x-1)^3+ dots $ . f_o &lt;- function(x){ return(exp(x)) } f_o(5) f_a &lt;- function(x, k){ summ = 0 for (i in 0:k){ summ = summ + (x^i)/factorial(i) } return(summ) } f_a(5, 100) #f_a와 f_o의 함숫값이 같다. x^k항이 커질수록 근사 정도가 좋다. . 148.413159102577 148.413159102577 f_b &lt;- function(x, k){ summ = 0 for (i in 0:k){ summ = summ + x^i } return(summ) } f_b(2,100) f_o(2) #f_b와 f_o의 함숫값이 현저하게 다르므로 같다고 보기 어렵다. . 2.53530120045646e+30 7.38905609893065 f_c &lt;- function(x, k){ summ = 0 for (i in 0:k){ summ = summ + ( (-1)^i * (x-1)^i ) } return(summ) } f_c(2,100) f_o(2) #f_c와 f_o의 함숫값이 현저하게 다르므로 같다고 보기 어렵다. . 1 7.38905609893065 $lim_{x to infty}e^x = infty$ . $lim_{x to infty}1-(x-1)+(x-1)^2-(x-1)^3 + dots neq infty$ . $ therefore , e^x neq 1-(x-1)+(x-1)^2-(x-1)^3 + dots$ . f&lt;-function(x, n){ a = c() a[1] = x for (i in 2:n){ a[i] = a[i-1] * x / n } print(sum(a) + 1) } f(3, 10) . [1] 5.285689 . g &lt;- function(x . (풀이) . f&lt;-function(x,N){ a&lt;-c() a[1]=x for(n in 2:N) a[n]=a[n-1]*x/n sum(a)+1 } . g&lt;-function(x,N){ a&lt;-c() a[1]=x for(n in 2:N) a[n]=a[n-1]*x sum(a)+1 } . h&lt;-function(x,N){ a&lt;-c() a[1]= -(x-1) for(n in 2:N) a[n]=a[n-1]*(1-x) sum(a)+1 } . x=2 for (k in 5:20) print(c(exp(x)-f(x,k) , exp(x)-g(x,k), exp(x)-h(x,k))) . [1] 0.1223894 -55.6109439 7.3890561 [1] 0.03350054 -119.61094390 6.38905610 [1] 8.103718e-03 -2.476109e+02 7.389056e+00 [1] 1.754512e-03 -5.036109e+02 6.389056e+00 [1] 3.435769e-04 -1.015611e+03 7.389056e+00 [1] 6.138994e-05 -2.039611e+03 6.389056e+00 [1] 1.008322e-05 -4.087611e+03 7.389056e+00 [1] 1.532098e-06 -8.183611e+03 6.389056e+00 [1] 2.165414e-07 -1.637561e+04 7.389056e+00 [1] 2.860474e-08 -3.275961e+04 6.389056e+00 [1] 3.546512e-09 -6.552761e+04 7.389056e+00 [1] 4.142349e-10 -1.310636e+05 6.389056e+00 [1] 4.573142e-11 -2.621356e+05 7.389056e+00 [1] 4.786394e-12 -5.242796e+05 6.389056e+00 [1] 4.760636e-13 -1.048568e+06 7.389056e+00 [1] 4.529710e-14 -2.097144e+06 6.389056e+00 . $x=2$일때: $k$가 커질수록 $exp(x) approx f(x,k)$ 이지만 다른것은 그렇지 않음 | . x=3 for (k in 5:20) print(c(exp(x)-f(x,k) , exp(x)-g(x,k), exp(x)-h(x,k))) . [1] 1.685537 -343.914463 41.085537 [1] 0.6730369 -1072.9144631 -22.9144631 [1] 0.2391084 -3259.9144631 105.0855369 [1] 7.638514e-02 -9.820914e+03 -1.509145e+02 [1] 2.214407e-02 -2.950391e+04 3.610855e+02 [1] 5.871745e-03 -8.855291e+04 -6.629145e+02 [1] 1.433839e-03 -2.656999e+05 1.385086e+03 [1] 3.243623e-04 -7.971409e+05 -2.710914e+03 [1] 6.832928e-05 -2.391464e+06 5.481086e+03 [1] 1.346506e-05 -7.174433e+06 -1.090291e+04 [1] 2.492217e-06 -2.152334e+07 2.186509e+04 [1] 4.348086e-07 -6.457006e+07 -4.367091e+04 [1] 7.173653e-08 -1.937102e+08 8.740109e+04 [1] 1.122453e-08 -5.811307e+08 -1.747429e+05 [1] 1.669996e-09 -1.743392e+09 3.495451e+05 [1] 2.368168e-10 -5.230177e+09 -6.990309e+05 . x=10 for (k in 5:50) print(c(exp(x)-f(x,k) , exp(x)-g(x,k), exp(x)-h(x,k))) . [1] 20548.80 -89084.53 75170.47 [1] 19159.91 -1089084.53 -456270.53 [1] 17175.78 -11089084.53 4326698.47 [1] 14695.62 -111089084.53 -38720022.53 [1] 1.193989e+04 -1.111089e+09 3.487005e+08 [1] 9.184161e+03 -1.111109e+10 -3.138084e+09 [1] 6.678950e+03 -1.111111e+11 2.824298e+10 [1] 4.591274e+03 -1.111111e+12 -2.541866e+11 [1] 2.985370e+03 -1.111111e+13 2.287679e+12 [1] 1.838295e+03 -1.111111e+14 -2.058911e+13 [1] 1.073579e+03 -1.111111e+15 1.853020e+14 [1] 5.956311e+02 -1.111111e+16 -1.667718e+15 [1] 3.144854e+02 -1.111111e+17 1.500946e+16 [1] 1.582933e+02 -1.111111e+18 -1.350852e+17 [1] 7.608695e+01 -1.111111e+19 1.215767e+18 [1] 3.498377e+01 -1.111111e+20 -1.094190e+19 [1] 1.541083e+01 -1.111111e+21 9.847709e+19 [1] 6.514037e+00 -1.111111e+22 -8.862938e+20 [1] 2.645867e+00 -1.111111e+23 7.976644e+21 [1] 1.034129e+00 -1.111111e+24 -7.178980e+22 [1] 3.894339e-01 -1.111111e+25 6.461082e+23 [1] 1.414743e-01 -1.111111e+26 -5.814974e+24 [1] 4.963739e-02 -1.111111e+27 5.233476e+25 [1] 1.683850e-02 -1.111111e+28 -4.710129e+26 [1] 5.528535e-03 -1.111111e+29 4.239116e+27 [1] 1.758548e-03 -1.111111e+30 -3.815204e+28 [1] 5.424228e-04 -1.111111e+31 3.433684e+29 [1] 1.623837e-04 -1.111111e+32 -3.090315e+30 [1] 4.722033e-05 -1.111111e+33 2.781284e+31 [1] 1.334876e-05 -1.111111e+34 -2.503156e+32 [1] 3.671161e-06 -1.111111e+35 2.252840e+33 [1] 9.829419e-07 -1.111111e+36 -2.027556e+34 [1] 2.563938e-07 -1.111111e+37 1.824800e+35 [1] 6.519986e-08 -1.111111e+38 -1.642320e+36 [1] 1.617445e-08 -1.111111e+39 1.478088e+37 [1] 3.918103e-09 -1.111111e+40 -1.330279e+38 [1] 9.276846e-10 -1.111111e+41 1.197252e+39 [1] 2.182787e-10 -1.111111e+42 -1.077526e+40 [1] 5.093170e-11 -1.111111e+43 9.697737e+40 [1] 1.455192e-11 -1.111111e+44 -8.727964e+41 [1] 3.637979e-12 -1.111111e+45 7.855167e+42 [1] 3.637979e-12 -1.111111e+46 -7.069650e+43 [1] 3.637979e-12 -1.111111e+47 6.362685e+44 [1] 3.637979e-12 -1.111111e+48 -5.726417e+45 [1] 3.637979e-12 -1.111111e+49 5.153775e+46 [1] 3.637979e-12 -1.111111e+50 -4.638398e+47 . 답: (a) . #. &#45796;&#51020;&#51012; &#51069;&#44256; &#47932;&#51020;&#50640; &#45813;&#54616;&#46972;. . 다음은 어느 회사의 연봉에 대한 규정이다. . (가) 입사 첫째 해 연봉은 $a$원이고, 입사 19년째 해까지의 연봉은 해마다 직전 연봉에서 8%씩 인상된다. . (나) 입사 20년째 해부터의 연봉은 입사 19년째 해 연봉의 2/3로 한다. . 이 회사에 입사한 사람이 28년동안 근무하여 받는 연봉의 총합은? . salary = c(1) for (i in 1:19){ salary[i+1] = salary[i] * 1.08 } salary[20:28] = salary[19]*(2/3) sum(salary) # 총합은 65.4223802341062a이다. . 65.4223802341062 #. &#45796;&#51020; &#47928;&#51109;&#51012; &#51069;&#44256; &#52280;&#44144;&#51667;&#51012; &#54032;&#45800;&#54616;&#49884;&#50724;. . _a는 변수이름으로 가능하다. | . _a= 3 _a # _a는 변수 이름으로 가능하지 않다. . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예상하지 못한 입력입니다. 1: _ ^ Traceback: . ... | . # &#45796;&#51020;&#51012; &#51096; &#51069;&#44256; &#49884;&#44033;&#54868; &#54616;&#46972;. . 두점 $(1,2)$, $(1.1,2.1)$를 붉은 점으로 각각 시각화 하라. . | 동일한 플랏에 $(-1,-2)$, $(-1.1,-2.1)$을 푸른점으로 각각 시각화 하라. . | . x1 = c(1, 1.1) y1 = c(2, 2.1) x2 = -x1 y2 = -y1 plot(x1, y1,col=&#39;RED&#39;, xlim = c(-2,2), ylim = c(-3,3)) points(x2, y2, col=&#39;BLUE&#39;) . 출력예시 . # &#48380;&#47553;&#44277;&#51032; &#49440;&#53469; . A,B 두 사람이 볼링을 치고 있습니다. 두 사람은 서로 무게가 다른 볼링공을 고르려고 합니다. 볼링공은 총 N개가 있으며 각 볼링공마다 무게가 적혀 있고, 공의 번호는 1번부터 순서대로 부여됩니다. 또한 같은 무게의 공이 여러개 있을 수 있지만, 서로 다른 공으로 간주합니다. 볼링공의 무게는 1부터 M까지의 자연수 형태로 존재합니다. 예를들어 N이 5이고, M이 3이며 각각의 무게가 차례대로 1,3,2,3,2일 때 각 공의 번호가 차례대로 1번부터 5번까지 부여됩니다. 이때 두 사람이 고를 수 있는 볼링공 번호의 조합을 구하면 다음과 같습니다. . (1번,2번), (1번,3번), (1번,4번), (1번,5번), (2번,3번), (2번,5번), (3번,4번), (4번,5번) . 결과적으로 두 사람이 공을 고르는 경우의 수는 8가지입니다. N개의 공의 무게가 각각 주어질 때, 두 사람이 볼링공을 고르는 경우의 수를 구하는 프로그램을 작성하세요. . - 입력예시 . 입력 5 3 1 3 2 3 2 출력 8 . library(tidyverse) . -- Attaching packages - tidyverse 1.3.1 -- v ggplot2 3.3.5 v purrr 0.3.4 v tibble 3.1.5 v dplyr 1.0.7 v tidyr 1.1.4 v stringr 1.4.0 v readr 2.0.2 v forcats 0.5.1 -- Conflicts - tidyverse_conflicts() -- x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() . a = c(1, 3, 2, 3, 2) N = 5 M = 3 A = expand.grid(a, a) A = mutate(A, C = Var1 &lt; Var2) A = filter(A, C==TRUE) sum(A[,3]) . 8",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/exam/2021/11/02/(A3)-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC-%EB%8C%80%EB%B9%84%EB%AC%B8%EC%A0%9C.html",
            "relUrl": "/introduction%20to%20r/exam/2021/11/02/(A3)-%EC%A4%91%EA%B0%84%EA%B3%A0%EC%82%AC-%EB%8C%80%EB%B9%84%EB%AC%B8%EC%A0%9C.html",
            "date": " • Nov 2, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "볼링공 고르기",
            "content": "&#48380;&#47553;&#44277; &#44256;&#47476;&#44592; . Problem . A, B 두 사람이 볼링을 치고 있습니다. 두 사람은 서로 무게가 다른 볼링공을 고르려고 합니다. 볼링공은 총 N 개가 있으며 각 볼링공마다 무게가 적혀 있고, 공의 번호는 1번부터 순서대로 부여됩니다. . 또한 같은 무게의 공이 여러 개 있을 수 있지만, 서로 다른 공으로 간주합니다. 볼링공의 무게는 1부터 M까지의 자연수 형태로 존재합니다. . 예를 들어 N이 5이고, M이 3이며 각각의 무게가 차례대로 1, 3, 2, 3, 2일 때 각 공의 번호가 차레대로 1번부터 5번까지 부여됩니다. 이때 두 사람이 고를 수 있는 볼링공 번호의 조합을 구하면 다음과 같습니다. . (1번, 2번), (1번, 3번), (1번, 4번), (1번, 5번), (2번, 3번), (2번, 5번), (3번, 4번), (4번, 5번) . 결과적으로 두 사람이 공을 고르는 경우의 수는 8가지입니다. N개의 공의 무게가 각각 주어질 때, 두 사람이 볼링공을 고르는 경우의 수를 구하는 프로그램을 작성하세요. . Example . 입력 예시 | . 입력 5 3 1 3 2 3 2 출력 8 . Solution I . N = 5 M = 3 a = c(1,3,2,3,2) count = 0 for (i in 1:length(a)){ for(j in 1:length(a)){ if ((a[i] != a[j]) &amp; (j &gt; i)) count = count + 1 } } count . [1] 8 . Solution II . ((a[i] != a[j]) &amp; (j &gt; i))에서 (j &gt; i)는 for문 선언부에서 처리할 수 있다. | . N = 5 M = 3 a = c(1,3,2,3,2) count = 0 for (i in 1:length(a)){ for(j in i:length(a)){ if (a[i] != a[j]) count = count + 1 } } count . [1] 8 . Solution III . 매트릭스를 이용하여 푼다. | . a = c(1,3,2,3,2) A = rep(0, 25*2) dim(A) = c(25,2) k=1 for (i in 1:5){ for (j in 1:5){ A[k,] &lt;- c(a[i], a[j]) k = k + 1 } } vec1 &lt;- c() #무게가 같은 것을 뽑으면 FALSE for (i in 1:25){ vec1[i] = A[i,1] != A[i,2] } k=1 vec2 &lt;- c() #중복되는 것을 뽑으면 FALSE for (i in 1:5){ for (j in 1:5){ vec2[k] = (j&gt;i) k=k+1 } } sum(vec1&amp;vec2) #모두 TRUE인 것의 개수 . [1] 8 . Solution IV . Solution III의 간단한 형태. | . a = c(1,3,2,3,2) A = rep(0, 25*2) dim(A) = c(25,2) k=1 for (i in 1:5){ for (j in 1:5){ A[k,] &lt;- c(a[i], a[j]) k = k + 1 } } vec1 &lt;- c() vec2 &lt;- c() for (i in 1:25){ vec1[i] &lt;- (A[i, 1] != A[i, 2]) vec2[i] &lt;- (A[i, 1] &gt; A[i, 2]) } sum(vec1&amp;vec2) . [1] 8 . Solution V . a = c(1,3,2,3,2) A = rep(0, 25*2) dim(A) = c(25,2) k=1 for (i in 1:5){ for (j in 1:5){ A[k,] &lt;- c(a[i], a[j]) k = k + 1 } } vec1 &lt;- (A[,1] != A[,2]) vec2 &lt;- (A[,1] &gt; A[,2]) sum(vec1&amp;vec2 ) . [1] 8 . Solution VI . 생각해보니 단순히 첫번째 열이 두번째 열보다 큰지만 체크해도 된다. | . a = c(1,3,2,3,2) A = rep(0, 25*2) dim(A) = c(25,2) k=1 for (i in 1:5){ for (j in 1:5){ A[k,] &lt;- c(a[i], a[j]) k = k + 1 } } sum( A[,1] &lt; A[,2] ) . [1] 8 . A . [,1] [,2] [1,] 1 1 [2,] 1 3 [3,] 1 2 [4,] 1 3 [5,] 1 2 [6,] 3 1 [7,] 3 3 [8,] 3 2 [9,] 3 3 [10,] 3 2 [11,] 2 1 [12,] 2 3 [13,] 2 2 [14,] 2 3 [15,] 2 2 [16,] 3 1 [17,] 3 3 [18,] 3 2 [19,] 3 3 [20,] 3 2 [21,] 2 1 [22,] 2 3 [23,] 2 2 [24,] 2 3 [25,] 2 2 . &#51648;&#44552;&#44620;&#51648; &#54400;&#51060; &#51221;&#47532; . 풀이 1 ~ 2 : 매트릭스를 사용하지 않음. . 풀이 3 ~ 6 : 매트릭스를 사용함. . 현재까지는 풀이2가 가장 간결하고 루프도 적게 돌아간다. 그러나 풀이 1 ~ 2는 수정 및 디버깅이 어렵다, -&gt; 예외사항을 처리하기 어려움. . 풀이 3 ~ 6은 루프가 많이 돌아가지만 수정 및 디버깅이 쉽다. . Solution VII - Data Frame . 사실 R에는 A를 바로 구하는 함수가 존재한다. | . expand.grid($x_1 dots x_2$): 벡터를 입력으로 받아서 그 벡터의 원소가 만들어내는 순서쌍 조합을 데이터프레임 형태로 리턴한다. | . mutate(): 데이터프레임에서 새로운 column를 추가하는 기능 (기존의 column을 활용하여 만들 수도 있다.) | . filter(): 데이터프레임에서 특정조건을 만족하는 행을 필터링 하는 기능 | . count(): 데이터프레임의 행의 숫자를 세어주는 기능 | . as.numeric(): numeric type(숫자형)으로 변경하는 기능 | . a = c(1,3,2,3,2) A = expand.grid(a, a) A . Var1 Var2 1 1 1 2 3 1 3 2 1 4 3 1 5 2 1 6 1 3 7 3 3 8 2 3 9 3 3 10 2 3 11 1 2 12 3 2 13 2 2 14 3 2 15 2 2 16 1 3 17 3 3 18 2 3 19 3 3 20 2 3 21 1 2 22 3 2 23 2 2 24 3 2 25 2 2 . library(tidyverse) . A %&gt;% mutate(C= Var1&gt; Var2) %&gt;% filter(C==TRUE) %&gt;% count -&gt; result . result . n 1 8 . 데이터프레임 형식으로 나오니 상수로 바꿔주자. . as.numeric(result) . [1] 8 . &#44284;&#51228; . A %&gt;% mutate(C= Var1 - Var2 &gt; 0) %&gt;% filter(C==TRUE) %&gt;% count %&gt;% as.numeric() . [1] 8 . Solution VIII . %*% 연산자 : 행렬의 곱셈 . | a %in% c(4, 9) : a의 모든 원소를 조사하고 그 원소가 4 또는 9 이면 TRUE, 그렇지 않으면 FALSE . | . a &lt;- c(1,3,2,3,2) a1 &lt;- a -&gt; a2 dim(a1) &lt;- c(5,1) #A dim(a2) &lt;- c(1,5) #A^T A = a1 %*% a2 A #대칭행렬이다. . [,1] [,2] [,3] [,4] [,5] [1,] 1 3 2 3 2 [2,] 3 9 6 9 6 [3,] 2 6 4 6 4 [4,] 3 9 6 9 6 [5,] 2 6 4 6 4 . . upper.tri() | . upper.tri(A) . [,1] [,2] [,3] [,4] [,5] [1,] FALSE TRUE TRUE TRUE TRUE [2,] FALSE FALSE TRUE TRUE TRUE [3,] FALSE FALSE FALSE TRUE TRUE [4,] FALSE FALSE FALSE FALSE TRUE [5,] FALSE FALSE FALSE FALSE FALSE . sum(!A[upper.tri(A)] %in% c(4, 9)) . [1] 8 . Solution IX . a &lt;- c(1,3,2,3,2) A = outer(a, a) A . [,1] [,2] [,3] [,4] [,5] [1,] 1 3 2 3 2 [2,] 3 9 6 9 6 [3,] 2 6 4 6 4 [4,] 3 9 6 9 6 [5,] 2 6 4 6 4 . sum(!A[upper.tri(A)] %in% c(4,9)) . [1] 8 . &#51648;&#44552;&#44620;&#51648; &#54400;&#51060; &#51221;&#47532; . 풀이 7 : 데이터프레임 활용 $ to$ 사용하기 쉽고 확장성이 좋다. . 풀이 8, 9 : 코드가 간결함 / 오류가 발생할 수 있음 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/27/R%EC%9E%85%EB%AC%B8-7%EC%A3%BC%EC%B0%A8-2%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/27/R%EC%9E%85%EB%AC%B8-7%EC%A3%BC%EC%B0%A8-2%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 27, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "R : matrix",
            "content": "&#47588;&#53944;&#47533;&#49828;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . &#48169;&#48277;1 : row-vector -&gt; rbind . rbind(c(1,2,3,4),c(2,3,4,5)) . [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 2 3 4 5 . &#48169;&#48277;2 : column-vector -&gt; cbind . cbind(c(1,2,3,4),c(2,3,4,5)) . [,1] [,2] [1,] 1 2 [2,] 2 3 [3,] 3 4 [4,] 4 5 . &#47588;&#53944;&#47533;&#49828;&#51032; &#52264;&#50896;(dimension) . A = rbind(c(1,2,3,4),c(2,3,4,5)) dim(A) . [1] 2 4 . B = cbind(c(1,2,3,4),c(2,3,4,5)) dim(B) . [1] 4 2 . 차원을 바꿀 수도 있다. | . B . [,1] [,2] [1,] 1 2 [2,] 2 3 [3,] 3 4 [4,] 4 5 . dim(B) = c(2,4) . B . [,1] [,2] [,3] [,4] [1,] 1 3 2 4 [2,] 2 4 3 5 . &#47588;&#53944;&#47533;&#49828;&#51032; &#50896;&#49548;&#47484; &#48977;&#45716; &#48169;&#48277; . A = rbind(c(1,2,3,4),c(5,6,7,8),c(9,10,11,12)) A . [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 5 6 7 8 [3,] 9 10 11 12 . A[1,] # 1행을 뽑고싶다. . [1] 1 2 3 4 . A[,1] # 1열을 뽑고싶다. . [1] 1 5 9 . A[, c(1,4)] # 1열, 4열을 뽑고싶다. . [,1] [,2] [1,] 1 4 [2,] 5 8 [3,] 9 12 . A[c(1,2),] # 1행, 2행을 뽑고싶다. . [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 5 6 7 8 . A[2,3] # 2행3열의 원소를 뽑고싶다. . [1] 7 . apply &#54632;&#49688; . apply(matrix, 1, 특정함수) . 를 쓰면 어떠한 특정한수가 각각의 row에 적용되어서 결과가 array로 저장된다. . 여기에서 특정함수는 &quot;벡터입력-스칼라출력&quot;이라고 생각하자, 즉 벡터입력-스칼라입력인 함수를 적용할 수 있다. . sum(c(1,2,3,4)) # 벡터입력 -&gt; 스칼라출력 . [1] 10 . mean(c(1,2,3,4)) # 벡터입력 -&gt; 스칼라출력 . [1] 2.5 . 아래 함수는 벡터입력-벡터출력 이므로 해당되지 않는다. | . sqrt(c(1,2,3,4)) # 벡터입력 -&gt; 벡터출력 . [1] 1.000000 1.414214 1.732051 2.000000 . &#51201;&#50857; . A . [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 5 6 7 8 [3,] 9 10 11 12 . apply(A, 1, sum) . [1] 10 26 42 . apply(A, 1, mean) . [1] 2.5 6.5 10.5 . apply(A, 1, min) . [1] 1 5 9 . apply(A, 1, max) . [1] 4 8 12 . 사용자가 임의로 정의한 함수도 가능하다. | . f = function(a) (min(a)+1)**2 -3 . apply(A, 1, f) . [1] 1 33 97 . 숫자 1을 2로 변경하면 특정함수가 각각의 column에 적용된다. | . apply(A, 2, f) . [1] 1 6 13 22 . apply(A, 2, sum) . [1] 15 18 21 24 . apply(A, 2, min) . [1] 1 2 3 4 . apply(A, 2, max) . [1] 9 10 11 12 . %&gt;% &#50672;&#49328;&#51088;($ star star star$) . 아주 중요한 문법이다. . 아래는 같은 코드이다. | . library(tidyverse) . sum(1:10) . [1] 55 . 1:10 %&gt;% sum() . [1] 55 . 1:10 %&gt;% sum . [1] 55 . 아래는 같은 코드이다. | . myfun = function(x,y) x**2 +y myfun(2,3) . [1] 7 . myfun = function(x,y) x**2 +y 2 %&gt;% myfun(3) . [1] 7 . 아래는 같은 코드이다. | . myfun2 = function(x,y,z) x**2 +y*z myfun2(2,1,1) . [1] 5 . myfun2 = function(x,y,z) x**2 +y*z 2 %&gt;% myfun2(1,1) . [1] 5 . &#49324;&#50857;&#54616;&#45716; &#51060;&#50976; . 합성함수 처리가 쉽다. . | 아래는 같은 코드이다. . | . 2:5 %&gt;% log %&gt;% sqrt %&gt;% sum %&gt;% myfun2(1,1) %&gt;% sqrt . [1] 4.440805 . sqrt(myfun2(sum(sqrt(log(2:5))), 1, 1)) . [1] 4.440805 . 아래와 같은 느낌 | . $g(h(f(x)))$ . $x to f to h to g$ . &#49884;&#44036;&#48708;&#44368; . t1 = Sys.time() t1 . [1] &#34;2021-11-03 20:25:14 KST&#34; . t2 = Sys.time() t2 . [1] &#34;2021-11-03 20:25:14 KST&#34; . t2-t1 . Time difference of 0.156733 secs . A = sample(1:9, size =100*2000000, replace=TRUE) dim(A) &lt;- c(2000000,100) A . [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [1,] 4 5 2 6 5 1 5 6 1 8 &lt;U+22EF&gt; 3 8 [2,] 7 3 2 4 5 9 3 1 5 2 &lt;U+22EF&gt; 3 9 [3,] 6 8 4 9 3 3 3 7 5 6 &lt;U+22EF&gt; 3 8 [4,] 6 5 9 6 7 5 1 6 7 7 &lt;U+22EF&gt; 7 3 [5,] 9 9 6 9 5 6 3 6 5 8 &lt;U+22EF&gt; 6 8 [6,] 4 4 8 1 7 3 4 9 4 1 &lt;U+22EF&gt; 8 4 [7,] 5 6 6 9 4 9 5 1 8 2 &lt;U+22EF&gt; 1 6 [8,] 6 8 6 5 6 8 8 2 3 2 &lt;U+22EF&gt; 3 1 [9,] 1 5 2 5 2 3 8 5 2 1 &lt;U+22EF&gt; 8 6 [10,] 3 4 2 9 9 9 5 7 3 4 &lt;U+22EF&gt; 9 3 [11,] 1 1 2 7 3 3 6 3 1 9 &lt;U+22EF&gt; 1 8 [12,] 3 6 9 6 9 9 7 2 9 2 &lt;U+22EF&gt; 8 6 [13,] 6 7 4 5 7 1 2 8 7 2 &lt;U+22EF&gt; 8 2 [14,] 4 8 8 7 6 3 5 4 5 4 &lt;U+22EF&gt; 5 7 [15,] 7 2 1 1 9 3 8 6 3 1 &lt;U+22EF&gt; 5 6 [16,] 9 8 5 3 2 7 1 7 6 3 &lt;U+22EF&gt; 1 6 [17,] 1 5 8 9 5 3 9 1 6 4 &lt;U+22EF&gt; 6 5 [18,] 7 1 9 9 7 5 9 4 2 3 &lt;U+22EF&gt; 7 5 [19,] 3 3 1 7 4 6 2 4 1 1 &lt;U+22EF&gt; 8 4 [20,] 5 3 5 3 1 2 9 4 6 8 &lt;U+22EF&gt; 1 7 [21,] 4 1 3 2 2 8 3 7 3 8 &lt;U+22EF&gt; 7 6 [22,] 1 7 9 9 6 3 1 9 7 8 &lt;U+22EF&gt; 6 9 [23,] 6 1 8 3 4 6 1 5 2 3 &lt;U+22EF&gt; 5 3 [24,] 1 6 9 2 4 2 3 8 5 4 &lt;U+22EF&gt; 5 1 [25,] 5 2 9 1 3 7 4 8 4 3 &lt;U+22EF&gt; 8 1 [26,] 6 8 5 1 9 4 1 8 7 1 &lt;U+22EF&gt; 8 7 [27,] 3 1 1 2 3 1 9 4 9 6 &lt;U+22EF&gt; 9 5 [28,] 4 2 3 1 8 3 2 4 2 7 &lt;U+22EF&gt; 2 6 [29,] 8 6 6 1 5 6 3 4 3 3 &lt;U+22EF&gt; 5 7 [30,] 6 2 9 3 6 7 8 1 3 6 &lt;U+22EF&gt; 2 9 [31,] &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22F1&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; [32,] 5 3 1 3 7 4 3 6 5 7 &lt;U+22EF&gt; 2 3 [33,] 6 1 6 5 4 1 5 1 6 6 &lt;U+22EF&gt; 6 5 [34,] 6 7 1 6 7 8 9 4 1 8 &lt;U+22EF&gt; 9 7 [35,] 8 7 8 1 3 9 4 3 6 9 &lt;U+22EF&gt; 4 2 [36,] 6 5 6 8 1 2 4 5 7 8 &lt;U+22EF&gt; 8 2 [37,] 7 1 9 5 9 5 9 2 6 2 &lt;U+22EF&gt; 3 3 [38,] 4 3 4 5 9 7 9 4 2 9 &lt;U+22EF&gt; 1 5 [39,] 7 4 2 8 9 8 5 4 4 3 &lt;U+22EF&gt; 9 9 [40,] 2 2 5 4 1 7 8 4 8 6 &lt;U+22EF&gt; 3 1 [41,] 5 7 9 8 4 7 9 9 8 2 &lt;U+22EF&gt; 8 3 [42,] 8 5 3 4 4 6 5 5 9 4 &lt;U+22EF&gt; 4 5 [43,] 2 8 5 5 6 1 8 4 7 3 &lt;U+22EF&gt; 4 2 [44,] 5 8 6 1 7 7 5 7 2 4 &lt;U+22EF&gt; 2 2 [45,] 6 6 6 3 6 3 7 8 5 8 &lt;U+22EF&gt; 7 9 [46,] 7 5 6 5 3 7 4 7 3 3 &lt;U+22EF&gt; 9 8 [47,] 3 4 2 2 5 4 6 4 3 9 &lt;U+22EF&gt; 9 4 [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [1,] 4 2 4 1 4 9 4 5 [2,] 4 7 7 9 4 5 4 7 [3,] 5 9 5 8 3 5 4 6 [4,] 2 9 1 8 5 9 1 2 [5,] 7 8 6 9 2 9 1 7 [6,] 7 9 9 3 9 7 2 6 [7,] 7 8 9 4 9 5 2 9 [8,] 9 4 2 8 9 6 6 1 [9,] 4 8 2 2 6 4 1 3 [10,] 1 3 3 4 2 2 5 8 [11,] 9 9 5 2 3 1 5 2 [12,] 4 7 4 4 2 5 1 1 [13,] 1 8 1 7 4 9 8 8 [14,] 7 1 8 6 4 1 8 2 [15,] 7 1 4 7 5 7 3 1 [16,] 8 7 1 2 6 4 2 3 [17,] 6 9 5 3 1 3 9 4 [18,] 8 4 9 4 7 2 9 7 [19,] 7 4 8 3 5 9 3 1 [20,] 5 7 6 6 8 1 6 8 [21,] 3 5 4 1 9 1 9 8 [22,] 5 3 9 9 9 8 3 5 [23,] 4 7 3 2 6 4 1 6 [24,] 9 1 3 4 2 3 2 5 [25,] 8 6 8 4 2 9 2 1 [26,] 6 3 4 4 6 9 1 2 [27,] 7 5 1 8 2 7 1 9 [28,] 2 6 3 3 7 6 4 8 [29,] 1 6 4 7 7 9 5 7 [30,] 9 1 7 4 5 1 9 1 [31,] &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; &lt;U+22EE&gt; [32,] 4 9 7 6 4 9 3 5 [33,] 5 1 1 2 9 2 5 1 [34,] 2 2 9 4 4 4 2 1 [35,] 1 2 8 5 7 6 2 5 [36,] 1 6 8 8 2 5 7 1 [37,] 7 4 8 1 9 1 8 8 [38,] 2 3 8 7 5 9 9 2 [39,] 3 9 5 5 3 6 2 5 [40,] 8 8 7 4 3 3 8 6 [41,] 2 3 1 7 8 4 6 7 [42,] 1 4 8 9 6 9 7 6 [43,] 4 3 8 9 7 8 9 8 [44,] 4 4 9 3 7 6 8 1 [45,] 7 8 9 9 6 2 5 7 [46,] 6 1 6 1 4 8 5 2 [47,] 5 2 5 8 5 9 5 4 [ getOption(&#34;max.print&#34;) 에 도달했습니다 -- 14 행들을 생략합니다 ] . . t1=Sys.time() A %&gt;% apply(1,min) %&gt;% max t2=Sys.time() t2-t1 . [1] 2 . Time difference of 10.82146 secs . t1 = Sys.time() vec &lt;- c() for (i in 1:dim(A)[1]) vec[i] &lt;- min(A[i,]) max(vec) t2=Sys.time() t2-t1 . [1] 2 . Time difference of 5.11485 secs . for문이 더 빠르지만 코드는 apply가 더 간결하다. | .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/25/R%EC%9E%85%EB%AC%B8-7%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/25/R%EC%9E%85%EB%AC%B8-7%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 25, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "숫자 카드 게임",
            "content": "Problem . 숫자 카드 게임은 여러 개의 숫자 카드 중에서 가장 높은 숫자가 쓰인 카드 한 장을 뽑는 게임이다. . 단, 게임의 룰을 지키며 카드를 뽑아야 하고 룰은 다음과 같다. . 숫자가 쓰인 카드들이 N x M 형태로 놓여 있다. 이때 N은 행의 개수를 의미하며, M은 열의 개수를 의미한다. . | 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다. . | 그 다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다. . | 따라서 처음에 카드를 골라낼 행을 선택할 때, 이후에 해당 행에서 가장 숫자가 낮은 카드를 뽑을 것을 고려하여 최종적으로 가장 높은 숫자의 카드를 뽑을 수 있도록 전략을 세워야 한다. . | &#50696;&#49884;1 . 입력 3 1 2 4 1 4 2 2 2 . 출력 2 . &#50696;&#49884; 2 . 입력 7 3 1 8 3 3 3 4 . 출력 3 . Solution . A = rbind(c(3,1,2), c(4,1,4), c(2,2,2)) A . [,1] [,2] [,3] [1,] 3 1 2 [2,] 4 1 4 [3,] 2 2 2 . A[1,] . [1] 3 1 2 . A[2,] . [1] 4 1 4 . A[,1] . [1] 3 4 2 . A[1, 2] . [1] 1 . vec = c() for (i in 1:3){ vec[i] = min(A[i,]) } max(vec) . [1] 2 . &#44284;&#51228; . 입력이 아래와 같을 때, 출력을 구하는 코드를 작성하시오. . 입력 3 4 5 1 7 7 7 2 8 1 8 2 3 3 4 5 . A = rbind(c(3,4,5,1), c(7,7,7,2), c(8,1,8,2), c(3,3,4,5)) A . [,1] [,2] [,3] [,4] [1,] 3 4 5 1 [2,] 7 7 7 2 [3,] 8 1 8 2 [4,] 3 3 4 5 . Solution I . vec = c() for (i in 1:4){ vec[i] = min(A[i,]) } max(vec) . [1] 3 . Solution II . max(apply(A, 1, min)) #A : 입력 매트릭스, 1 : row기준, 2 : column기준 . [1] 3 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/19/R%EC%9E%85%EB%AC%B8-6%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/19/R%EC%9E%85%EB%AC%B8-6%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 19, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "R : 연산자",
            "content": "&#50672;&#49328;&#51088; . &#49328;&#49696;&#50672;&#49328;&#51088; . 사칙연산 : +, -, *, / | . 나머지연산 : %% | . 몫연산 : %/% | . 제곱 : a^b | . Example . 2+3 #덧셈 . [1] 5 . 6-2 #뺄셈 . [1] 4 . 4*8 #곱셈 . [1] 32 . 9/3 #나눗셈 . [1] 3 . 31 %% 7 #나머지 . [1] 3 . 31 %/% 7 #몫 . [1] 4 . 2^10 #제곱 . [1] 1024 . &#45436;&#47532;&#50672;&#49328;&#51088; . TRUE = 1 | . FALSE = 0 | . !TRUE = FALSE = 0 | . !FALSE = TRUE = 1 | . x = c(T,T,F,F,T) x . [1] TRUE TRUE FALSE FALSE TRUE . y = c(TRUE, FALSE, TRUE, FALSE, TRUE) y . [1] TRUE FALSE TRUE FALSE TRUE . print(x) print(!x) . [1] TRUE TRUE FALSE FALSE TRUE [1] FALSE FALSE TRUE TRUE FALSE . print(y) print(!y) . [1] TRUE FALSE TRUE FALSE TRUE [1] FALSE TRUE FALSE TRUE FALSE . Application . 1부터 100까지의 자연수 중 3의 배수만 출력하고 싶다. | . x = 1:100 x . [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 [91] 91 92 93 94 95 96 97 98 99 100 . x[x %% 3 == 0] . [1] 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 [26] 78 81 84 87 90 93 96 99 . 1부터 100까지의 자연수 중 3의 배수가 아닌 것을 출력하고 싶다. | . x[x %% 3 != 0] . [1] 1 2 4 5 7 8 10 11 13 14 16 17 19 20 22 23 25 26 28 [20] 29 31 32 34 35 37 38 40 41 43 44 46 47 49 50 52 53 55 56 [39] 58 59 61 62 64 65 67 68 70 71 73 74 76 77 79 80 82 83 85 [58] 86 88 89 91 92 94 95 97 98 100 . x[!(x %% 3 == 0)] . [1] 1 2 4 5 7 8 10 11 13 14 16 17 19 20 22 23 25 26 28 [20] 29 31 32 34 35 37 38 40 41 43 44 46 47 49 50 52 53 55 56 [39] 58 59 61 62 64 65 67 68 70 71 73 74 76 77 79 80 82 83 85 [58] 86 88 89 91 92 94 95 97 98 100 . AND, OR . &amp; : AND . | : OR . TRUE&amp;TRUE . [1] TRUE . TRUE&amp;FALSE . [1] FALSE . FALSE&amp;TRUE . [1] FALSE . FALSE&amp;FALSE . [1] FALSE . TRUE|TRUE . [1] TRUE . TRUE|FALSE . [1] TRUE . FALSE|TRUE . [1] TRUE . FALSE|FALSE . [1] FALSE . &amp;&amp;, ||를 사용하면 첫 번째 원소만 비교 | . x = c(T,T,F,F,T) y = c(F,T,T,F,T) x&amp;&amp;y . [1] FALSE . x = c(T,T,F,F,T) y = c(T,T,T,F,T) x&amp;&amp;y . [1] TRUE . x = c(T,T,F,F,T) y = c(F,T,T,F,T) x||y . [1] TRUE . x = c(F,T,F,F,T) y = c(F,T,T,F,T) x||y . [1] FALSE . 아래처럼 해도 된다. | . x = c(T,T,F,F,T) y = c(F,T,T,F,T) (x&amp;y)[1] . [1] FALSE . x = c(T,T,F,F,T) y = c(T,T,T,F,T) (x&amp;y)[1] . [1] TRUE . x = c(T,T,F,F,T) y = c(F,T,T,F,T) (x|y)[1] . [1] TRUE . x = c(F,T,F,F,T) y = c(F,T,T,F,T) (x|y)[1] . [1] FALSE . &#48708;&#44368;&#50672;&#49328;&#51088; . a == b | . a != b | . a &gt;= b | . a &lt;= b | . 절대 =!, =&lt;. =&gt;로 쓰면 안된다. . &#54624;&#45817;&#50672;&#49328;&#51088; . a &lt;- 1 a . [1] 1 . 2 -&gt; a a . [1] 2 . a = 1 a . [1] 1 . a = b = 5 a b . [1] 5 . [1] 5 . a &lt;- b &lt;- 0 a b . [1] 0 . [1] 0 . a &lt;- 4 -&gt; b a b . [1] 4 . [1] 4 . f &lt;- function(x) x**2 f(100) . [1] 10000 . g = function(x) x**3 g(5) . [1] 125 . ; &#50672;&#49328;&#51088; . a=2; b=1 c(a, b) . [1] 2 1 . a=5;b=0; c(a,b) . [1] 5 0 . &#50672;&#49328;&#51088; &#50864;&#49440;&#49692;&#50948;&#50640; &#45824;&#54616;&#50668; . 연산자 우선순위에 의문이 드는 경우, 복잡하게 생각하지 말고 그냥 괄호를 사용하자 | . &#44284;&#51228; . $-100 leq x leq 100$의 범위에서 아래와 같은 y를 생성하라. . $y= begin{cases} x &amp; |x| &gt; 5 5 &amp; 2&lt;|x| leq 5 0 &amp; |x| leq 2 end{cases}$ . x = -100:100/10 x . [1] -10.0 -9.9 -9.8 -9.7 -9.6 -9.5 -9.4 -9.3 -9.2 -9.1 -9.0 -8.9 [13] -8.8 -8.7 -8.6 -8.5 -8.4 -8.3 -8.2 -8.1 -8.0 -7.9 -7.8 -7.7 [25] -7.6 -7.5 -7.4 -7.3 -7.2 -7.1 -7.0 -6.9 -6.8 -6.7 -6.6 -6.5 [37] -6.4 -6.3 -6.2 -6.1 -6.0 -5.9 -5.8 -5.7 -5.6 -5.5 -5.4 -5.3 [49] -5.2 -5.1 -5.0 -4.9 -4.8 -4.7 -4.6 -4.5 -4.4 -4.3 -4.2 -4.1 [61] -4.0 -3.9 -3.8 -3.7 -3.6 -3.5 -3.4 -3.3 -3.2 -3.1 -3.0 -2.9 [73] -2.8 -2.7 -2.6 -2.5 -2.4 -2.3 -2.2 -2.1 -2.0 -1.9 -1.8 -1.7 [85] -1.6 -1.5 -1.4 -1.3 -1.2 -1.1 -1.0 -0.9 -0.8 -0.7 -0.6 -0.5 [97] -0.4 -0.3 -0.2 -0.1 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 [109] 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [121] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 [133] 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 [145] 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 [157] 5.6 5.7 5.8 5.9 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 [169] 6.8 6.9 7.0 7.1 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 [181] 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 9.0 9.1 [193] 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . y = ifelse(abs(x) &gt; 5, x, ifelse((2&lt;abs(x))&amp;(abs(x)&lt;=5), 5, 0)) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/07/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-4%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/07/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-4%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 7, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "R : switch, repeat, break, next",
            "content": "switch() . switch(1, a1=c(1,2,3),a2=20,a3=c(30,40)) . [1] 1 2 3 . switch(2, a1=c(1,2,3),a2=20,a3=c(30,40)) . [1] 20 . switch(3, a1=c(1,2,3),a2=20,a3=c(30,40)) . [1] 30 40 . switch(&#39;a1&#39;, a1=c(1,2,3),a2=20,a3=c(30,40)) . [1] 1 2 3 . switch(&#39;a2&#39;, a1=c(1,2,3),a2=20,a3=c(30,40)) . [1] 20 . switch(&#39;a3&#39;, a1=c(1,2,3),a2=20,a3=c(30,40)) . [1] 30 40 . myfun &lt;- function(x,f){ switch(f, mean = mean(x), sqmean = mean(x**2), var = mean((x-mean(x))**2) ) } x = 1:5 myfun(x, &#39;mean&#39;) myfun(x, &#39;sqmean&#39;) myfun(x, &#39;var&#39;) . [1] 3 . [1] 11 . [1] 2 . repeat . repeat{ ~~ }는 while(TRUE){ ~~ }와 같다. . total=0 i=1 repeat{ if (i == 101) break total = total + i i = i + 1 } print(total) . [1] 5050 . break . 현재 반복문을 완전히 종료합니다. | . for (i in 1:5){ if (i == 3){ break }else { print(i) } } . [1] 1 [1] 2 . next . 현재 반복문의 해당 회차를 건너 뜁니다. | . for (i in 1:5){ if (i == 3){ next }else { print(i) } } . [1] 1 [1] 2 [1] 4 [1] 5 . for (i in 1:5){ if (i == 3) next else print(i)} . [1] 1 [1] 2 [1] 4 [1] 5 . total=0 i=1 while(TRUE){ if (i == 101) break total = total + i i = i + 1 } print(total) . [1] 5050 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/07/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-3%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/07/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-3%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 7, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "R : ifelse()",
            "content": "ifelse()&#51032; &#44592;&#48376; &#44396;&#51312; . ifelse(조건, 조건이 TRUE이면 실행, 조건이 FALSE이면 실행) . Problem . 절댓값을 출력하는 코드를 작성하라 | . Solution I . 다소 복잡한 코드 . 아래 코드는 복잡하다는 생각이 든다. | . absolute &lt;- function(x){ for (i in 1:length(x)){ if (x[i] &gt; 0){ x[i] = x[i] }else{ x[i] = -x[i] } } print(x) } x = -10:10 plot(absolute(x)) . [1] 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 . Solution II . ifelse문을 사용한 간결한 코드 . friend &lt;- function(x){ ifelse(x&gt;0, x, -x) } x = -10:10 friend(x) . [1] 10 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 10 . &#51060;&#47088; &#44163;&#46020; &#44032;&#45733; . y = ifelse(x &lt; 0, -x, ifelse(x &lt; 4, 0, x)) y plot(y) . [1] 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 5 6 7 8 9 10 . plot(x,x) points(x,y, col = 2, pch = 16) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/07/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-2%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/07/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-2%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 7, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "평균과 비율에 대한 추론",
            "content": "from math import * . &#54217;&#44512;&#44284; &#48708;&#50984;&#50640; &#45824;&#54620; &#52628;&#47200; . 표본 통계량의 분포가 정규분포일 때, 신뢰구간은 다음과 같이 구한다. . 표본 통계량 $ pm z^* cdot SE$ . 임의화 분포가 정규분포일 때, 표준화한 검증 통계량은 다음과 같이 구한다. . $z = cfrac{ text{표본 통계량 - 영가설의 모수값}}{ text{표준오차}}$ . 2.1 &#48708;&#50984;&#50640; &#45824;&#54620; &#52628;&#47200; . 2.1-CI &#48708;&#50984;&#50640; &#45824;&#54620; &#49888;&#47280;&#44396;&#44036; . $ np geq 10, ,n(1-p) geq 10$이면 정규분포로 근사할 수 있다. . 표본 통계량 $ pm z^* cdot SE$ . $ hat{p} pm z^* cdot SE$ . $ hat{p} pm z^* sqrt{ dfrac{ hat{p}(1- hat{p})}{n}}$ . def ci_single_p(p, z, n): SE = sqrt(p*(1-p)/n) print(&quot;신뢰구간 : ({0}, {1})&quot;.format(p-z*SE, p+z*SE)) return . ci_single_p(0.52, 1.96, 100) . 신뢰구간 : (0.42207843138511314, 0.6179215686148869) . &#54364;&#48376; &#53356;&#44592; &#44208;&#51221;&#54616;&#44592; . 오차한계 $=z^* cdot SE = z^* cdot sqrt{ dfrac{ hat{p}(1- hat{p})}{n}}$ 이므로 . $n = left( cfrac{z^*}{ text{오차한계}} right)^2 hat{p}(1- hat{p})$ 이 때, 소수점이 있으면 올림한다. . 표본 비율 $ hat{p}$의 합리적인 추정이 가능하지 않다면 $ hat{p} = 0.5$를 사용한다. . def n_single_p(z, 오차한계, p_hat): print(&#39;n :&#39;,ceil((z/오차한계)**2 * p_hat*(1-p_hat))) return . n_single_p(2.327, 0.04, 0.5) . n : 847 . n_single_p(1.96, 0.01, 0.32) . n : 8360 . 2.1-HT &#48708;&#50984;&#50640; &#45824;&#54620; &#44032;&#49444;&#44160;&#51613; . $np_0 geq 10, ,n(1-p_0) geq10$이면 p-값은 표준정규분포에서 계산한다. . $z = cfrac{ text{표본 통계량 - 영가설의 모수값}}{ text{표준오차}}$ . $z = cfrac{ hat{p} - p_0}{SE}$ . $SE$&#45716; &#50612;&#46523;&#44172; &#52628;&#51221;&#54624; &#44163;&#51064;&#44032;? . 가설검증은 영가설 $H_0$가 참일 때 기대되는 분포에서 표본 비율 $ hat{p}$이 발생할 가능성을 평가한다. 영가설이 참임을 가정하므로 표준오차를 계산할 때 $p$ 대신에 $p_0$를 사용한다. 표준오차를 추정할 때, $ hat{p}$를 사용하면 절대로 안된다. . $SE = sqrt{ dfrac{p_0(1-p_0)}{n}}$ . $ therefore z = cfrac{ hat{p} - p_0}{ sqrt{ dfrac{p_0(1-p_0)}{n}}}$ . def test_single_p(p_hat, p_0, n): print(&#39;z :&#39;,(p_hat-p_0)/(sqrt(p_0*(1-p_0)/n))) return . test_single_p(0.59, 0.5, 340) . z : 3.3190360046254384 . test_single_p(0.555, 1/3, 119) . z : 5.129560166330054 . 위에서 구한 z-값으로 StatKey에서 p-값을 구한 뒤 기각 여부를 결정하자. . 2.2 &#54217;&#44512;&#50640; &#45824;&#54620; &#52628;&#47200; . $ dfrac{ sigma}{ sqrt{n}}$대신$ dfrac{s}{ sqrt{n}}$을 이용하여 표준화한 통계량의 분포는 표준정규분포가 아닌 t-분포이다. . $SE = dfrac{s}{ sqrt{n}}$ . def se_single_mean(s, n): print(&#39;SE :&#39;, s/sqrt(n)) return . 2.2-CI &#54217;&#44512;&#50640; &#45824;&#54620; &#49888;&#47280;&#44396;&#44036; . 표준정규분포 대신에 t-분포를 사용하기 때문에 $z^*$대신에 $t^*$를 사용한다. . 표본 통계량 $ pm ,z^* cdot dfrac{ sigma}{ sqrt{n}} approx $ 표본 통계량 $ pm ,t^* cdot dfrac{s}{ sqrt{n}} $ . $ bar{x} pm t^* cdot dfrac{s}{ sqrt{n}}$ . def ci_single_mean(x, t, s, n): print(&quot;신뢰구간 : ({0}, {1})&quot;.format(x-t*s/sqrt(n), x+t*s/sqrt(n))) return . ci_single_mean(369.52, 2.042, 16.16, 31) . 신뢰구간 : (363.593254927903, 375.446745072097) . &#54364;&#48376; &#53356;&#44592; &#44208;&#51221;&#54616;&#44592; . $ME = t^* dfrac{s}{ sqrt{n}}$ . 아직 표본이 없기 때문에 표준편차를 모른다. 따라서 $s$ 대신 $ tilde{ sigma}$로 추정한다. . $ tilde{ sigma}$를 합리적으로 추정하는 4가지 방법 . 선형 연구의 표준편차를 사용하거나 유사 모집단의 표본으로부터 $ tilde{ sigma}$를 추정한다. | 사전 조사로 작은 표본을 얻어 $ tilde{ sigma}$를 추정한다. | 모집단에서 범위(최댓값-최솟값)를 추정한다. 범위를 4로 나눈 값을 $ tilde{ sigma}$로 사용한다. 즉 $ tilde{ sigma} approx text{범위} / 4$이다. 이는 대부분의값들이 평균에서 두 배의 표준편차 안에 있을 것이라고 가정하는 것이다. | $ tilde{ sigma}$를 합리적으로 추측한다. | . $n = left( dfrac{t^* cdot s}{ME} right)^2 approx left( dfrac{t^* cdot tilde{ sigma}}{ME} right)^2$ . 2.2-HT &#54217;&#44512;&#50640; &#45824;&#54620; &#44032;&#49444;&#44160;&#51613; . $z = cfrac{ text{표본 통계량 - 영가설의 모수값}}{ text{표준오차}}$ . $ z = cfrac{ bar{x} - mu_0}{SE}$ . $ z = dfrac{ bar{x} - mu_0}{ dfrac{s}{ sqrt{n}}}$ . def test_single_mean(x, mu_0, s, n): print(&quot;t :&quot;, (x-mu_0)/(s/sqrt(n))) return . test_single_mean(37.5, 35, 38.2, 53) . t : 0.47644698228275634 . 2.3 &#48708;&#50984; &#52264;&#51060;&#50640; &#45824;&#54620; &#52628;&#47200; . 2.3-D. &#46160; &#44060;&#51032; &#48708;&#50984; &#52264;&#51060;&#51032; &#48516;&#54252; . $SE = sqrt{ dfrac{p_1(1-p_1)}{n_1} + dfrac{p_2(1-p_2)}{n_2}}$ . $n_1p_1 geq 10, , n_1(1-p_1) geq 10, , n_2p_2 geq 10, , n_2(1-p_2) geq 10$이면 정규분포로 근사할 수 있다. . 2.4-CI. &#46160; &#44060;&#51032; &#48708;&#50984; &#52264;&#51060;&#50640; &#45824;&#54620; &#49888;&#47280;&#44396;&#44036; . $n_1p_1 geq 10, , n_1(1-p_1) geq 10, , n_2p_2 geq 10, , n_2(1-p_2) geq 10$이면 정규분포로 근사할 수 있다. . 표본 통계량 $ pm z^* cdot SE$ . $( hat{p}_1 - hat{p}_2) pm z^* sqrt{ dfrac{ hat{p}_1(1- hat{p}_1)}{n_1} + dfrac{ hat{p}_2(1- hat{p}_2)}{n_2}}$ . def se_dif_p(p1, p2, n1, n2): print(&quot;SE :&quot;, sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2)) . def ci_dif_p(p1, p2, n1, n2, z): SE = sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2) ME = z*SE print(&quot;SE :&quot;, SE) print(&quot;ME :&quot;, ME) print(&quot;신뢰구간 : ({0}, {1})&quot;.format(p1-p2-z*SE, p1-p2+z*SE)) return . se_dif_p(0.72, 0.68, 500, 300) . SE : 0.03359365019365019 . ci_dif_p(0.72, 0.68, 500, 300, 1.96) . SE : 0.03359365019365019 ME : 0.06584355437955437 신뢰구간 : (-0.025843554379554448, 0.1058435543795543) . 2.3-HT &#48708;&#50984; &#52264;&#51060;&#50640; &#45824;&#54620; &#44032;&#49444;&#44160;&#51613; . 합동 비율 $ hat{p} = cfrac{X_1 + X_2}{n_1 + n_2}$ . $SE = sqrt{ cfrac{ hat{p}(1- hat{p})}{n_1} + cfrac{ hat{p}(1- hat{p})}{n_2}}$ . 영가설은 보통 $H_0 : p_1 = p_2$ 또는 $H_0 : p_1 - p_2 = 0$이다. 이 경수 영가설의 모수값은 0이다. . $z = cfrac{ text{표본 통계량 - 영가설의 모수값}}{ text{표준오차}}$ . $z = cfrac{( hat{p}_1 - hat{p}_2)}{SE}$ . $z = cfrac{( hat{p}_1 - hat{p}_2)}{ sqrt{ cfrac{ hat{p}(1- hat{p})}{n_1} + cfrac{ hat{p}(1- hat{p})}{n_2}}}$ . def test_dif_p(p_1, p_2, p_합, n_1, n_2): print(&quot;z :&quot;,(p_1 - p_2)/sqrt(p_합*(1-p_합)/n_1 + p_합*(1-p_합)/n_2)) return . test_dif_p(0.768, 0.463, 0.631, 82, 67) . z : 3.838160838927777 . test_dif_p(0.490, 0.604, 0.528, 382, 192) . z : -2.5813282857985933 . 2.4 &#54217;&#44512; &#52264;&#51060;&#50640; &#45824;&#54620; &#52628;&#47200; . 2.4-D &#54217;&#44512; &#52264;&#51060;&#51032; &#48516;&#54252; . $SE = sqrt{ dfrac{ sigma_1^2}{n_1} + dfrac{ sigma_2^2}{n_2}}$ . def se_dif_mean(sigma1, sigma2, n1, n2): print(&quot;SE :&quot;, sqrt(sigma1**2/n1 + sigma2**2/n2)) return . se_dif_mean(8.8, 7.41, 20, 30) . SE : 2.387942629126588 . se_dif_mean(3.7, 7.6, 25, 40) . SE : 1.41124058898545 . se_dif_mean(18,14,8,15) . SE : 7.318925239860472 . se_dif_mean(1.7,1.8,230,230) . SE : 0.1632549353405387 . 0.9/0.163 . 5.521472392638037 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20statistics/2021/10/05/%ED%86%B5%EA%B3%84%ED%95%99-%EC%9E%85%EB%AC%B8-%ED%8F%89%EA%B7%A0%EA%B3%BC-%EB%B9%84%EC%9C%A8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%B6%94%EB%A1%A0.html",
            "relUrl": "/introduction%20to%20statistics/2021/10/05/%ED%86%B5%EA%B3%84%ED%95%99-%EC%9E%85%EB%AC%B8-%ED%8F%89%EA%B7%A0%EA%B3%BC-%EB%B9%84%EC%9C%A8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%B6%94%EB%A1%A0.html",
            "date": " • Oct 5, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "R : while()",
            "content": "while() &#51032; &#44592;&#48376; &#44396;&#51312; . while (조건){ (조건이 TRUE이면 실행, FALSE이면 PASS) } . Problem 1 . . Solution I - for . px = c() py = c() px[1] = 1 py[1] = 1 for (n in 1:2**12){ if ((px[n]==10)&amp;(py[n]==2^10)){ print(n) break }else{ if (py[n] &lt; 2**(px[n])){ px[n+1] = px[n] py[n+1] = py[n] + 1 }else{ px[n+1] = px[n] + 1 py[n+1] = 1 } } } . [1] 2046 . $n = 2046 = 2048 - 2 = 2^{11} - 2$ . Solution II - while . p_x = c() p_y = c() p_x[1] = 1 p_y[1] = 1 n = 1 while (TRUE){ if ((px[n]==10)&amp;(py[n]==2^10)){ print(n) break }else{ if (py[n] &lt; 2**(px[n])){ px[n+1] = px[n] py[n+1] = py[n] + 1 }else{ px[n+1] = px[n] + 1 py[n+1] } n = n + 1 } } . [1] 2046 . &#44284;&#51228; . for (x in (-5:100)){ if (x &gt;= 0){ break }else{ print(&quot;x는음수&quot;) } } . [1] &#34;x는음수&#34; [1] &#34;x는음수&#34; [1] &#34;x는음수&#34; [1] &#34;x는음수&#34; [1] &#34;x는음수&#34; . 1. 2007년 대학수학능력시험 9월 모의평가 수학영역(나형) 16번↩ .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/10/05/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-1%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/10/05/R%EC%9E%85%EB%AC%B8-5%EC%A3%BC%EC%B0%A8-1%ED%95%84%EA%B8%B0.html",
            "date": " • Oct 5, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "Monte Carlo Integration in Python",
            "content": "&#47788;&#53580; &#52852;&#47484;&#47196; &#51201;&#48516;(Monte Carlo Integration) . Problem . Find $ int_0^1 (x + sin( pi x)) ,dx$. . Solution I - Analytic Sol . $ int_0^1 (x + sin( pi x)) ,dx = left[ cfrac{1}{2} x^2- cfrac{1}{ pi}cos( pi x) right]_0^1 = cfrac{1}{2} + cfrac{1}{ pi} + cfrac{1}{ pi} = cfrac{1}{2}+ cfrac{2}{ pi}$ . Solution II - Monte Carlo Integration in Python . import numpy as np import matplotlib.pyplot as plt . def function(x): return x + np.sin(np.pi*x) x = np.linspace(0, 1, 10000) y = [function(x) for x in x] plt.plot(x, y) plt.show() . . . S = 사각형 영역 . def function(x): #함수 정의 return x + np.sin(np.pi*x) N = 5000 # Random Sampling 시행 횟수 W = 1 # 사각형의 가로 길이 H = 1.6 #사각형의 세로 길이 X = np.random.random(N) # 0~1까지의 x 좌표 Random Sampling을 N번 시행 Y = H * np.random.random(N) # 그래프상 최솟값 ~ 최댓값까지의 y 좌표 Randon Sampling을 N번 시행 F = function(X) # Random Sampling으로 구한 X값에 따른 함숫값 in_or_out = Y &lt; F # Y &lt; F (IN)이면 True, Y &gt; F (OUT)이면 False A = H * W * np.sum(in_or_out) / N # 영역 S의 넓이 print(A) . 1.15328 . Visualization . color = list(map(lambda x: &#39;blue&#39; if x == True else &#39;red&#39;, in_or_out)) #색 정하기 x = np.linspace(0, 1, 10000) #함수 그리기 y = [function(x) for x in x] plt.plot(x, y, color = &#39;black&#39;) plt.scatter(X, Y, color = color, s=5, label=&#39;A = {}&#39;.format(np.round(A, 4))) plt.legend(loc = &#39;lower right&#39;) #범례(legend) 위치 plt.plot([0, W], [0, 0], color=&#39;black&#39;) # 사각형 영역 plt.plot([W, W], [0, H], color=&#39;black&#39;) plt.plot([0, W], [H, H], color=&#39;black&#39;) plt.plot([0, 0], [0, H], color=&#39;black&#39;) plt.xlabel(&#39;x&#39;) plt.ylabel(&#39;y&#39;) plt.grid() plt.show() .",
            "url": "https://stahangryum.github.io/stahangryum/python/2021/10/03/%EB%AA%AC%ED%85%8C-%EC%B9%B4%EB%A5%BC%EB%A1%9C.html",
            "relUrl": "/python/2021/10/03/%EB%AA%AC%ED%85%8C-%EC%B9%B4%EB%A5%BC%EB%A1%9C.html",
            "date": " • Oct 3, 2021"
        }
        
    
  
    
        ,"post22": {
            "title": "파이썬에서 그래프 그리기",
            "content": "import matplotlib . import matplotlib.pyplot as plt import numpy as np import scipy import sympy as sp . plt.plot([1, 2, 3, 4]) plt.show() . &#51221;&#44508;&#48516;&#54252; &#44536;&#47000;&#54532; . Normal Distribution | $N( mu, sigma^2)$ | . $f(x) = cfrac{1}{ sqrt{2 pi} sigma}e^{- cfrac{(x- mu)^2}{2 sigma^2}}$ . Standard Normal Distribution | $N(0, 1)$ | . $f(x) = cfrac{1}{ sqrt{2 pi}}e^{- cfrac{x^2}{2}}$ . def st_normal_distribution(x): f = np.sqrt(1/(2*np.pi))*(np.exp(-(x**2)/2)) return f x = range(-5, 5) y = [st_normal_distribution(x) for x in x] plt.plot(x, y) . [&lt;matplotlib.lines.Line2D at 0x236495dc7c0&gt;] . x = np.linspace(-5, 5, 10000) y = [st_normal_distribution(x) for x in x] plt.plot(x, y) plt.show() . x = np.random.normal(size =10000) plt.hist(x, bins=1000) plt.show() . &#54364;&#51456;&#51221;&#44508;&#48516;&#54252; &#47732;&#51201; &#44396;&#54616;&#44592; . &#47788;&#53580; &#52852;&#47484;&#47196; &#51201;&#48516; . def st_normal_distribution(x): return np.sqrt(1/(2*np.pi))*(np.exp(-(x**2)/2)) def area(X): N = int(1e+4) W = 2*X H = 0.5 X = W*np.random.random(N)-W/2 Y = H*np.random.random(N) F = st_normal_distribution(X) in_or_out = Y &lt; F A = H * W * np.sum(in_or_out) / N print(A) color = list(map(lambda x: &#39;blue&#39; if x == True else &#39;red&#39;, in_or_out)) #색 정하기 x = np.linspace(0, 1, 1000) #함수 그리기 y = [st_normal_distribution(x) for x in x] plt.plot(x, y, color = &#39;black&#39;) plt.scatter(X, Y, color = color, s=5, label=&#39;A = {}&#39;.format(np.round(A, 4))) plt.legend(loc = &#39;lower right&#39;) #범례(legend) 위치 plt.plot([0, W], [0, 0], color=&#39;black&#39;) # 사각형 영역 plt.plot([W, W], [0, H], color=&#39;black&#39;) plt.plot([0, W], [H, H], color=&#39;black&#39;) plt.plot([0, 0], [0, H], color=&#39;black&#39;) plt.xlabel(&#39;x&#39;) plt.ylabel(&#39;y&#39;) plt.grid() plt.show() . area(1.96) # 95% 신뢰구간 . 0.9535399999999999 . area(2.58) # 99% 신뢰구간 . 0.974982 . area(1.645) # 90% 신뢰구간 . 0.8999795 . &#48512;&#51221;&#51201;&#48516; . def st_normal_distribution(x): f = np.sqrt(1/(2*np.pi))*(np.exp(-(x**2)/2)) return f .",
            "url": "https://stahangryum.github.io/stahangryum/python/2021/10/03/%EA%B7%B8%EB%9E%98%ED%94%84.html",
            "relUrl": "/python/2021/10/03/%EA%B7%B8%EB%9E%98%ED%94%84.html",
            "date": " • Oct 3, 2021"
        }
        
    
  
    
        ,"post23": {
            "title": "Taylor & Maclaurin Series",
            "content": "Taylor Series . $ f(x) = sum_{n=0}^ infty cfrac{f^{(n)}(a)}{n!}(x-a)^n qquad quad= f(a) + cfrac{f&#39;(a)}{1!}(x-a) + cfrac{f&#39;&#39;(a)}{2!}(x-a) + cfrac{f&#39;&#39;&#39;(a)}{3!}(x-a)+ cdots $ . Maclaurin Series . $ f(x) = sum_{n=0}^ infty cfrac{f^{(n)}(0)}{n!}(x-0)^n qquad quad = f(a) + cfrac{f^{ prime}(0)}{1!}(x-0) + cfrac{f^{ prime prime}(0)}{2!}(x-0) + cfrac{f^{ prime prime prime}(0)}{3!}(x-0)+ cdots $ . Examples . $ cfrac{1}{1-x} = sum_{n=0}^ infty{x^n} = 1+x+x^2+x^3+ cdots qquad R = 1 , e^x = sum_{n=0}^ infty cfrac{x^n}{n!} = 1 + cfrac{x}{1!} + cfrac{x^2}{2!} + cfrac{x^3}{3!}+ cdots qquad R = infty , sin ,x = sum_{n=0}^ infty(-1)^n cfrac{x^{2n+1}}{(2n+1)!} = x - cfrac{x^3}{3!} + cfrac{x^5}{5!} - cfrac{x^7}{7!}+ cdots qquad R = infty , cos ,x = sum_{n=0}^ infty(-1)^n cfrac{x^{2n}}{(2n)!} = 1 - cfrac{x^2}{2!} + cfrac{x^4}{4!} - cfrac{x^6}{6!}+ cdots qquad R = infty , tan^{-1} ,x = sum_{n=0}^ infty(-1)^n cfrac{x^{2n+1}}{(2n+1)} = x - cfrac{x^3}{3} + cfrac{x^5}{5} - cfrac{x^7}{7}+ cdots qquad R = 1 , ln(1+x) = sum_{n=1}^ infty(-1)^{n-1} cfrac{x^{n}}{n} = x - cfrac{x^2}{2} + cfrac{x^3}{3} - cfrac{x^4}{4}+ cdots qquad R = 1 $ .",
            "url": "https://stahangryum.github.io/stahangryum/calculus/2021/10/02/%ED%85%8C%EC%9D%BC%EB%9F%AC-%EA%B8%89%EC%88%98.html",
            "relUrl": "/calculus/2021/10/02/%ED%85%8C%EC%9D%BC%EB%9F%AC-%EA%B8%89%EC%88%98.html",
            "date": " • Oct 2, 2021"
        }
        
    
  
    
        ,"post24": {
            "title": "R : if()",
            "content": "&#51312;&#44148;&#47928;&#51032; &#44592;&#48376; &#44396;&#51312; . if (조건1){ (조건1이 TRUE이면 실행, FALSE이면 pass) } else if (조건2){ (조건1이 FALSE이고 조건2가 TRUE일 때 실행,) } else { (조건1과 조건2가 모두 FALSE일 때 실행) . Example . a = 10 if (a &gt; 0){ print(&quot;a는 양수이다.&quot;) } else if (a &lt; 0){ print(&quot;a는 음수이다.&quot;) } else if (a == 0){ print(&quot;a는 0이다.&quot;) } else { print(&quot;a는 실 수가 아니다.&quot;) } . [1] &#34;a는 양수이다.&#34; . NOTE . 다음과 같은 코드는 가급적 작성하지 마시오. . 임의로 Space나 Enter를 넣어도 상관없다. | 다만, 가독성 떨어질 수 있으니 유의하라. | . if (a &gt; 0) {print(&quot;a는 양수이다.&quot;)} . [1] &#34;a는 양수이다.&#34; . if (a &gt; 0){ print(&quot;a는 양수이다.&quot;)} . [1] &#34;a는 양수이다.&#34; . 조건에 벡터가 사용될 경우, 첫 번째 요소만이 사용된다. | 다만, 굳이 코드를 이렇게 작성할 필요는 없다. | . if ((4:10) &gt; 3){ print(&quot;우엉징&quot;) } . Warning message in if ((4:10) &gt; 3) {: &#34;length &gt; 1 이라는 조건이 있고, 첫번째 요소만이 사용될 것입니다&#34; . [1] &#34;우엉징&#34; . 위 코드의 조건문을 보면, 좌변에서 벡터의 첫 번째 요소인 &#39;4&#39;가 사용되었으므로 (4 &gt; 3) &lt;- TRUE . if ((2:10) &gt; 3){ print(&quot;우징엉&quot;) } . Warning message in if ((2:10) &gt; 3) {: &#34;length &gt; 1 이라는 조건이 있고, 첫번째 요소만이 사용될 것입니다&#34; . 위 코드의 조건문을 보면, 좌변에서 벡터의 첫 번째 요소인 &#39;2&#39;가 사용되었으므로 (2 &gt; 3) &lt;- TRUE . NOTE2 . 아래는 잘못된 예이다. | . if (5 &gt; 3){ print(&quot;우징엉&quot;) } else{ print(&quot;오징엉&quot;) } . Error in parse(text = x, srcfile = src): &lt;text&gt;:4:1: 예기치 않은 &#39;else&#39;입니다 3: } 4: else ^ Traceback: . 위 코드에서, LINE3에서 컴퓨터는 조건문이 완전히 종료된 것으로 인식하였다. | 그런데 갑자기 else를 마주하자 오류를 낸 것. | . 아래는 옳은 예이다. | . if (5 &gt; 3) { print(&quot;우징엉&quot;) } else { print(&quot;오징엉&quot;) } . [1] &#34;우징엉&#34; . 위 코드처럼 코드가 끝나지 않았음을 컴퓨터에게 알려줘야 한다. | . &#44284;&#51228; . if문을 활용하여 제곱근을 계산하는 함수를 만드시오. | . mysqrtfun &lt;- function(x){ if (x &gt;= 0){ print(sqrt(x)) }else{ print(&quot;x는 양수이어야 합니다.&quot;) } } . mysqrtfun(-2) . [1] &#34;x는 양수이어야 합니다.&#34; . mysqrtfun(2) . [1] 1.414214 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/30/R%EC%9E%85%EB%AC%B8-4%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/30/R%EC%9E%85%EB%AC%B8-4%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 30, 2021"
        }
        
    
  
    
        ,"post25": {
            "title": "R : for()",
            "content": "Problem 1 . . Solution I . $f(a) = cfrac{2^a+2^{-a}}{2^{a}-2^{-a}}$에서 $f(a) =-2$를 만족하는 a를 구해보자. . f &lt;-function(a){ (2**a + 2**(-a))/(2**a - 2**(-a)) } . $f(a)$의 그래프를 그리고 $f(a) = -2$에 해당하는 수평선을 그려서 a의 대략적인 범위를 구해보자. . a = seq(from = -5, to = 5, by = 0.1) plot(a, f(a)) abline(h= -2, col = &quot;red&quot;) . $-2&lt;a&lt;0$임을 알았다. . 범위를 좁히고, by 옵션을 사용하여 더 촘촘히 다시 그려보자. . a = seq(from = -1, to = -0.5, by = 0.0001) plot(a, f(a), type = &quot;l&quot;, lwd = 4) abline(h = -2, col = &quot;red&quot;, lwd = 4) . $-0.9 &lt; a &lt; -0.8$임을 알았다. . - 이제 해를 찾아보자. $f(a) = -2$를 찾아야 하므로 f(a) == -2를 조건식으로 걸자 . a = seq(from = -0.9, to = -0.7, by = 0.0001) f(areached getOption(&#34;max.print&#34;) -- omitted 1001 entries ] . . 이중에 적당한 값(TRUE)가 있을까? | . TRUE가 있는지 체크할 수 있는 방법은 없을까? | . True and False . 컴퓨터는 TRUE, FALSE를 각각 1, 0으로 인식한다. . print(TRUE + FALSE) . [1] 1 . print(TRUE * 2) . [1] 2 . print(2 * c(TRUE, FALSE, TRUE)) . [1] 2 0 2 . sum(c(TRUE, FALSE, TRUE)) . [1] 2 . Application . sum(f(a) == 2) . [1] 0 . 어? 없네 . 사실 컴퓨터는 근사계산을 하였으므로 $f(a) = -2$인 경우를 정확하게 찾기는 힘들다. . 따라서 적당한 근사값인 $f(a) approx -2$인 경우를 찾는게 더 합리적이다. . $|f(a) + 2|$이 최솟값을 갖게하는 $a$를 구해도 무방하다. . min(abs(f(a) + 2)) # f(a) + 2d의 절댓값 중 가장 작은 값 . [1] 3.898777e-05 . min 함수를 사용하면 최솟값을 구할 수 있다. . abs 함수를 사용하면 절댓값을 구할 수 있다. . plot(abs(f(a) + 2)) . TFarray &lt;- abs(f(a) + 2) == min(abs(f(a) + 2)) a[TFarray] . [1] -0.7925 . $a approx -0.7925$ . $ therefore 4^{a} + 4^{-a} approx 4^{-0.7925} + 4^{0.7925} $ . print(4**0.7925 + 4**(-0.7925)) . [1] 3.333403 . print(c(5/2, 10/3,17/4,26/5,37/6)) . [1] 2.500000 3.333333 4.250000 5.200000 6.166667 . 고로 답은 2번이다. . Problem 2 . . Solution I - &#47924;&#51648;&#49457; &#45824;&#51077; . $a_{n+1} + a_n = (-1)^{n+1} times n$ . $a_{n+1} = -a_n + (-1)^{n+1} times n$ . a1=12 n=1 a2= -a1+(-1)^(n+1)* n n=2 a3= -a2+(-1)^(n+1)* n n=3 a4= -a3+(-1)^(n+1)* n n=4 a5= -a4+(-1)^(n+1)* n n=5 a6= -a5+(-1)^(n+1)* n n=6 a7= -a6+(-1)^(n+1)* n n=7 a8= -a7+(-1)^(n+1)* n n=8 a9= -a8+(-1)^(n+1)* n n=9 a10= -a9+(-1)^(n+1)* n a=c(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 . $k$의 최솟값은 $8$ | . Solution II - for&#47928; . $a_{n+1} + a_n = (-1)^{n+1} times n$ . $a_{n+1} = -a_n + (-1)^{n+1} times n$ . - 예비학습 . a_ &lt;- c() print(a_) . NULL . a_[1] &lt;- 12 print(a_) . [1] 12 . a_[2] &lt;- -12 print(a_) . [1] 12 -12 . a_[4] &lt;- 3 print(a_) . [1] 12 -12 NA 3 . a &lt;- c() a[1] &lt;- 12 . for(n in 1:10){ a[n+1] &lt;- -a[n] + (-1)**(n+1) * n } print(a) . [1] 12 -11 9 -6 2 3 -9 16 -24 33 -43 . . print((1:20)[a&gt;12]) . [1] 8 10 19 . 조건을 만족하는 $k$의 최솟값은 $8$ | . Problem 3 . . Solution . sal &lt;- c() sal[1] &lt;- 1 # 첫해의 연봉은 1로 하자. . for(i in 2:19){ sal[i] &lt;- sal[i-1] * 1.08 #조건 (가) } sal[20:28] = 2/3 * sal[19] #조건 (나) print(sal) . sum(sal) . [1] 65.42238 . $65.42238a approx cfrac{131}{2}a$이므로 . 28년 동안 근무하여 받는 연봉의 총합은 $ cfrac{131}{2}a$ . Problem 4 . . Solution . x = c() x[1] = 5 x[2] = 5 for (n in 3:100){ temp_ = mean(x[1:(n-1)]) + 1 # temp_ = x_1부터 x_n까지의 평균 sum_ = temp_ * n # sum_ = x_1부터 x_n까지의 합 x[n] = sum_ - sum(x[1:n-1]) # x[n] = x_1부터 x_n까지의 합 - x_1부터 x_{n-1}까지의 합 } x[100] . [1] 202 . $x_{100} = 202$ . Problem 5 . . Solution . a &lt;- c() a[1] = 0 # 첫째항은 0이라고 하자. a[2] = 1 . $S_n$은 $n$이 짝수인지, 홀수인지에 따라서 정의가 달라진다. . $S_3 = S_1 - 3$ . $S_5 = S_3 - 3$ . ... . $S_4 = S_2 + 2$ . $S_6 = S_4 + 2$ . ... . S &lt;- c() S[1] = a[1] S[2] = a[1] + a[2] . &#45208;&#47672;&#51648;&#47484; &#44396;&#54616;&#45716; &#50672;&#49328;&#51088; %% . 짝수, 홀수를 구분할 때 사용하면 좋다. | . (1:10) . [1] 1 2 3 4 5 6 7 8 9 10 . (1:10) %% 2 # 2로 나누었을 때의 나머지, 홀수는 1, 짝수는 0 . [1] 1 0 1 0 1 0 1 0 1 0 . for(n in 3:50){ if (n %% 2 == 1){ #n이 홀수인 경우 S[n] = S[n-2] - 3 } else if(n %% 2 == 0){ # n이 짝수인 경우 S[n] = S[n-2] + 2 } else{print(&quot;Error&quot;)} } S . [1] 0 1 -3 3 -6 5 -9 7 -12 9 -15 11 -18 13 -21 15 -24 17 -27 [20] 19 -30 21 -33 23 -36 25 -39 27 -42 29 -45 31 -48 33 -51 35 -54 37 [39] -57 39 -60 41 -63 43 -66 45 -69 47 -72 49 . $a_n = S_n - S_{n-1}$ 이므로 . for(n in 3:50){ a[n] = S[n] - S[n-1] } a . [1] 0 1 -4 6 -9 11 -14 16 -19 21 -24 26 -29 31 -34 [16] 36 -39 41 -44 46 -49 51 -54 56 -59 61 -64 66 -69 71 [31] -74 76 -79 81 -84 86 -89 91 -94 96 -99 101 -104 106 -109 [46] 111 -114 116 -119 121 . a[8] . [1] 16 . $ therefore a_8 = 16$ . &#44284;&#51228; . $a_1$이 달라지면 어떻게 되는지 확인하라. | . a &lt;- c() a[1] = 5 # 첫째항은 5이라고 하자. a[2] = 1 S &lt;- c() S[1] = a[1] S[2] = a[1] + a[2] for(n in 3:100){ if (n %% 2 == 1){ #n이 홀수인 경우 S[n] = S[n-2] - 3 } else if(n %% 2 == 0){ # n이 짝수인 경우 S[n] = S[n-2] + 2 } else{print(&quot;Error&quot;)} } for(n in 3:100){ a[n] = S[n] - S[n-1] } a[8] . [1] 16 . $a_1$이 달라지면 $s_n$은 달라지지만 $a_n (n geq 2)$은 달라지지 않는다. | . 1. 2005년 대학수학능력시험 6월 모의평가 수리영역(나형) 4번↩ . 2. 2021년 대학수학능력시험 9월 모의평가 수학영역(가형) 10번↩ . 3. 2007년 대학수학능력시험 6월 모의평가 수리영역(나형) 14번↩ . 4. 2007년 대학수학능력시험 수리영역(인문계) 19번↩ . 5. 2010년 대학수학능력시험 수리영역(나형) 30번↩ .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/17/R%EC%9E%85%EB%AC%B8-3%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/17/R%EC%9E%85%EB%AC%B8-3%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 17, 2021"
        }
        
    
  
    
        ,"post26": {
            "title": "시계열그래프를 그리는 방법",
            "content": "&#45936;&#51060;&#53552;&#51032; &#51333;&#47448; . 데이터를 시계열자료, 횡단면자료, 패널자료로 구분한다. | . &#49884;&#44228;&#50676;&#51088;&#47308; . 시간의 변화에 따라 얻는 자료를 시계열자료(time-series data) 라고 한다. . 예를 들어 연도별 이자율, 월별 평균 온도, 매 4년마다 우리나라 올림픽 메달 수는 시계열자료이다. . &#54945;&#45800;&#47732;&#51088;&#47308; . 동시간 대에 얻는 자료를 횡단면자료(cross-sectional data) 라고 한다. . 예를 들어 은행별 이자율, 도시별 온도, 역대 올림픽에서 금메달을 획득한 종목은 횡단면자료이다. . &#54056;&#45328;&#51088;&#47308; . 횡단면자료가 시간에 따라 나열되어 있는 것이 패널자료(panel data) 이다. . 예를 들어 아파트 가격이 지역별, 연도별로 되어 있으면 패널자료이다. . R&#50640;&#49436; &#49884;&#44228;&#50676; &#44536;&#47000;&#54532; &#44536;&#47532;&#44592; . R 함수와 그래프 그리는 방법 소개 | . stocks &lt;- scan(&quot;istat_data SamsungElectronicsStocks.txt&quot;) times &lt;- c(1:length(stocks)) . print(head(times)) . [1] 1 2 3 4 5 6 . head 함수는 처음 6개의 데이터를 출력하는 함수이다. . print(seq(1, 10, 3)) . [1] 1 4 7 10 . print(seq(from = 1, to = 10, by = 3)) . [1] 1 4 7 10 . seq(a, b, c) 또는 seq(from = a, to = b, by = c) 를 사용하면 숫자 a 부터 b 까지 간격이 c인 수열을 생성한다. . ts.plot &#54632;&#49688;&#47484; &#51060;&#50857;&#54620;&#45796;. . ts.plot(stocks, main = &quot;삼성전자 주가&quot;) . &#51068;&#48152; plot &#54632;&#49688;&#50640; &#50741;&#49496; type = &quot;l&quot; &#51012; &#52628;&#44032;&#54620;&#45796;. . plot(times, stocks, main = &quot;삼성전자 주가&quot;) . par(mfcol = c(2,1)) plot(times, stocks) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20statistics/2021/09/13/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8-1%EC%9E%A5.html",
            "relUrl": "/introduction%20to%20statistics/2021/09/13/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8-1%EC%9E%A5.html",
            "date": " • Sep 13, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "R : 변수, 벡터, 함수",
            "content": "&#48320;&#49688;&#50640; &#50612;&#46496;&#54620; &#44050;&#51012; &#45347;&#45716; &#48169;&#48277; . &#48169;&#48277;1 : = &#51060;&#50857; . a = 1 . print(a) . [1] 1 . &#48169;&#48277;2 : &lt;-&#51060;&#50857; . b &lt;- 3 . print(b) . [1] 3 . &#48320;&#49688; &#51060;&#47492;&#51012; &#49444;&#51221;&#54624; &#46412; &#51452;&#51032;&#54624; &#51216; . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196;&#47564; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . 444 &lt;- 5 . Error in 444 &lt;- 5: 대입에 유효하지 않은 (do_set) 좌변입니다 Traceback: . - &#48320;&#49688; &#51060;&#47492;&#51008; &#53945;&#49688;&#47928;&#51088;&#47196; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . ^^@ &lt; - 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예기치 않은 &#39;^&#39;입니다 1: ^ ^ Traceback: . - &#48320;&#49688; &#51060;&#47492;&#50640; &#46916;&#50612;&#50416;&#44592;&#47484; &#49324;&#50857;&#54624; &#49688; &#50630;&#45796;. . Kim Jeewoo &lt;- 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:5: 예상하지 못한 기호(symbol)입니다. 1: Kim Jeewoo ^ Traceback: . - &#46916;&#50612;&#50416;&#44592; &#45824;&#49888; &#50616;&#45908;&#48148;(_)&#47484; &#49324;&#50857;&#54616;&#45716; &#44163;&#51008; &#44032;&#45733;&#54616;&#45796;. . - &#45800;, &#48320;&#49688; &#51060;&#47492;&#51012; &#50616;&#45908;&#48148;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . Kim_Jeewoo &lt;- 4 Kim.Jeewoo &lt;- 5 . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . 1a &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 1a ^ Traceback: . - &#51060;&#44148; &#44032;&#45733;&#54616;&#45796; . a1 &lt;- 3 . &#44032;&#45733;&#51008; &#54616;&#45208; &#44428;&#51109;&#54616;&#51648; &#50506;&#45716; &#48320;&#49688; &#51060;&#47492; . print(pi) . [1] 3.141593 . pi&lt;-333 . print(pi) . [1] 333 . 원래 내장된 $ pi$가 날아가버렸다... . &#48320;&#49688; &#49373;&#49457;&#49884; &#54017; . - &#48320;&#49688;&#47484; &#52629;&#50557;&#54624; &#46412; &#47784;&#51020;&#51012; &#51228;&#50808;&#54616;&#47732; &#51339;&#45796;. . result -&gt; rslt | residual -&gt; rsdl | . - &#51076;&#49884;&#47196; &#48320;&#49688;&#47749;&#51012; &#49324;&#50857;&#54644;&#50556; &#54624; &#44221;&#50864; &#48320;&#49688; &#51060;&#47492; &#45149;&#50640; &#50616;&#45908;&#48148;&#47484; &#48537;&#51064;&#45796;. . x, y, rslt_, rsdl | . &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . &#48169;&#48277;1 - &#51649;&#51217; &#51077;&#47141; . v1 &lt;- c(1, 2, 3, 3, 4, 5, 2) . print(v1) . [1] 1 2 3 3 4 5 2 . &#48169;&#48277;2 - seq&#47484; &#51060;&#50857; . ?seq #실행하면 seq의 사용법에 대해 알려준다. . v2 &lt;- seq(from=0, to=10, by=0.1) #0부터 10까지 0.1 단위로 벡터 생성! . print(v2) . [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 [16] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 [31] 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 [46] 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 [61] 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 [76] 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 [91] 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . print(seq(from=0, to=1, length.out = 57)) #0부터 1까지 10등분 . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . &#48169;&#48277;3 - : &#51060;&#50857; . print(0:56) . [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 [51] 50 51 52 53 54 55 56 . print(0:56 / 56) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . &#48169;&#48277;4 - rep &#51060;&#50857; . print(rep(0,22)) #0을 22번 반복 . [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . print(rep(4,12)) #4를 12번 반복 . [1] 4 4 4 4 4 4 4 4 4 4 4 4 . print(rep(5, 77)) . [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 [39] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 [77] 5 . &#54632;&#49688;&#47484; &#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . - &#44592;&#48376; &#44396;&#51312; . 함수 이름 &lt;- function(입력){ 함수의 기능 return 출력 } . - &#50696;&#49884; . f &lt;- function(d){ y=2^(-0.25*d) return(y) } . f(8) . 0.25 - return&#51012; &#49373;&#47029;&#54644;&#46020; &#44316;&#52270;&#45796;. . g &lt;- function(d){ y=2^(-0.25*d) y } . g(8) . 0.25 &#48289;&#53552;&#51032; &#50896;&#49548;&#47484; &#48977;&#45716; &#48169;&#48277; . x &lt;- c(1,2,-2,4,5,-5,6) print(x) . [1] 1 2 -2 4 5 -5 6 . &#50896;&#49548;&#51032; &#48264;&#54840;&#47484; &#48520;&#47084;&#49436; &#48977;&#45716; &#48169;&#48277; . - &#52395;&#48264;&#51704; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . 파이썬과 다르게 인덱싱은 1부터 시작한다. . print(x[1]) . [1] 1 . - &#46160;&#48264;&#51704; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[3]) . [1] -2 . - &#52395;&#48264;&#51704;&#48512;&#53552; &#49464;&#48264;&#51704;&#44620;&#51648;&#51032; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[1:3]) . [1] 1 2 -2 . print(x[c(1,2,3)]) . [1] 1 2 -2 . - 2, 5, 6 &#48264;&#51704;&#51032; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[c(2, 5, 6)]) . [1] 2 5 -5 . - 3&#48264;&#51704; &#50896;&#49548;&#47484; &#51228;&#50808;&#54616;&#44256; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . print(x[-3]) . [1] 1 2 4 5 -5 6 . - 3, 4&#48264;&#51704;&#51032; &#50896;&#49548;&#47484; &#51228;&#50808;&#54616;&#44256; &#48977;&#44256;&#49910;&#45796;. . print(x[-c(3,4)]) . [1] 1 2 5 -5 6 . print(x[-(3:4)]) . [1] 1 2 5 -5 6 . &#50612;&#46496;&#54620; &#51312;&#44148;&#51012; &#51452;&#44256;, &#44536; &#51312;&#44148;&#50640; &#47564;&#51313;&#54616;&#45716; &#50896;&#49548; (&#54841;&#51008; &#47564;&#51313;&#54616;&#51648; &#50506;&#45716; &#50896;&#49548;)&#47484; &#48977;&#45716; &#48169;&#48277; . - &#50577;&#49688;&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . (1) 양수인지 스스로 판단 . (2) 양수라면 나간다. . print(x&gt;0) . [1] TRUE TRUE FALSE TRUE TRUE FALSE TRUE . x&gt;0의 결과는 TRUE, FALSE가 포함된 벡터 . print(x[x&gt;0]) . [1] 1 2 4 5 6 . - 3&#51060;&#49345;&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x&gt;3) . [1] FALSE FALSE FALSE TRUE TRUE FALSE TRUE . print(x[x&gt;3]) . [1] 4 5 6 . - TRUE &#46308;&#50668;&#45796;&#48372;&#44592; . print(x) . [1] 1 2 -2 4 5 -5 6 . array_ = c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE) . print(array_) . [1] TRUE FALSE TRUE FALSE FALSE FALSE FALSE . print(x[array_]) . [1] 1 -2 . - &#44050;&#51060; -2&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . print(x[x == -2]) . [1] -2 . - &#51025;&#50857;&#50696;&#51228; 1 . x &lt;- c(1,2,3,4,5) y &lt;- x^2 . print(x) . [1] 1 2 3 4 5 . print(y) . [1] 1 4 9 16 25 . $y=9$가 되도록 하는 $x$를 구하고싶다. | . print(x[y == 9]) . [1] 3 . - &#51025;&#50857;&#50696;&#51228; 2 - &#54980;&#49696; . 후술 | . &#44536;&#47548;&#51012; &#44536;&#47532;&#45716; &#48277; . x &lt;- 1:60/10 print(x) . [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [20] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 [39] 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 [58] 5.8 5.9 6.0 . y &lt;- sin(x) y . &lt;ol class=list-inline&gt;0.0998334166468282 | 0.198669330795061 | 0.29552020666134 | 0.389418342308651 | 0.479425538604203 | 0.564642473395035 | 0.644217687237691 | 0.717356090899523 | 0.783326909627483 | 0.841470984807897 | 0.891207360061435 | 0.932039085967226 | 0.963558185417193 | 0.98544972998846 | 0.997494986604054 | 0.999573603041505 | 0.991664810452469 | 0.973847630878195 | 0.946300087687414 | 0.909297426825682 | 0.863209366648874 | 0.80849640381959 | 0.74570521217672 | 0.675463180551151 | 0.598472144103957 | 0.515501371821464 | 0.42737988023383 | 0.334988150155905 | 0.239249329213982 | 0.141120008059867 | 0.0415806624332905 | -0.0583741434275801 | -0.157745694143248 | -0.255541102026831 | -0.35078322768962 | -0.442520443294852 | -0.529836140908493 | -0.611857890942719 | -0.687766159183974 | -0.756802495307928 | -0.81827711106441 | -0.871575772413588 | -0.916165936749455 | -0.951602073889516 | -0.977530117665097 | -0.993691003633464 | -0.999923257564101 | -0.996164608835841 | -0.982452612624332 | -0.958924274663138 | -0.925814682327732 | -0.883454655720153 | -0.832267442223901 | -0.772764487555987 | -0.705540325570392 | -0.631266637872322 | -0.550685542597638 | -0.464602179413757 | -0.373876664830236 | -0.279415498198926 | &lt;/ol&gt; plot(x, y) . plot(x, y^2) . plot(x,y) lines(x, y^2) . plot(x, y) points(x, y^2) . plot(x, y, type=&#39;l&#39;) lines(x, y^2) . plot(x, y, type =&#39;l&#39;, col=&#39;blue&#39;) lines(x, y^2, type = &#39;p&#39;, col = &#39;#ADD826&#39;) lines(x, y^6 - y^3, col = &#39;lightblue&#39;) . &#51452;&#51032;&#54624; &#51216; . - 그림 자체를 생성 해주는 plot과 같은 명령이 있고, 생성된 그림에 덧붙여서만 그릴 수 있는 lines, points, abline과 같은 기생함수가 있다. . - 기생함수는 단독으로 쓸 수 없다. . lines(x,y) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y) 2. lines.default(x, y) 3. plot.xy(xy.coords(x, y), type = type, ...) . lines(x,y) ploat(x,y) . &#51452;&#49437; &#51060;&#50857; &#48169;&#48277; . - &#51452;&#49437;&#51008; &#49892;&#54665;&#54616;&#51648; &#50506;&#45716; &#47928;&#51109;&#51060;&#45796;. . a &lt;- 1 a &lt;- a+1 a &lt;- a+1 print(a) . a &lt;- 1 #a &lt;- a+1 a &lt;- a+1 print(a) . - &#50780; &#50416;&#45716;&#44032;? . (1) 코드를 나눠서 테스트 할 때 . (2) 코드에 대한 설명이나 메모를 쓰고 싶을 때 . - &#44284;&#51228; . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 . plot(x, y) #할당된 점만 표시 . plot(x, y, type = &#39;l&#39;) #할당된 점을 선으로 이어서 표시 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post28": {
            "title": "R : 소개",
            "content": "R . R is a language and environment for statistical computing and graphics. | . R은 좋은 계산기이다. | . R&#46020;&#49436; &#52280;&#44256;&#51088;&#47308; . https://rc2e.com/ . https://adv-r.hadley.nz/ . Problem 1 . Solution I . $I_d = I_0 2^{-0.25d}$ . $ cfrac{I_d}{I_0} = 0.25 = 2^{-2} = 2^{-0.25d}$ . $-2 = -0.25d$ . $d = 8m$ . . 갑 : 음.. 근데 8m 말고 11m일 때랑 7m일 때의 비율도 계산해줘 . 갑 : 아 아니다 그냥 1m부터 40m까지 다 구해줘!! . 을 : ?? (일일이 대입하면 너무 힘든데... 어쩌지?) . . Solution II . $d$를 입력하면 $ cfrac{I_d}{I_0}$가 계산되는 아래와 같은 함수를 만들고 싶다. . $ cfrac{I_d}{I_0}=y=f(d)=2^{-0.25d}$ . f &lt;- function(d){ y=2^(-0.25*d) y } . print(f(8)) . [1] 0.25 . print(f(11)) . [1] 0.1486509 . print(f(7)) . [1] 0.2973018 . for(d in 1:40){ print(f(d)) } . [1] 0.8408964 [1] 0.7071068 [1] 0.5946036 [1] 0.5 [1] 0.4204482 [1] 0.3535534 [1] 0.2973018 [1] 0.25 [1] 0.2102241 [1] 0.1767767 [1] 0.1486509 [1] 0.125 [1] 0.1051121 [1] 0.08838835 [1] 0.07432544 [1] 0.0625 [1] 0.05255603 [1] 0.04419417 [1] 0.03716272 [1] 0.03125 [1] 0.02627801 [1] 0.02209709 [1] 0.01858136 [1] 0.015625 [1] 0.01313901 [1] 0.01104854 [1] 0.009290681 [1] 0.0078125 [1] 0.006569503 [1] 0.005524272 [1] 0.00464534 [1] 0.00390625 [1] 0.003284752 [1] 0.002762136 [1] 0.00232267 [1] 0.001953125 [1] 0.001642376 [1] 0.001381068 [1] 0.001161335 [1] 0.0009765625 . 엄청 편하다.. . Solution III . $y=f(d)$의 그래프를 구하고 싶다. . d &lt;- seq(from = 0, to = 10, by = 0.01) y &lt;- 2^(-0.25*d) plot(d, y, type = &quot;l&quot;, lwd = 5) abline(h = 0.25, col=2, lwd=5, lty = 1) #col = 색, lwd = 굵기, lty = 점선 #h = 수평선, v = 수직선 . 1. 2005 예비평가(나) 12월/평가원26(고3)↩ .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post29": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stahangryum.github.io/stahangryum/jupyter/2020/02/20/t12est.html",
            "relUrl": "/jupyter/2020/02/20/t12est.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post30": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stahangryum.github.io/stahangryum/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Contact . Email : stahangryum@gmail.com | .",
          "url": "https://stahangryum.github.io/stahangryum/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stahangryum.github.io/stahangryum/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}