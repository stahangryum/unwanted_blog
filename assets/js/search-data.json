{
  
    
        "post0": {
            "title": "통계학입문 - 들어가며",
            "content": "stocks &lt;- scan(&quot;통계학입문dat SamsungElectronicsStocks.txt&quot;) print(stocks) . print(length(stocks)) . [1] 249 . times &lt;- c(1:length(stocks)) times . head(times) . &lt;ol class=list-inline&gt;1 | 2 | 3 | 4 | 5 | 6 | &lt;/ol&gt; seq(1, 10, 3) . &lt;ol class=list-inline&gt;1 | 4 | 7 | 10 | &lt;/ol&gt; plot(times, stocks) . par(mfcol=c(1,2)) . main : graph의 제목을 붙인다. . type : graph 유형을 결정한다. . type = &quot;l&quot; . 하면 점 없이 선으로만 graph를 그린다. . &#49884;&#44228;&#50676;&#44536;&#47000;&#54532;&#47484; &#44536;&#47532;&#45716; &#48169;&#48277; . ts.plot 함수를 이용한다. . | 일반 plot 함수에 옵션 type =&quot;l&quot;을 추가한다. . | plot(times, stocks, main = &quot;삼성전자 주가&quot;, type = &quot;l&quot;) . ts.plot(stocks, main = &quot;삼성전자 주가&quot;) . &#51061;&#55192;&#47928;&#51228; . 통계학의 목적은 표본에서 얻은 정보를 이용하여 모집단에 대한 것을 알아보려는 것이다. | 일부분인 표본을 이용하여 전체인 모집단에 대한 것을 알아보려는 것을 통계적 추론이라고 한다. | 통계학은 통계를 사용할 때 필연적으로 수반되는 오차를 계산하여 정보이용자나 의사결정자에게 제공한다. | 자료의 척도형태를 크게 두 가지로 나누면 범주형 자료와 양적 자료로 나눌 수 있다. | 범주형 자료를 명목형 자료와 순서형 자료로 구분할 수 있다. | 자료의 계층은 숫자형, 순서형, 명목형 순으로 높다. | 높은 계층의 자료를 낮은 계층의 자료로 바꾸는 것은 가능하나 그 반대로는 불가능하다. | 시계열 자료는 시간축 위의 자료, 횡단면 자료는 동시점에서의 자료를 뜻한다. | 시계열 자료와 횡단면 자료가 섞여 있는 자료는 패널 자료이다. | &#50672;&#49845;&#47928;&#51228; . 관심 대상을 조사하기 위하여 그 대상 전체를 조사하지 못하고 일부만 조사하는 경우가 대부분인데, 그 일부를 무엇이라 하는가? 그 관심의 대상 전체를 무엇이라 하는가? | (표본, 모집단) . 모집단에 대한 전수조사를 하지 않고 그 일부인 표본조사를 하는 이유를 설명하여라. | (모집단을 조사함에 있어 시간적, 금전적 제약이 있는 경우 표본조사를 통해 모집단을 추정합니다. 가령 대선 여론조사의 경우 모집단 전체를 조사할 수 없으므로 일부만 조사합니다.) . 다음 조사에서의 모집단과 표본은 무엇인가? | a. 모집단 : 지하철에서 MP3를 이용하는 모든 사람, 표본 : 무작위로 조사한 100명의 MP3 사용자 . b. 모집단 : 전국 200개 품목의 소비자 물가, 표본 : 30,000군데에서 소비자 물가 . c. 모집단 : 각 10개 해수욕장에서 민박집의 민박 가격, 표본 : 5~10군데 민박집의 민박 가격 . d. 모집단 : 세 가지 브랜드 피자 맛의 순위, 표본 : 학생 20명이 매긴 피자 맛의 순위 . 위 문제의 자료들은 각각 어느 계층의 자료인가? | a. 범주형 자료 - 명목형 자료 . b. 양적 자료 - 숫자형 자료 . c. 양적 자료 - 숫자형 자료 . d. 범주형 자료 - 순서형 자료 . 다음의 예들에서 모집단과 표본을 서술하여라. | a. 모집단 : 전체, 표본 : 각각 50명 . b. 모집단 : 유가증권시장과 코스닥시장의 수익률, 표본 : 20개 증권의 수익률 . c. 모집단 : 통일대학 개교 후 남녀 합격률, 표본 : 지난 10년간의 남녀 합격률 . d. 모집단 : 은행과 제이금융권의 대출규모, 표본 : 은행의 대출규모 전체와 제이금융권 50개의 대출규모 . 다음 자료들은어떤 척도의 종류에 속하는가? 자료의 계층에서 가능한 한 높은 계층으로 답하여라 | a. .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20statistics/2021/09/13/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8-1%EC%9E%A5.html",
            "relUrl": "/introduction%20to%20statistics/2021/09/13/%ED%86%B5%EA%B3%84%ED%95%99%EC%9E%85%EB%AC%B8-1%EC%9E%A5.html",
            "date": " • Sep 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "R - 변수, 벡터, 함수",
            "content": "&#48320;&#49688;&#50640; &#50612;&#46496;&#54620; &#44050;&#51012; &#45347;&#45716; &#48169;&#48277; . &#48169;&#48277;1 : = &#51060;&#50857; . a = 1 . print(a) . [1] 1 . &#48169;&#48277;2 : &lt;-&#51060;&#50857; . b &lt;- 3 . print(b) . [1] 3 . &#48320;&#49688; &#51060;&#47492;&#51012; &#49444;&#51221;&#54624; &#46412; &#51452;&#51032;&#54624; &#51216; . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196;&#47564; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . 444 &lt;- 5 . Error in 444 &lt;- 5: 대입에 유효하지 않은 (do_set) 좌변입니다 Traceback: . - &#48320;&#49688; &#51060;&#47492;&#51008; &#53945;&#49688;&#47928;&#51088;&#47196; &#44396;&#49457;&#54624; &#49688; &#50630;&#45796;. . ^^@ &lt; - 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:1: 예기치 않은 &#39;^&#39;입니다 1: ^ ^ Traceback: . - &#48320;&#49688; &#51060;&#47492;&#50640; &#46916;&#50612;&#50416;&#44592;&#47484; &#49324;&#50857;&#54624; &#49688; &#50630;&#45796;. . Kim Jeewoo &lt;- 4 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:5: 예상하지 못한 기호(symbol)입니다. 1: Kim Jeewoo ^ Traceback: . - &#46916;&#50612;&#50416;&#44592; &#45824;&#49888; &#50616;&#45908;&#48148;(_)&#47484; &#49324;&#50857;&#54616;&#45716; &#44163;&#51008; &#44032;&#45733;&#54616;&#45796;. . - &#45800;, &#48320;&#49688; &#51060;&#47492;&#51012; &#50616;&#45908;&#48148;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . Kim_Jeewoo &lt;- 4 Kim.Jeewoo &lt;- 5 . - &#48320;&#49688; &#51060;&#47492;&#51008; &#49707;&#51088;&#47196; &#39;&#49884;&#51089;&#39;&#54624; &#49688; &#50630;&#45796;. . 1a &lt;- 3 . Error in parse(text = x, srcfile = src): &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 1a ^ Traceback: . - &#51060;&#44148; &#44032;&#45733;&#54616;&#45796; . a1 &lt;- 3 . &#44032;&#45733;&#51008; &#54616;&#45208; &#44428;&#51109;&#54616;&#51648; &#50506;&#45716; &#48320;&#49688; &#51060;&#47492; . print(pi) . [1] 3.141593 . pi&lt;-333 . print(pi) . [1] 333 . 원래 내장된 $ pi$가 날아가버렸다... . &#48320;&#49688; &#49373;&#49457;&#49884; &#54017; . - &#48320;&#49688;&#47484; &#52629;&#50557;&#54624; &#46412; &#47784;&#51020;&#51012; &#51228;&#50808;&#54616;&#47732; &#51339;&#45796;. . result -&gt; rslt | residual -&gt; rsdl | . - &#51076;&#49884;&#47196; &#48320;&#49688;&#47749;&#51012; &#49324;&#50857;&#54644;&#50556; &#54624; &#44221;&#50864; &#48320;&#49688; &#51060;&#47492; &#45149;&#50640; &#50616;&#45908;&#48148;&#47484; &#48537;&#51064;&#45796;. . x, y, rslt_, rsdl | . &#48289;&#53552;&#47484; &#49440;&#50616;&#54616;&#45716; &#48169;&#48277; . &#48169;&#48277;1 - &#51649;&#51217; &#51077;&#47141; . v1 &lt;- c(1, 2, 3, 3, 4, 5, 2) . print(v1) . [1] 1 2 3 3 4 5 2 . &#48169;&#48277;2 - seq&#47484; &#51060;&#50857; . ?sqe #실행하면 sqe의 사용법에 대해 알려준다. . v2 &lt;- seq(from=0, to=10, by=0.1) #0부터 10까지 0.1 단위로 벡터 생성! . print(v2) . [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 [16] 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 [31] 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 [46] 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 [61] 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 [76] 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 [91] 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0 . print(seq(from=0, to=1, length.out = 57)) #0부터 1까지 10등분 . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . &#48169;&#48277;3 - : &#51060;&#50857; . print(0:56) . [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 [51] 50 51 52 53 54 55 56 . print(0:56 / 56) . [1] 0.00000000 0.01785714 0.03571429 0.05357143 0.07142857 0.08928571 [7] 0.10714286 0.12500000 0.14285714 0.16071429 0.17857143 0.19642857 [13] 0.21428571 0.23214286 0.25000000 0.26785714 0.28571429 0.30357143 [19] 0.32142857 0.33928571 0.35714286 0.37500000 0.39285714 0.41071429 [25] 0.42857143 0.44642857 0.46428571 0.48214286 0.50000000 0.51785714 [31] 0.53571429 0.55357143 0.57142857 0.58928571 0.60714286 0.62500000 [37] 0.64285714 0.66071429 0.67857143 0.69642857 0.71428571 0.73214286 [43] 0.75000000 0.76785714 0.78571429 0.80357143 0.82142857 0.83928571 [49] 0.85714286 0.87500000 0.89285714 0.91071429 0.92857143 0.94642857 [55] 0.96428571 0.98214286 1.00000000 . &#48169;&#48277;4 - rep &#51060;&#50857; . print(rep(0,22)) #0을 22번 반복 . [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 . print(rep(4,12)) #4를 12번 반복 . [1] 4 4 4 4 4 4 4 4 4 4 4 4 . print(rep(5, 77)) . [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 [39] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 [77] 5 . &#54632;&#49688;&#47484; &#49324;&#50857;&#54616;&#45716; &#48169;&#48277; . - &#44592;&#48376; &#44396;&#51312; . 함수 이름 &lt;- function(입력){ 함수의 기능 return 출력 } . - &#50696;&#49884; . f &lt;- function(d){ y=2^(-0.25*d) return(y) } . f(8) . 0.25 - return&#51012; &#49373;&#47029;&#54644;&#46020; &#44316;&#52270;&#45796;. . g &lt;- function(d){ y=2^(-0.25*d) y } . g(8) . 0.25 &#48289;&#53552;&#51032; &#50896;&#49548;&#47484; &#48977;&#45716; &#48169;&#48277; . x &lt;- c(1,2,-2,4,5,-5,6) print(x) . [1] 1 2 -2 4 5 -5 6 . &#50896;&#49548;&#51032; &#48264;&#54840;&#47484; &#48520;&#47084;&#49436; &#48977;&#45716; &#48169;&#48277; . - &#52395;&#48264;&#51704; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . 파이썬과 다르게 인덱싱은 1부터 시작한다. . print(x[1]) . [1] 1 . - &#46160;&#48264;&#51704; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[3]) . [1] -2 . - &#52395;&#48264;&#51704;&#48512;&#53552; &#49464;&#48264;&#51704;&#44620;&#51648;&#51032; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[1:3]) . [1] 1 2 -2 . print(x[c(1,2,3)]) . [1] 1 2 -2 . - 2, 5, 6 &#48264;&#51704;&#51032; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x[c(2, 5, 6)]) . [1] 2 5 -5 . - 3&#48264;&#51704; &#50896;&#49548;&#47484; &#51228;&#50808;&#54616;&#44256; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . print(x[-3]) . [1] 1 2 4 5 -5 6 . - 3, 4&#48264;&#51704;&#51032; &#50896;&#49548;&#47484; &#51228;&#50808;&#54616;&#44256; &#48977;&#44256;&#49910;&#45796;. . print(x[-c(3,4)]) . [1] 1 2 5 -5 6 . print(x[-(3:4)]) . [1] 1 2 5 -5 6 . &#50612;&#46496;&#54620; &#51312;&#44148;&#51012; &#51452;&#44256;, &#44536; &#51312;&#44148;&#50640; &#47564;&#51313;&#54616;&#45716; &#50896;&#49548; (&#54841;&#51008; &#47564;&#51313;&#54616;&#51648; &#50506;&#45716; &#50896;&#49548;)&#47484; &#48977;&#45716; &#48169;&#48277; . - &#50577;&#49688;&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . (1) 양수인지 스스로 판단 . (2) 양수라면 나간다. . print(x&gt;0) . [1] TRUE TRUE FALSE TRUE TRUE FALSE TRUE . x&gt;0의 결과는 TRUE, FALSE가 포함된 벡터 . print(x[x&gt;0]) . [1] 1 2 4 5 6 . - 3&#51060;&#49345;&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x&gt;3) . [1] FALSE FALSE FALSE TRUE TRUE FALSE TRUE . print(x[x&gt;3]) . [1] 4 5 6 . - TRUE &#46308;&#50668;&#45796;&#48372;&#44592; . print(x) . [1] 1 2 -2 4 5 -5 6 . array_ = c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE) . print(array_) . [1] TRUE FALSE TRUE FALSE FALSE FALSE FALSE . print(x[array_]) . [1] 1 -2 . - &#44050;&#51060; -2&#51064; &#50896;&#49548;&#47484; &#48977;&#44256;&#49910;&#45796;. . print(x) . [1] 1 2 -2 4 5 -5 6 . print(x[x == -2]) . [1] -2 . - &#51025;&#50857;&#50696;&#51228; 1 . x &lt;- c(1,2,3,4,5) y &lt;- x^2 . print(x) . [1] 1 2 3 4 5 . print(y) . [1] 1 4 9 16 25 . $y=9$가 되도록 하는 $x$를 구하고싶다. | . print(x[y == 9]) . [1] 3 . - &#51025;&#50857;&#50696;&#51228; 2 - &#54980;&#49696; . 후술 | . &#44536;&#47548;&#51012; &#44536;&#47532;&#45716; &#48277; . x &lt;- 1:60/10 print(x) . [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 [20] 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 [39] 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 [58] 5.8 5.9 6.0 . y &lt;- sin(x) y . &lt;ol class=list-inline&gt;0.0998334166468282 | 0.198669330795061 | 0.29552020666134 | 0.389418342308651 | 0.479425538604203 | 0.564642473395035 | 0.644217687237691 | 0.717356090899523 | 0.783326909627483 | 0.841470984807897 | 0.891207360061435 | 0.932039085967226 | 0.963558185417193 | 0.98544972998846 | 0.997494986604054 | 0.999573603041505 | 0.991664810452469 | 0.973847630878195 | 0.946300087687414 | 0.909297426825682 | 0.863209366648874 | 0.80849640381959 | 0.74570521217672 | 0.675463180551151 | 0.598472144103957 | 0.515501371821464 | 0.42737988023383 | 0.334988150155905 | 0.239249329213982 | 0.141120008059867 | 0.0415806624332905 | -0.0583741434275801 | -0.157745694143248 | -0.255541102026831 | -0.35078322768962 | -0.442520443294852 | -0.529836140908493 | -0.611857890942719 | -0.687766159183974 | -0.756802495307928 | -0.81827711106441 | -0.871575772413588 | -0.916165936749455 | -0.951602073889516 | -0.977530117665097 | -0.993691003633464 | -0.999923257564101 | -0.996164608835841 | -0.982452612624332 | -0.958924274663138 | -0.925814682327732 | -0.883454655720153 | -0.832267442223901 | -0.772764487555987 | -0.705540325570392 | -0.631266637872322 | -0.550685542597638 | -0.464602179413757 | -0.373876664830236 | -0.279415498198926 | &lt;/ol&gt; plot(x, y) . plot(x, y^2) . plot(x,y) lines(x, y^2) . plot(x, y) points(x, y^2) . plot(x, y, type=&#39;l&#39;) lines(x, y^2) . plot(x, y, type =&#39;l&#39;, col=&#39;blue&#39;) lines(x, y^2, type = &#39;p&#39;, col = &#39;#ADD826&#39;) lines(x, y^6 - y^3, col = &#39;lightblue&#39;) . &#51452;&#51032;&#54624; &#51216; . - 그림 자체를 생성 해주는 plot과 같은 명령이 있고, 생성된 그림에 덧붙여서만 그릴 수 있는 lines, points, abline과 같은 기생함수가 있다. . - 기생함수는 단독으로 쓸 수 없다. . lines(x,y) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y) 2. lines.default(x, y) 3. plot.xy(xy.coords(x, y), type = type, ...) . lines(x,y) ploat(x,y) . Error in plot.xy(xy.coords(x, y), type = type, ...): plot.new has not been called yet Traceback: 1. lines(x, y) 2. lines.default(x, y) 3. plot.xy(xy.coords(x, y), type = type, ...) . &#51452;&#49437; &#51060;&#50857; &#48169;&#48277; . - &#51452;&#49437;&#51008; &#49892;&#54665;&#54616;&#51648; &#50506;&#45716; &#47928;&#51109;&#51060;&#45796;. . a &lt;- 1 a &lt;- a+1 a &lt;- a+1 print(a) . [1] 3 . a &lt;- 1 #a &lt;- a+1 a &lt;- a+1 print(a) . [1] 2 . - &#50780; &#50416;&#45716;&#44032;? . (1) 코드를 나눠서 테스트 할 때 . (2) 코드에 대한 설명이나 메모를 쓰고 싶을 때 . - &#44284;&#51228; . plot(x,y)와 plot(x,y,type=&#39;l&#39;)을 비교해보기 . plot(x, y) #할당된 점만 표시 . plot(x, y, type = &#39;l&#39;) #할당된 점을 선으로 이어서 표시 .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/09/R%EC%9E%85%EB%AC%B8-2%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "R - 소개",
            "content": "&quot;R&#51008; &#51339;&#51008; &#44228;&#49328;&#44592;&#51060;&#45796;.&quot; . 2005&#45380; &#50696;&#48708;&#54217;&#44032;(&#45208;) 12&#50900;/&#54217;&#44032;&#50896;26&#48264;(&#44256;3) . . (&#54400;&#51060;1) . $I_d = I_0 2^{-0.25d}$ . $ frac{I_d}{I_0} = 0.25 = 2^{-2} = 2^{-0.25d}$ 이므로 . $-2 = -0.25d$ . $d = 8m$ . . 갑 : 음.. 근데 8m 말고 11m일 때랑 7m일 때의 비율도 계산해줘 . 갑 : 아 아니다 그냥 1m부터 40m까지 다 구해줘!! . 을 : ?? (일일이 대입하면 너무 힘든데... 어쩌지?) . . (&#54400;&#51060;2) . $d$를 입력하면 $ frac{I_d}{I_0}$가 계산되는 아래와 같은 함수를 만들고 싶다. | . $ frac{I_d}{I_0}=y=f(d)=2^{-0.25d}$ . f &lt;- function(d){ y=2^(-0.25*d) y } . print(f(8)) . [1] 0.25 . print(f(11)) . [1] 0.1486509 . print(f(7)) . [1] 0.2973018 . for(d in 1:40){ print(f(d)) } . [1] 0.8408964 [1] 0.7071068 [1] 0.5946036 [1] 0.5 [1] 0.4204482 [1] 0.3535534 [1] 0.2973018 [1] 0.25 [1] 0.2102241 [1] 0.1767767 [1] 0.1486509 [1] 0.125 [1] 0.1051121 [1] 0.08838835 [1] 0.07432544 [1] 0.0625 [1] 0.05255603 [1] 0.04419417 [1] 0.03716272 [1] 0.03125 [1] 0.02627801 [1] 0.02209709 [1] 0.01858136 [1] 0.015625 [1] 0.01313901 [1] 0.01104854 [1] 0.009290681 [1] 0.0078125 [1] 0.006569503 [1] 0.005524272 [1] 0.00464534 [1] 0.00390625 [1] 0.003284752 [1] 0.002762136 [1] 0.00232267 [1] 0.001953125 [1] 0.001642376 [1] 0.001381068 [1] 0.001161335 [1] 0.0009765625 . 엄청 편하다.. . (&#54400;&#51060;3) . $y=f(d)$를 그래프로 그려볼까? | . d &lt;- seq(from=0, to=10, by=0.01) y=2^(-0.25*d) plot(d,y) abline(v = 8, h = 0.25, col=2, lwd=5, lty = 1) #col = 색, lwd = 굵기, lty = 점선 #h = 수평선, v = 수직선 . (&#54400;&#51060;4) . 작성중 . x_ &lt;- c(1,2,3,4,5) x_ == 3 . &lt;ol class=list-inline&gt;FALSE | FALSE | TRUE | FALSE | FALSE | &lt;/ol&gt; x_ == 1 . &lt;ol class=list-inline&gt;TRUE | FALSE | FALSE | FALSE | FALSE | &lt;/ol&gt; d[y==1] . 40 I0=1 Id=I0*0.25 d = seq(from=0, to=10, by=0.01) y=I0*2^(-0.25*d)/Id plot(d,y) .",
            "url": "https://stahangryum.github.io/stahangryum/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "relUrl": "/introduction%20to%20r/2021/09/07/R%EC%9E%85%EB%AC%B8-1%EC%A3%BC%EC%B0%A8-%ED%95%84%EA%B8%B0.html",
            "date": " • Sep 7, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stahangryum.github.io/stahangryum/jupyter/2020/02/20/t12est.html",
            "relUrl": "/jupyter/2020/02/20/t12est.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stahangryum.github.io/stahangryum/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stahangryum.github.io/stahangryum/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stahangryum.github.io/stahangryum/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}